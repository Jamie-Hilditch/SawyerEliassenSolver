var documenterSearchIndex = {"docs":
[{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"EditURL = \"../../../examples/barotropic_zeta_refraction.jl\"","category":"page"},{"location":"literated/barotropic_zeta_refraction/#barotropic_zeta_refraction_example","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"This example demonstrates how to apply dealiasing, explores different variable representations and uses a preconditioner to speed up the iterative solver.","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Grid","page":"Barotropic zeta refraction","title":"Grid","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"The first step is to load the packages and then create a grid. Here the grid is non-dimensionalised by the half-width of the domain.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"using CairoMakie\nusing HDF5\nusing Printf\n\nusing SawyerEliassenSolver\n\nusing SpecialFunctions: erf","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"NX, NZ = 128, 512\nconst LX, LZ = 2, 0.1\ngrid = Grid(NX, NZ, (-LX / 2, LX / 2), LZ)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Grid{Float64}:\n  ├── NX: 128\n  ├── NZ: 512\n  ├─── x: [-1,1)\n  └─── z: [-0.1,0]\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Background-Flow","page":"Barotropic zeta refraction","title":"Background Flow","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"The background flow is barotropic with constant stratification N^2 = 200^2f^2 but spatially varying vorticity. We are modelling a cyclonic Gaussian filament in an otherwise anticyclonic flow. Non-dimensionalising by f the lateral shear is given by","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"V_x = Roleft(-1 + 2L^-1mathrme^-pi x^2L^2right)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"where Ro = 05 is the Rossby number of the anticyclonic region and L = 02 is the half-width of the Gaussian filament.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"const N²::Float64 = 200^2\nconst Ro = 0.5\nconst L = 0.2\nVx(x) = Ro * (-1 + 2 / L * exp(-π * x^2 / L^2));","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We create a background flow with the default f = 1.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"xgrid, zgrid = gridpoints(grid)\nbackground_flow = BackgroundFlow(grid)\nbackground_flow.Vx .= Vx.(xgrid);\nbackground_flow.Bz .= N²;","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Dealiasing","page":"Barotropic zeta refraction","title":"Dealiasing","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"The background flow is spatially varying and so it is a good idea to dealias by zeroing out the highest wavenumbers. This is done when creating the Domain. Here we drop the highest 10 wavenumbers in the horizontal.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"const dealias = 10\ndomain = Domain(grid; dealias_x=dealias)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Domain:\n  ├─────────── grid: Grid with eltype Float64 and size (128, 512)\n  ├─────── spectral: Spectral domain of size (65, 512) and spectral resolution (54, 511)\n  └───── transforms: FFTW transforms: rfft, type II DST and type II DCT.\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Variables","page":"Barotropic zeta refraction","title":"Variables","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Let's visualise the background flow in both physical and Fourier space. We can do this by creating an XZVariable and then transforming in the horizontal.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Vx_physical = XZVariable(domain)\nVx_physical .= background_flow.Vx\nVx_fourier = horizontal_transform(Vx_physical);\nsummary(Vx_fourier)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"\"65×512 FZVariable{Float64}\"","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Notice that Vx_fourier is an FZVariable. Variables can be any of six types determined by their horizontal and vertical representations. The six types are","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"XZVariable - physical in horizontal and vertical\nFZVariable - Fourier in horizontal, physical in vertical\nXSVariable - physical in horizontal, sine in vertical\nFSVariable - Fourier in horizontal, sine in vertical\nXCVariable - physical in horizontal, cosine in vertical\nFCVariable - Fourier in horizontal, cosine in vertical","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Furthermore, the functions horizontal_transform, sine_transform, cosine_transform, and the corresponding inplace versions horizontal_transform!, sine_transform!, cosine_transform!, can be used to transform between these representations.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Let's plot the background flow as a function of x and its power spectrum as a function of horizontal wavenumber k_x. We also indicate where the 10th wavenumber is.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"kx = xwavenumbers_full(domain)\n\nfig = Figure(; size=(1200, 600))\nLabel(fig[1, 1], \"Gaussian vorticity filament\"; tellwidth=false)\nax_physical = Axis(fig[2, 1]; xlabel=L\"x\", ylabel=L\"V_x\")\nlines!(ax_physical, xgrid[:, 1], Vx_physical[:, 1]; color=:black)\nxlims!(ax_physical, -1, 1)\n\nax_spectral = Axis(fig[3, 1]; xlabel=L\"k_x\", ylabel=L\"\\Phi_{V_x}\")\nscatterlines!(ax_spectral, kx, abs2.(Vx_fourier[:, 1]); color=:black)\nvlines!(ax_spectral, kx[dealias]; color=:red)\nxlims!(ax_spectral, 0, 200)\n\ncurrent_figure() # hide\nfig","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"<img width=1200 height=600 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAACWAAAASwCAIAAADwxubWAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdebxPdeI/8Pd1XS7Zyb6USFqkEFITqbSNrd0IZUpKi5iW7zRDe43STJGtjGxtSpuhifZNy0QoRWTJFrJlufe69/fH+f7u9869CF336H6ez7/ezuf9Oef1OcfMp8/j5X1OUlZWVgAAAAAAAAASQ5G4AwAAAAAAAAAFR0EIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAlEQQgAAAAAAAAJREEIAAAAAAAACURBCAAAAAAAAAmkaNwBAAAADqydO3d++eWXy5cvX7duXa1aterXr1+rVq2kpKS4cwEAAEA8FIQAAEChtXLlynvuuWfSpElr1qzJuf2QQw659tprb7vttgoVKsSVLR998MEHmzdvDiG0bds2JSUl7jjxS09PnzFjRgihdOnSrVq12te3F/D5XLNmze233z59+vQNGzY8+OCD11xzzerVq7/44osQQp06dRo2bBhNa9my5eLFi++4444+ffoc6EgAAEChpyAEAAAKp6eeeur666+Pmp4QQnJycrly5datWxdC+PnnnwcNGjRixIjhw4dfdtllscbMB7169Zo3b14I4ccff6xUqVLccQpUWlral19+GUI4+uijS5YsGW3cuHHjOeecE0I45phj5s6du6/73OX5nDNnzo4dO2rVqlWlSpV8Sx9CVlZW586dP/jgg+iPGzZsCCG89957F110UQjhuuuuGzJkSPTSjz/+uHr16i1btuTj0Q82u7yaAADAgeAZhAAAQCH06KOP9ujRY/PmzUWLFu3Tp89nn32Wlpa2du3aLVu2zJw5s0uXLkWKFNm0aVP37t3ffvvtuMOy/1asWNGsWbNmzZp99dVXB/RAv//975s1azZu3Lj83e0333wTtYPXXnvtokWLbrrppvzd/29LgV1NAADACkIAAKCwef/99/v27RtCqFKlytSpU0844YTslw455JCTTjppwoQJV1555Xnnnbdjx47OnTt//fXX+bssrIB17NixadOmIYTU1NS4sxwUUlNTu3fvHkKoWbPmfry9IM/n4sWLo8GAAQMqV64cjQ877LAof4sWLQ50AAAAIDEpCAEAgEIlMzPzyiuvzMzMLFKkyLRp0xo3brzLaW3bth0+fPgVV1zx008/PfPMMzfeeGMB58xH99xzT9wRDi6lSpUaM2bMfr+9IM/nzp07o0GZMmWyNzZt2vTX5AcAAPhFCkIAAKBQeeWVVxYsWBBC6N69++7awUjXrl3//Oc/r1ixYuLEiXkLwqysrLfffvvrr79etmxZcnJyzZo1GzdunHdF17p161auXJmSktKgQYNcL+3cufPrr78OIdStWzfXA9W2bt06ffr0hQsXrlq1qkaNGg0aNDjzzDOTk5PzhtybmatWrVq7dm3JkiXr1q2b6+2rV69+4403li1btm7dusqVK9euXfvss88uV65crmnffffdtm3batWqVbZs2YyMjClTpsyaNWv79u316tU744wz6tSps4fTGELYtm3bd999F0KoXr16hQoV8k6IEoYQjj766CJF/u9RFz/88MO0adMWLVqUnp5evXr1008/vVGjRrnem5mZGd1wsmHDhsnJyQsXLnz22Wc3b958zz33zJ8/f8WKFdkfITU1tUKFCtWrV8/+RIceemjetaHff//9v/71ryVLlpQuXfrII49s3bp19tK9XZ7PBQsW7NixIz09PXpp7ty5xYsXr1+//vz58zMyMipWrFitWrW8H3nZsmUbN26MZu7ypP3888+LFy9eunRp9MevvvqqWLFiVatWrVSpUvZHPuyww0qVKrXLt+c0d+7cmTNnLlu2bOvWrTVq1KhXr167du2KFs39ez96HONRRx1VtGjRb7/99tVXX125cmW5cuXatm3bsmXLaM6GDRtefvnlb775Jjk5uUGDBh07dtxdgFWrVv3rX//67rvvkpKS6tate8YZZ9SuXTvXnOwPEh10w4YNkydPXrBgQbFixRo0aHD++eeXLl06mpmRkbGHqwkAAOS/LAAAgEKkQ4cOIYTU1NRly5b94uTZs2dPnTp12rRpmZmZObe/++67xx57bN4fUE2bNp0/f37OmY888kgIoUaNGnl3/uOPP0bveu+993JuHzlyZNWqVXPt+aijjnr33Xdz7WEvZ/br1y+E0Lx585wb09PTr7vuuuLFi+d6e6lSpQYOHJjrQE2aNAkhjBs37ssvvzziiCNyzi9WrNidd96559O4ZcuWqAG94oordjmhVatWIYSjjz46e0tmZuZDDz1UrFixXPG6dOmycePGnO/dvHlz9NKPP/44YcKElJSUEEJycvKyZcvyXqCePXvm/ES33nprzl3t3LnzzjvvzNlQhhBKly59//335/wLkOt85johIYQjjjgiKyvrjDPOCCG0atUq7+fNzMyMWtXu3bvv7qS99dZbefPff//9OT/y1KlTs+dHMaIJ2X744Yezzz47735q1qz50ksv5ZwZFZwhhCVLlvTv3z8pKSnn/B49emRmZr7yyisVK1bMub1GjRqff/553vB///vfc127okWLduvWbfPmzbu8dsuWLXv22WdzdY2VK1d+5ZVXopl7vpoAAEC+s4IQAAAoPLKyst5///0Qwumnn743z59r1KhR3iVrixcv7tix4/r165OSkk455ZR69ert2LFj1qxZX3311WeffXb++efPmjXrkEMO2b+ETz/99NVXXx1CKFu2bJs2bSpWrPjdd9+988478+fPv+CCC2bPnp29HG3vZ+7Sn/70p6FDh4YQqlat2qpVq/Lly69cufLNN9/csmXLwIEDq1WrFu08p2XLlt10003btm3r1KlTo0aNvv/++2effXb79u0DBgxo2LDhRRddtLtjHXLIIR06dHj66adfeumlESNGRB1etqVLl3744YchhCuvvDJ74wUXXDB58uQQQvny5Zs3b162bNlPPvlk8eLFEydO/Oijjz766KO8K//ef//9bt26RffkLF26dGpqatu2bbdv3/7BBx+EEE466aTSpUsfffTRuwuZmZl53nnnTZs2LYRQq1atli1bpqenv/fee2vXrr399tuLFSt288037/KNrVq1Ouywwz744IPt27fXr1+/du3aNWrUCCFcfPHF06dP//DDD1euXJnrWnzwwQdLliwJIXTr1m13ecqXL9+2bdu1a9fOnj07hNCmTZsiRYocdthhu5ufV/QEzZkzZ4YQjjnmmOOPP7548eILFy58//33ly9ffumll3788cfHH398rnfdeuutzzzzTIsWLdq0abNhw4aJEydu3LhxzJgx27Zte+GFFw455JBu3brVqVPn7bfffu+993744Ycrr7xy1qxZ2W/Pysq68MILX3zxxRBCtWrVTjrppKJFi3788cc//PDD2LFj582bN2PGjLJly+Y66JQpU3r37l2tWrULLrigTp06n3/++ZQpU9asWdOlS5cvv/zy8MMP39erCQAA/FpxN5QAAAD5ZvHixdEvnbvuumu/d9KnT58QQsmSJT/66KOc24cNGxbtfMaMGdkb93UFYVRbnnzyyZs2bcre+Prrr0fL2u699979mJl3BWF0P88QwqWXXrp9+/ackaKVkaeeemrOqNF6u9TU1MMOO2zOnDnZ2+fNmxctDezQocOeT9qrr74aHTHnorfIgw8+GEJISUlZvXp1tOXll1+OJnfu3HnLli3ZMx966KHo011//fXZG7NXoVWuXLl8+fJPPPHE8uXLs1/NvuKffvpp3k+UcwVh9lP9brvttuz1gj/99NOZZ54ZQihWrNiSJUt2dz6zsrKiFYGDBg3K3rJ27droNp5DhgzJ9ZF79eoVQqhVq9bOnTv38rxt27Yt70fe8wrCSZMmRdMeffTRnPv85JNPorV6f/nLX7I3Zq8gDCHcd9992du//fbb1NTUaPuRRx65ePHi7Je6d+8ebc95wp9++uloY//+/Xfs2JG987/85S/R9r59++b9IKmpqWeeeeb69euzX/rnP/8ZvfTII49kb9zd1QQAAPLdf91ZBQAA4Dctu5Pb5aPLfv755+m7sXr16uxpH3/8cQiha9euuZ44eM0110Q3YJwzZ87+xVu5cuXy5ctDCDfffHP209dCCGeddVbr1q0rVqy4aNGifZ25S9FHCCE8/PDDOe8yWqlSpWjh4C4/wvbt24cPH57z3qpHH330ZZddFkKYN2/enj9au3btoqcPZrdW2aJK6bzzzose9ZeZmfk///M/IYSGDRs+//zzOddi9uvX7/rrrw8hjBgxIlqBl9P69etnzpzZs2fPaAHfPklLSxswYEAIoVOnTvfff3/2DTbLlSs3bty4lJSUtLS0GTNm7NM+K1as2LZt25DnI6enpz///PMhhD/84Q+5bmeav6KrfOSRR0YnLVuzZs3OOuussJur/Lvf/e7222/P/mP9+vXPP//8aDxy5MicSxhvuummaBA9YDKEkJaWFl27Tp06DRo0KPsuo0WLFr3rrrt69OgRQhgyZMj69etzHbRo0aITJ04sX7589pYePXpElecv/tUCAAAOBAUhAABQeGzatCka5H32Xghh8eLFZ+5GzgfCjRs3bs6cOffdd1/ePUSNSM7FWPsku5fKW4rMmDFj7dq1TzzxxL7O3KWWLVvOmTPnq6++yluURmdmlx/hmGOOadeuXa6NRx555O7m55SSkhLdg/Sll17KyMjI3j5//vzoBpXZ9xf9/vvvow91yy235O3Pbr755uTk5LS0tH//+9+5Xrrsssvq16+/5xi789FHH0WNY977iFapUuWKK65o1arVunXr9nW3l1xySQjhvffeW7NmTfbGadOmRQ3ZHu4vmi9uuOGGOXPmvPHGG3lf2sNV7tSpU64tUSlYsWLF0047Lef2ww8/PBqkpaVFg48//jha5PfXv/41757vuOOO6KDRbX5z6t69e6VKlXJt3Mu/WgAAwIGgIAQAAAqPMmXKRIPsexXuh6OOOurYY4+NFgtGsrKyFixYcOutt65cufLXxKtatWqDBg1CCHfeeeeVV175zjvv7K4d2fuZu1ShQoVjjz22YcOGOTdu2rRp6tSpgwcP3t27jjnmmLwb934NXLTWcN26dTnb1mj5YNWqVc8555xoS/ZytFNOOSXvTmrXrl27du0QQt4lkieddNJeJslr4cKFIYTk5OSWLVvmfXXEiBHvv/9+//7993W3HTt2TElJ2blzZ/Q8xciECRNCCE2bNs11/vNdrVq1jj322Oh0ZVu5cuXo0aNfeeWV3b0rWreXU3Jy8h6257RgwYIQwiGHHFK7du0NeVSsWDG6tWnOZxZGfuVfLQAAIN8VjTsAAABAvjn00EOjQdRk5HLMMcds27Yt18by5ctv374918bMzMw33njj7bffnjdv3sKFCxcvXpx3zv4ZN25c+/btV61a9c9//vOf//xnyZIlmzdvfsYZZ3Tu3Pmoo47av5m788MPP0yePPk///nPN998s2jRolWrVu15fq6qaV/97ne/q1Wr1rJly55//vnowX7h/xeE3bp1ix7XF/5/QZiUlLS7w9WpU2fx4sV5C8Jd3jZ2L0UFYfXq1fOWXr9G+fLlzzrrrClTpkyaNCl67uCWLVuicu5ALx/M9sUXX0ydOvXLL79csGDBd999t3Hjxj3Pz16cupfbc4r+Z/Xzzz/nrM/zyn4EZrZf+VcLAADIdwpCAACg8KhTp06lSpXWrl37zTff5H01KSkpNTU155ZFixblbf7mzZv3hz/8Yfbs2dlbqlSp0rJly7POOuuxxx5bsWLFr0nYrFmz+fPn//3vf580adLcuXO3bt361ltvvfXWW3/+85/PP//84cOHZz9gb+9n7tKAAQMeeOCB7JtDpqamHnPMMU2bNi1ZsuSwYcN2+ZZfWZ4lJSVddtllf/vb31566aVhw4YlJyd//vnnUaWUfX/REMLPP/8cQkhJSUlJSdnlfqJnLuYtukqWLLnf2aJ7fmYvMM1Hl1xyyZQpU95+++1169ZVrFhx8uTJ27ZtS0lJidZTHlCbN2/u0aPHiy++mL2lTJkyzZo1+93vfjd79uzp06fn+xE3bNgQQihevHjORxXmlfNZg5H87WUBAIBfzw09AACAwiMpKal169YhhE8++eTTTz/9xflffPFFri1btmw588wzZ8+eXbp06f79+7/55pubNm1atWrVm2++edttt5UoUWLvw/z444+73F62bNkBAwbMmTNn0aJFo0eP7t69e+XKlUMIr732WufOnXfu3LkfM3N5+OGH77rrrrS0tJYtW44ZM+bbb7/dunXr3Llzx4wZc/LJJ+/9R9hXUSv2448/vvPOO+H/Lx9s1apVdLvUSPRku7S0tNWrV+9yJ9HDArMfgJcvokJr+fLl+bjPSPv27YsXL56RkfHSSy+FEMaPHx9COOecc/I+ci/fdenS5cUXXyxSpMgll1zy8ssvr1y5cuPGjZ988slDDz1Up06dA3HE6KKUL19+/h7deeedB+LoAABAPlIQAgAAhcof//jHaHDLLbf84uSRI0fm2vLMM89EDxp8/fXXBw0a1KZNm2hBW2Tr1q17nyT7YXu7c/jhh19xxRVjxoxZvnx5nz59QgiffPJJzpWL+zEz8sgjj4QQzj777A8++KB79+7169fPvoHkPn2EfdW4cePowXvPP/98VlbWs88+G/57+WDI8ay7r7/+Ou8e0tLSopuL1q9fPx+D1atXL4SwcePGNWvW5H31lVdeue2223a3sHLPypYt265duxDCpEmTVq9ePWPGjFAg9xdduHDha6+9FkK45557nnnmmfbt21etWjX71QN0laOLsmrVqmgpIQAA8NulIAQAAAqVdu3aNW3aNITw9ttv//Of/9zDzGHDhv373//OtfHbb78NIVSuXLlly5a5Xlq4cGHUHeYUFW/r16/Pu57vmWeeybXloYceSk1NLVWqVK77Z6akpFx//fXROFpXt/cz89q2bdsPP/wQQmjfvn3eB8u9++67u3xXfokWEU6ePPntt99evnx5qVKlLr744pwT6tevH3WuQ4cOzfv20aNHb9myJYRwwgkn5GOqxo0bR6dixIgReV8dOHDggw8+OGfOnP3b+UUXXRRCmDFjxvDhw3fu3Fm+fPnzzz//16TdG9Ff1BBCx44dc72UlZX1/vvvH4iDNm7cuEiRIiGEsWPH5n11xowZ5cqVq1ChwrJlyw7E0QEAgHykIAQAAAqbsWPHRs+r++Mf/3jnnXfmfcrgtm3b/ud//ufGG28sUqRIVHhkq1mzZghh3bp1P/30U6639OjRIxrv2LEj1/xt27ZFy7myvfPOO9ENNnM67rjjduzY8fPPPz/11FO5Xpo2bVo0OPHEE/dpZl4lSpSIHgK3cOHCXC+99NJLUW2ZkZGxhzuU/hpdunQJIaxevbpv374hhIsuuqhUqVI5J5QsWbJfv34hhMmTJz/33HM5X5o3b97dd98dQjj11FPbtGmzT8fNyMjYw6v169ePmstHHnnkP//5T86XJk2aFN1p9owzzti/o3To0CE1NTU9Pf2+++4LIVxyySXFixffp/D7IfqLF3Z1lfv37x9VdDn/ouaLunXrRosjBwwYMG/evJwv/fTTT3379t24ceNxxx1Xq1atX3mgPV9NAADg1ysadwAAAIB81rBhw0mTJl144YVbt24dOHDg8OHDO3Xq1LRp04oVKy5dunTOnDmvv/760qVLixUr9swzzwwaNCjn0wpPO+20IkWK7Ny587zzzvvrX/9ar169tWvXzpw5c/DgwcuWLStduvTmzZufeuqp+vXrn3XWWeXKlWvRokWxYsXS0tK6d+9+1113tWnTZuPGjdOnT7/vvvvq1asXPb8we+etWrWqU6fOkiVL+vXrt3DhwrZt25YpU2bNmjVTp06Nnl137rnnVqlSZZ9m7tLpp5/+wgsvPPbYY4ceeug555yTmpq6YMGC8ePHP//886VKldq0adOOHTtuueWWLl26NGnSJH9P/hFHHNG8efOZM2dGd0DNdX/RSL9+/YYPH75q1apLL7106tSpbdq0KVOmzMyZM4cOHbp58+akpKRBgwbt5eGiJjiEcNddd1144YWHH3747prFe+6554UXXvjpp59OPfXUPn36tGjRIikp6a233ho+fHgI4YwzzujUqdMvHmjs2LFlypQpV65c1INGSpcufc4550yePDktLS0UyP1FQwgNGzasVq3aypUre/fuvXHjxqZNm+7YsWPu3LlDhgz5+OOPy5Qps2nTpnfffXfkyJFnnnlmPj7Q8e67737uuec2bNjQpEmTa6+9tkWLFmXLlp07d+7QoUMXL15csmTJhx56aL93vvdXEwAA+LWyAAAACqNPP/10d2vsQggNGzZ89913s7Kybr755hDC008/nf3Gu+66K+/8atWqvf7665MmTcre8tFHH0Xzhw4dmvdOnkccccSCBQui5+2999572Tv/8MMPy5Qps8tILVq02Lhx437MjBbkNW/ePHvLypUra9SokfeNPXr0WL9+fePGjaM/tmvXLpof1YS33npr3tMYdXV16tTZ+zP/j3/8I9r/kUceubs5ixYtat68+S7P8xtvvJFz5ubNm6OXpk6dustd5bwZac+ePffwiT799NPsJyDm1Lx58x9++CF7Wt7zmZWVFS2IzL64uTJkrxatV6/eXpyh//Pqq69Gb9y2bdueP3KU/P7778/e8sYbbxQrVizXZylevPhDDz20ePHiQw45JNoSvSU9PT3646uvvporw6233pr38+aMkeuKzJ49++ijj857GitVqjRlypRd7mGX1+68884LIXTv3j3nxl1eTQAAIN8lDxw4MO9/1gMAAPzWVa9e/aqrrjrhhBOKFi36888/79ixIykpqXr16qeffvodd9wxZMiQaFlV1apVq1Sp0rp168qVK0dvPO2009q2bbtly5bk5ORixYodffTRPXv2HDNmzHHHHXf00UcfdthhxYsXP/nkkzt06BA9S69Zs2bnnHPOli1bihQpkpKSctRRR11zzTWjR4+uVq1aCKF58+atW7cuW7ZstPNatWpdc801JUuWLP7/HXPMMaeddtqDDz74wAMP5Lw15d7PDCEcccQRrVu3zi5ES5UqddVVV0VzMjMzq1Sp0rZt20GDBvXv379EiRLnnntuRkZG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uDeSk5N///vfv/HGGzNnzuzSpUv23saPH//YY4/92twAAAC/fQpCAAAACtq7777br1+/aHzxxRd///33EyZMOOmkk/L3KCeddNKECRO+//77iy++ONrSr1+/d999N3+PAgAA8JujIAQAAKBArVy58tJLL01PTw8hnHjiiWPGjKlevfqBO1z16tXHjh0btY/p6ekXXXTRsmXLDtzhAAAADn4KQgAAAArO9u3bO3bsuHLlyhBClSpVXn755RIlShzogxYvXvyll16Kasg1a9Z06NBh27ZtB/qgAAAABy0FIQAAAAWnT58+n3zySQghJSXl2WefrVmzZsEct1q1as8//3yxYsVCCF988UWvXr0K5rgAAAAHIQUhAAAABWTIkCFPPvlkNH7kkUdOO+20gjz6ySef/PDDD0fjcePGDR06tCCPDgAAcPBQEAIAAFAQPvzww379+kXjyy+//Lrrriv4DH369OnZs2c07tu37zvvvFPwGQAAAGKnIAQAAOCAW7ly5UUXXZSWlhZCOOGEE0aMGBFXkiFDhpx00kkhhPT09EsuuWT58uVxJQEAAIiLghAAAIADa8eOHR07dlyxYkUIoUqVKi+//HKJEiXiCpOamvrSSy9Vq1YthLB69er27dtv27YtrjAAAACxUBACAABwYPXp0+eTTz4JIRQtWvTZZ5+tVatWvHmqVas2adKkYsWKhRC++OKLXr16xZsHAACggCkIAQAAOICGDh36xBNPRONHHnnktNNOizdP5OSTT37ooYei8bhx4x5//PF48wAAABQkBSEAAAAHykcffXTzzTdH465du/bp0yfePDldf/31V155ZTS+6aab3n333XjzAAAAFBgFIQAAAAfEypUrL7zwwrS0tBDCCSecMGLEiLgT5TZ06NBmzZqFENLT0y+++OLly5fHnQgAAKAgKAgBAADIf1HltmLFihBCxYoVX3jhhZIlS8YdKrfU1NQXXnihcuXKIYTVq1dfeOGFO3bsiDsUAADAAacgBAAAIP9dd91177//fgihaNGikyZNOvzww+NOtGu1atV68cUXixUrFkKYOXPm1VdfHXciAACAA05BCAAAQD4bNmzYqFGjovHDDz/cunXrWOP8glatWv3tb3+LxmPHjh0+fHi8eQAAAA40BSEAAAD56aOPPurbt2807tq16w033BBvnr1x4403XnnlldH4hhtuePfdd+PNAwAAcEApCAEAAMg3q1atuuiii6In+TVu3HjEiBFxJ9pbQ4cObdasWfj/T0/84Ycf4k4EAABwoCgIAQAAyB85q7WKFSu++OKLJUuWjDvU3kpNTZ00adKhhx4aQli9evWFF14Y1ZwAAACFj4IQAACA/HHddde99957IYSiRYs+//zzhx9+eNyJ9k3t2rVffPHFlJSUEMLHH3/cq1evuBMBAAAcEApCAAAA8sGIESNGjRoVjQcNGtSmTZt48+yfU0455cEHH4zGTz311MiRI+PNAwAAcCAoCAEAAPi1VqxY0bdv32jctWvXm266Kd48v0bfvn27du0ajW+66aYVK1bEmwcAACDfKQgPClOnTn3mmWe2bdsWdxAAAID9cd9990W/aBo1alQIVt2NHDmyUaNGIYRt27bdd999cccBAADIZwrC+L300kvnnnvuZZddtm7durizAAAA7LMlS5Y88cQT0XjQoEElSpSIN8+vV6JEib/97W/ReOTIkYsXL443DwAAQP5SEMbshx9+6NmzZ9wpAAAA9t+dd965Y8eOEMIpp5xy1llnxR0nf7Rr165169YhhPT09HvuuSfuOAAAAPlJQRinzMzMrl27rl+/Pu4gAAAA+2nBggXjxo2LxoWsSLv77rujwVNPPTV//vx4wwAAAOQjBWGc7r///rfffjspKSnuIAAAAPtpwIABGRkZIYR27dqddtppccfJT9kLInfu3JldFgIAABQCCsLYzJw5c+DAgSkpKTfeeGPcWQAAAPbH3Llzn3322Wh85513xhvmQLjvvvuif9P5zDPPzJ49O+44AAAA+UNBGI9NmzZ16dIlIyPjnnvuadKkSdxxAAAA9sdf/vKXzMzMEELHjh2bN28ed5z816RJk/bt24cQMjMzC2UDCgAAJCYFYTx69+69aNGiNm3a9O/fP+4sAAAA++Pzzz9/+eWXQwhFihQZOHBg3HEOlHvuuadIkSIhhMmTJ8+cOTPuOAAAAPlAQRiDsWPHTpw4sUKFCuPGjYt+ZwIAAPzm/PnPf87KygohXHLJJccff3zccQ6UY4899uKLL47GhbgHBQAAEkrRuAMknIULF/bp0yeEMGrUqBo1auzHHpo2bfqLc1atWrUfewaA/fDjjz+GEIoVKxZ3EAAK1CeffPL666+HEJKTk6+99tqC/A1S8F89119//aRJkzIyMqZNmzZ58uSWLVsW2KEBOBj41QNA4aMgLFDp6eldunTZvHnzVVdd1blz5/3byeeff/6Lc9LS0vZv5wCwr9LT04OvHoDEc//990eDCy64oHbt2gX5RVDwXz01a9bs3Lnzc889F0K4//77J02aVGCHBuBg4FcPAIWPgrBA3XHHHZ9++mmDBg3+/ve/7/dOPvvssz28Gq0vrFq16n7vHwD2SfRT2VcPQEKZPn36xx9/HEJISUm56667CvhbIJavnnvvvffll1/esWPHp59+Om/evLZt2xbk0QGIl189ABQ+CsKCM2PGjEGDBqWkpEyYMKFkyZL7vZ8mTZr84hx3PACgwKSkpARfPQAJ5u67744GV199dYMGDQr46LF89dSrV69nz56PP/54COGvf/3r2WefnZSUVJABAIiRXz0AFD4KwoLz8MMPZ2VlHXfccW+88cYbb7yRvX3WrFnR4PHHHy9TpkwIoV+/ftF/dgAAABxsXn755Wj5YGpq6m233RZ3nIJzxx13jBkzZuvWrZ999tmrr77avn37uBMBAADsp6SsrKy4MySKs88++/XXX9+bmZs3by5VqtT+HSX6R6wuKwAFZunSpSGE2rVrxx0EgIKQlZV14oknRv/MsV+/fg899FDBZ4jxq6dfv36DBw8OIRx33HGzZs0qUqRIwWcAoOD51QNAASuArscKwoLTqFGj7du3592+evXq+fPnhxBatGhRvHjxEEJycnJBhwMAANgLzz77bNQOlipV6pZbbok7TkG7/fbbR40atXnz5jlz5jz//POXXHJJ3IkAAAD2hxWE8Rs/fvzll18eQli2bFnNmjV/5d6sIASggPm3tACJY+fOnccdd9zXX38dQrjjjjuyn0RYwOL96rnjjjvuvffeEMKRRx45b968okX9u1uAws+vHgAKWAF0PW6HAgAAwF4ZO3Zs1A6WK1fu5ptvjjtOPP70pz9VqFAhhPDtt9+OHz8+7jgAAAD7Q0EIAADAL0tPT7/nnnuicf/+/cuXLx9vnriULVu2b9++0XjgwIFpaWnx5gEAANgPCkIAAAB+2ahRoxYtWhRCqFSp0g033BB3nDjddNNNlStXDiEsWbLkySefjDsOAADAPlMQxq9Ro0YDBgwYMGBAmTJl4s4CAACwC9u3b7///vuj8e233166dOl488SrVKlSt9xySzS+++67t23b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pEmTzz//vHr16rETAeSuHFl6AMgcldD15FfcS/OfbLXVVj179oydAgAAqCJmzJiRtIMtW7Z0UfMqo1u3bq1atfrnP/+5fPnymTNnlp1QCAAAsOVsMQoAAJDdyragLCgoyMvzLa+KSKVSffv2TWa7jAIAAOXLV0cAAIAstmTJkpkzZ4YQUqlUv379YsehPPXv3z/ZWWjGjBlffPFF7DgAAEDVoSAEAADIYhMnTiwuLg4hdO7ceeedd44dh/LUqlWrTp06hRA2bNgwefLk2HEAAICqQ0EIAACQxe69995kKCgoiJuEilD2sY4dOzZuEgAAoCpREAIAAGSrN9544623STpO+QAAIABJREFU3goh1KlTp3fv3rHjUP769OlTt27dEMK77747Z86c2HEAAIAqQkEIAACQrYqKipLh97//fb169eKGoSLUrVv32GOPTeayjxsAAGALKQgBAACy0vr168uuS2d/0Sqs7MOdOHHiunXr4oYBAACqBgUhAABAVpoxY8bSpUtDCC1btuzatWvsOFSUgw8+eKeddgohLF++fObMmbHjAAAAVYGCEAAAICuNHz8+GQoLC/PyfLmrslKpVN++fZO57EMHAADYEr5DAgAAZJ8lS5Y88cQTIYRUKnXyySfHjkPFKiwsTKVSIYSZM2d+8cUXseMAAABZT0EIAACQfSZMmFBcXBxC6NKly8477xw7DhWrVatWnTt3DiFs2LBh0qRJseMAAABZT0EIAACQfe69995kKCwsjBqESlL2QY8bNy5qEAAAoCpQEAIAAGSZ119//e233w4h1KlTp1evXrHjUBmOO+64unXrhhDefffdN954I3YcAAAguykIAQAAskxRUVEy9O7du169enHDUDm+XwaXHQAAAACbR0EIAACQTdavXz958uRkLigoiBuGylT2cd93333r1q2LGwYAAMhqCkIAAIBs8uijjy5btiyEsOOOO3bp0iV2HCrPQQcdtNNOO4UQli9f/thjj8WOAwAAZDEFIQAAQDYZP358MhQUFOTl+U6XQ1Kp1Mknn5zMZYcBAADAZvBlEgAAIGt8+eWXTz75ZPj/uyJyR2FhYSqVCiE8/vjjX3zxRew4AABAtlIQAgAAZI0JEyYUFxeHELp27brzzjvHjkNlK9tXdsOGDffdd1/sOAAAQLZSEAIAAGSNoqKiZCgsLIwahGj69++fDHYZBQAANpuCEAAAIDu8/vrr7777bgihbt26vXr1ih2HOHr16lW3bt0Qwrvvvvv666/HjgMAAGQlBSEAAEB2KDt9sKwiIgfVrVv32GOPTeZ77703bhgAACBLKQgBAACywPr16ydPnpzMBQUFccMQV9kBcN99961bty5uGAAAIBspCAEAALLAY489tmzZshBCy5Ytu3btGjsOMR188MGtWrUKISxfvvzxxx+PHQcAAMg+CkIAAIAsULa/aL9+/fLyfJXLaalU6qSTTkrmsgMDAABg4/lWCQAAkOm+f6JYWTNELisoKEilUiGExx57bOnSpbHjAAAAWUZBCAAAkOkmTpy4fv36EELHjh3btm0bOw7xtW7d+sADDwwhFBcXl12cEgAAYCMpCAEAADJd2TaSBQUFcZOQOcoOBruMAgAAm0pBCAAAkNHmzp07Z86cEELNmjV79+4dOw6Zok+fPrVr1w4hvPHGG2+//XbsOAAAQDZREAIAAGS0cePGJUPPnj0bNmwYNwyZo0GDBkcddVQyT5gwIW4YAAAguygIAQAAMteGDRsmTZqUzPYX5d+UHRITJkzYsGFD3DAAAEAWURACAABkrieffHLx4sUhhGbNmnXv3j12HDLLb37zm+bNm4cQvvzyy7/97W+x4wAAAFlDQQgAAJC5ioqKkqFv377VqlWLG4ZMk5eXd8IJJyRz2aECAADwsxSEAAAAGWrlypUzZsxI5r59+8YNQ2YqLCxMhkceeeTrr7+OmgUAAMgaCkIAAIAMNWnSpDVr1oQQ9ttvv/bt28eOQybabbfd9t133xDC2rVr//rXv8aOAwAAZAcFIQAAQIYq2zSyoKAgbhIyWdnhYZdRAABgIykIAQAAMtG8efNeffXVEEL16tX79OkTOw6Z68QTT6xRo0YI4eWXX/7ggw9ixwEAALKAghAAACATjR8/Pp1OhxB69OjRtGnT2HHIXI0bNz7iiCOSecKECXHDAAAAWUFBCAAAkHFKS0snTpyYzPYX5Wd9f5fRkpKSuGEAAIDMpyAEAADIOLNmzfrss89CCFtvvfVhhx0WOw6Z7ne/+90222wTQli0aNEzzzwTOw4AAJDpFIQAAAAZp6ioKBlOPPHErbbaKm4YMl9+fv7xxx+fzGUHDwAAwH+iIAQAAMgsq1atevjhh5PZ/qJspLJD5cEHH/z222/jhgEAADKcghAAACCzTJ06ddWqVSGEPfbYY6+99oodh+yw995777nnniGE1atX33///bHjAAAAGU1BCAAAkFnKtog85ZRT4iYhu/Tr1y8Z7DIKAAD8NAUhAABABvn000+ff/75EEJ+fv4JJ5wQOw7ZpG/fvskVK//xj3/Mnz8/dhwAACBzKQgBAAAyyPjx49PpdAjhsMMO23bbbWPHIZtsvfXWv/nNb0II6XR64sSJseMAAACZS0EIAACQKb7f6xQUFMQNQzYqO2zKmmYAAIAfUhACAABkirKdIRs3btyjR4/Yccg+Rx99dJMmTcL39qoFAAD4IQUhAABApigqKkqG448/vkaNGnHDkI2qV69+3HHHJXPZ4QQAAPBvFIQAAAAZYfXq1ffff38y21+UzVZ28EydOnXVqlVxwwAAAJlJQQgAAJARHnzwwW+//TaE0KZNmw4dOsSOQ7baf//9d9111xDCqlWrHn744dhxAACATKQg3FiLFy9+8MEHXeMdAACoIGUbQp5yyilxk5Dt+vXrlwx2GQUAAH6UgnBjTZky5bLLLlu0aFFyc8SIEcOGDVu/fn3cVAAAQNWwaNGiZ555JoSQl5d34oknxo5Ddjv55JOrVasWQpg1a9Znn30WOw4AAJBxFIQb6xe/+MVbb73VvHnz5OZ555131FFHDR06NG4qAACgaigqKiopKQkhdO/efYcddogdh+y2/fbbd+vWLYRQWlo6ceLE2HEAAICMoyDcWL/97W8POeSQoUOHvvzyy8XFxSGE3Xff/fDDD//www9jRwMAALLehAkTkqGgoCBuEqqGsgNp/PjxLpYBAAD8m/zYAbLGuHHj9tprr48//vjee+9dtGjRnnvuueOOOy5ZsmTGjBmxowEAANnt5Zdf/uCDD0II9evXP+aYY2LHoSo49thjGzZsuGLFinnz5r366qv7779/7EQAAEAGcQbhxtp2221vv/328ePHz5s376OPPho8ePBWW2116aWX1qxZM3Y0AAAguxUVFSXDcccdV7t27bhhqBpq1arVq1evZC47wAAAABKp3NxpZPLkyc2bN+/cufPG/5F//OMfX3/99dFHH112TzqdfuKJJ3bbbbeWLVtuaoAlS5a8/PLL8+bNW7x4cevWrffYY48DDjhgq6222tTX+aFUKpVk2/KXAoCNsWDBghBCixYtYgcByFZr165t1qzZ119/HUJ4/vnnO3XqFDtRprP0bKTnn3++S5cuIYQGDRosXry4Vq1asRMBZCtLDwCVrBK6nhw9g3DhwoWTJk3apD/SpUuXJk2aXH755cnNdDq97bbbFhUV1atXb5Nep6Sk5JZbbmnduvXRRx/9X//1XyNGjDjjjDO6dOmy5557PvPMM5v0UgAAQBXwyCOPJO1gq1atOnbsGDsOVUenTp123nnnEMLKlStdHQMAAPi+HC0Ia9euff/99y9atGiT/lSnTp2GDh2azKlU6tFHH73xxhsbN268SS8yZMiQ884779tvv23UqNHvfve7AQMGHHjggalU6v333+/Wrdu0adM26dUAAIBsV7b9Y2FhYfIrUSgXqVTq5JNPTma7jAIAAN+XowXhhg0bli1b1rVr19dff32zX6RDhw477LDDJv2ROXPm3HHHHSGEQw455MMPP3zsscfGjBnz0ksvvfTSS8lLDRo0aFNrSwAAIHt9+eWXf/vb30IIqVSqb9++seNQ1RQWFubl5YUQnnzyycWLF8eOAwAAZIocLQhXr17dtWvXESNGXHLJJRdeeOHq1asr532vu+66kpKSWrVqjR8//he/+EXZ/QcccMDEiRNDCF9//fVf//rXygkDAABEN2HChA0bNoQQunbtutNOO8WOQ1XTsmXLzp07hxA2bNiwqRfaAAAAqrAcLQjbtm17+eWXH3XUUX/729/at29/0EEHVc71GJ577rkQwpFHHtm8efN/e6hLly7JhY635KRGAAAgu0yYMCEZCgoK4iahqio7tMaNGxc3CQAAkDlytCA89thju3fvnswnn3zyE0888dBDD/3+97+v0O0916xZs3Tp0hBC+/btf/QJyS6jdn0BAIAc8cYbb7z99tshhDp16vTq1St2HKqm3r17161bN4Qwd+7cOXPmxI4DAABkhBwtCP9N48aNx4wZc8455/Tq1eu2224rKSmpiHfJy8t79NFHH3300cLCwh8+um7duvfffz+E0Lp164p4dwAAINMUFRUlQ69everVqxc3DFVV3bp1e/bsmcxlhxwAAJDjFIT/p3Pnzs8///yqVasOOuigitjns0aNGkceeeSRRx6ZnCn4b2666aavvvoqhOCHwwAAkAuKi4snT56czP369YsbhqqtbJfRSZMmFRcXxw0DAABkglQ6nY6dIePMnz//rLPO2mWXXYYOHVoJP+NNp9MjR44877zz0un0wQcf/Pe///2nn59KpX72Nf/1r3+VUzoA+Bmff/55CKFZs2axgwBkmccff3zw4MEhhGbNmr344ot5eX6+ubEsPZuqtLS0Y8eOyf9ud9555+GHHx47EUCWsfQAUMlatmwZQqjQCs9X0B+x8847z5w588ADDzz44IMfeOCBCn2vN9988+CDDz733HPT6XT79u0r+u0AAIAMUXb64HHHHacdpELl5eX17t07madMmRI3DAAAkAly9AzCzz77rEGDBvXr1//pp61YseKSSy5ZtGjR7bffnrS15ejLL7+89NJLx48fX1paGkLo37//Lbfc0qBBgy182eT8wtz8WAGIYsGCBSGEFi1axA4CkE0WLFiw0047lZSU5OXlffLJJ+X+daNqs/Rshs8++6xVq1bJITd//vwdd9wxdiKAbGLpAaCSVULXk6M/Ux0/fvz06dN/9mn169e/8sorf/vb3+6zzz433HDDhg0byivAmDFj2rVrN3bs2NLS0r333vvpp58eO3bslreDAABAVhg9enRJSUkI4bDDDtMOUgl22GGH3/zmNyGE0tLSsWPHxo4DAABElqNnEN54440LFiy4/fbbS0tLly1b9vnnny9evPjz70lufvHFF8mX9kSyBeguu+yyJW9dWlpaWFg4YcKEEEKLFi2GDRt2wgknbMxlBTeSMwgBqGR+SwuwqTZs2LDjjjsuWrQohDB9+vRjjjkmdqIsY+nZPNOnTz/22GNDCNttt92CBQvy8/NjJwLIGpYeACpZJXQ9Ofp9oEaNGqNGjXrggQeWLl26kecFNmzYsKSk5J133tnCgvDMM89M2sHTTz/9hhtuqFu37pa8GgAAkHVmzpyZtIPbbrvtEUccETsOuaJHjx7NmjVLfhH7+OOP9+jRI3YiAAAgmhwtCJNfSi5evPj7d9avX79Zs2bNmjXbbrvtmv3/tttuu1q1am35+06aNOnOO+8MIYwcOfLss8/e8hcEAACyzujRo5PhlFNO2WqrreKGIXfk5+cXFBQMGzYshDB69GgFIQAA5LIcLQjXrl2766679u/ff4cddiirA+vUqVPR73vrrbeGEI455hjtIAAA5KaFCxc+/vjjIYRUKtW/f//YccgtAwcOHD58eGlp6cyZMxcsWGCvPAAAyFm5WxCeffbZgwcPrsw3fe+991577bUQQqdOnd59993/9LSGDRs2b968EnMBAACVZ+zYscmVzg855JDWrVvHjkNuadWq1cEHHzxr1qySkpKioqI//vGPsRMBAABx5GhBeMABBzRo0KCS3/T9999PhgsuuOCCCy74T0/r06fPlClTKisUAABQeUpLS8eOHZvMAwcOjBuG3DRw4MBZs2aFEEaPHn3ppZdWq1YtdiIAACCCvNgB4ujWrds+++xTyW86f/78Sn5HAAAgozz55JP/+te/QghNmzY9+uijY8chF/Xs2XPrrbcOIXz22WdPPfVU7DgAAEAcOXoGYRS9evXq0KHDzz4t+aoGAABUPaNHj06G/v3716hRI24YclP16tX79et30003hRBGjx592GGHxU4EAABEkEqn07EzUJ5SqVQIwccKQKVZsGBBCKFFixaxgwBkui+++KJFixbFxcUhhPfee2/XXXeNnShbWXq20Lx589q1a5dOp/Pz8//1r381a9YsdiKATGfpAaCSVULXk6NbjAIAAFSycePGJe1g165dtYNE1KZNm86dO4cQNmzYcO+998aOAwAARKAgBAAAqHDpdHrs2LHJPHDgwLhhoOwgHD16dGlpadwwAABA5VMQAgAAVLhZs2Z9/PHHIYSGDRsee+yxseOQ637/+983btw4hPDJJ58888wzseMAAACVTUEIAABQ4UaPHp0MBQUFtWrVihsGatas2bdv32QuOzgBAIDcoSAEAACoWMuXL3/44YeT+dRTT40bBhKDBw9OhunTpy9dujRuGAAAoJIpCAEAACrWuHHj1q1bF0L49a9/vccee8SOAyGEsOuuux544IEhhPXr1997772x4wAAAJVKQQgAAFCxxo4dmwwDBw6MmwS+r+yAHD16dDqdjhsGAACoTApCAACACvSPf/zj/fffDyE0aNCgd+/esePA/zn++OMbNmwYQvjwww9feOGF2HEAAIDKoyAEAACoQKNHj06Gk046qU6dOnHDwPfVqlXrhBNOSOayAxUAAMgFCkIAAICKsmLFigcffDCZTz311Lhh4IcGDx6cDNOmTfvqq6/ihgEAACqNghAAAKCiFBUVrV69OoSw33777b333rHjwL/75S9/ue+++4YQ1q5dO3HixNhxAACASqIgBAAAqCjjxo1LhoEDB8ZNAv9J2cFpl1EAAMgdCkIAAIAK8d///d9vvfVWCKFu3bp9+vSJHQd+3IknnlivXr0Qwrvvvvvyyy/HjgMAAFQGBSEAAECFKDsf64QTTqhfv37cMPCffL/AdhIhAADkCAUhAABA+Vu5cuXUqVOT2f6iZLiyQ3Ty5MkrVqyIGwYAAKgECkIAAIDyN2nSpO+++y6E8Mtf/nK//faLHQd+SocOHfbee+8Qwpo1a6ZMmRI7DgAAUOEUhAAAAOVvzJgxyTBo0KC4SWBjDBgwIBnuvPPOuEkAAIBKoCAEAAAoZ7Nnz37jjTdCCLVq1TrhhBNix4Gf17dv39q1a4cQ3nrrrddffz12HAAAoGIpCAEAAMrZ6NGjk6FPnz6NGjWKGwY2RoMGDXr37p3MZQcwAABQVSkIAQAAytOqVavKruI2cODAuGFg45Udrvfdd9+3334bNwwAAFChFIQAAADlacqUKd98800IoV27dgceeGDsOLCxOnbsuPvuu4cQVq1aNXXq1NhxAACACqQgBAAAKE9l2zMOGjQolUrFDQObZMCAAclgl1EAAKjaFIQAAADl5u2333711VdDCDVq1Ojbt2/sOLBp+vXrV7NmzRDCK6+88uabb8aOAwAAVBQFIQAAQLm5++67k6FXr15NmzaNGwY2VZMmTXr27JnM99xzT9wwAABAxVEQAgAAlI81a9ZMmjQpmQcOHBg3DGyeskN3woQJq1evjhsGAACoIApCAACA8jF16tSvv/46hLDzzjt37do1dhzYHAcddFCbNm1CCCtXrrz//vtjxwEAACqEghAAAKB8jB49OhkGDRqUSqXihoHNk0qlBgwYkMxlhzQAAFDFKAgBAADKwQcffPDSSy+FEKpXr15QUBA7Dmy+U045pUaNGiGEF154Ye7cubHjAAAA5U9BCAAAUA7uuuuudDodQjj66KO33nrr2HFg8zVt2rRHjx7JfM8998QNAwAAVAQFIQAAwJZav379fffdl8wDBw6MGwa2XNlhfO+9965duzZuGAAAoNwpCAEAALbUtGnTli5dGkJo1arVIYccEjsObKnu3bu3atUqhLB8+fIHHnggdhwAAKCcKQgBAAC21K233poMp556al6e71lkvby8vFNPPTWZyw5vAACgyvDFFQAAYIs899xzs2fPDiHUrl37tNNOix0HysfgwYPr1KkTQpg9e/Y//vGP2HEAAIDypCAEAADYIjfffHMyFBQUNG3aNG4YKC+NGzc++eSTk7nsIAcAAKoGBSEAAMDmmzdv3mOPPRZCSKVSZ599duw4UJ7OO++8ZMvcRx999P33348dBwAAKDcKQgAAgM13yy23lJaWhhCOOuqodu3axY4D5WmXXXY58sgjQwjpdPr222+PHQcAACg3CkIAAIDN9NVXX02YMCGZzzvvvLhhoCKUHdhFRUXLli2LGwYAACgvCkIAAIDN9Oc///m7774LIeyzzz5dunSJHQfKX9euXTt06BBCWL169Z133hk7DgAAUD4UhAAAAJtj3bp1f/nLX5L5ggsuiBsGKs6QIUOS4fbbb1+7dm3cMAAAQLlQEAIAAGyOiRMnfvHFFyGE5s2b9+rVK3YcqCi9e/du0aJFCGHJkiWTJk2KHQcAACgHCkIAAIDNcdtttyXDkCFDttpqq7hhoOLk5+efddZZyTxixIh0Oh03DwAAsOUUhAAAAJvsiSeeePvtt0MI9erVO/XUU2PHgYp12mmnNWjQIIQwd+7cv/3tb7HjAAAAW0pBCAAAsMluvvnmZBg4cGBSnEAVVr9+/VNOOSWZyw5+AAAgeykIAQAANs0777wza9asEEK1atX+8Ic/xI4DleGcc87Jz88PITz11FNvvvlm7DgAAMAWURACAABsmptuuim5DFvv3r1btWoVOw5UhpYtW/bq1SuZb7311rhhAACALaQgBAAA2ASff/75lClTknnIkCFxw0BluuCCC5Jh0qRJCxcujBsGAADYEgpCAACATTBq1Kj169eHEDp37rz//vvHjgOVZ9999+3UqVMIobi4+I477ogdBwAA2HwKQgAAgI21evXqu+++O5nPP//8uGGg8pUd9nfccceqVavihgEAADabghAAAGBjjR07dvny5SGEXXbZpUePHrHjQGU76qij2rVrF0L4+uuvi4qKYscBAAA2k4IQAABgo5SWlo4cOTKZzz333Lw836fIOXl5eWeddVYy33zzzSUlJXHzAAAAm8cXWgAAgI3y0EMPffzxxyGExo0b9+vXL3YciKOwsLBJkyYhhH/+85+PPPJI7DgAAMDmUBACAABslBEjRiTD6aefXqdOnbhhIJbatWsPGjQomcv+TwEAAGQXBSEAAMDPe+2111588cUQQo0aNc4888zYcSCms88+u2bNmiGEF1544eWXX44dBwAA2GQKQgAAgJ934403JsOJJ5643XbbxQ0DcW2zzTbHH398Mt9y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Z58dOxHwU4YMGdK1a9cQwoYNGwoKCtauXRs7EQAAVHEKQgAAoKq58sor33nnnRBCnTp1xo8fX61atdiJgJ+Sl5c3bty4evXqhRDef//9q6++OnYiAACo4hSEAABAlfLyyy/fdNNNyXzjjTe2bt06bh5gY7Rq1er6669P5htuuOGFF16ImwcAAKo2BSEAAFB1rF69uqCgoKSkJIRwyCGHDB48OHYiYGOdfvrphx12WAihtLS0sLBw1apVsRMBAECVpSAEAACqjksuuWTevHkhhAYNGowdOzaVSsVOBGysVCo1ZsyYRo0ahRDmz59/+eWXx04EAABVloIQAACoIl544YVRo0Yl86233tqiRYu4eYBNtf322998883JfPvttz/77LNR4wAAQJWlIAQAAKqC7777rrCwsLS0NIRw5JFHFhYWxk4EbI7+/fv37NkzhFBaWtq/f/9vv/02diIAAKiCFIQAAEBVcO65586fPz+E0KRJk9GjR8eOA2y+O++8c+uttw4hfPrppxdccEHsOAAAUAUpCAEAgKz31FNPjRkzJpn//Oc/b7vttnHzAFti6623HjlyZDKPHj368ccfj5sHAACqHgUhAACQ3VauXDlgwIB0Oh1COOaYY/r06RM7EbCljj/++OOOOy6EkE6nTz311K+//jp2IgAAqFIUhAAAQHY766yzPvvssxDCL37xi7vuuit2HKB8lJ0N/Pnnnw8ZMiR2HAAAqFIUhAAAQBZ75JFHJkyYkMxl1y0DqoCmTZvefffdyXzvvfc+8MADcfMAAEBVoiAEAACy1bJly0477bRkLigoOPbYY+PmAcpXjx49+vXrl8ynn376kiVL4uYBAIAqQ0EIAABkqzPOOOPLL78MITRr1uyWW26JHQcof7fddtsOO+wQQli6dOmgQYNixwEAgCpCQQgAAGSlyZMnT5s2LYSQSqXGjBnTqFGj2ImA8tegQYOxY8emUqkQwkMPPTRlypTYiQAAoCpQEAIAANln8eLFZ511VjIPGjTo8MMPj5sHqDjdu3cv20z49NNPX7hwYdw8AABQBSgIAQCA7HPmmWcuX748hLDjjjvecMMNseMAFevmm29u3bp1CGHFihWnn3567DgAAJD1FIQAAECWGTt27PTp00MIeXl548aNq1evXuxEQMWqU6fO+PHj8/LyQggzZswYN25c7EQAAJDdFIQAAEA2WbRo0QUXXJDMZ5999kEHHRQ1DlBJOnbsWLax8JAhQxYsWBA3DwAAZDUFIQAAkDXS6fSAAQO+/vrrEELbtm2vu+662ImAynP99dfvtttuIYRvvvmmf//+6XQ6diIAAMhWCkIAACBr/OUvf3nyySdDCHl5eWPGjKlVq1bsREDlqVmz5j333FOtWrUQwt///vc77rgjdiIAAMhWCkIAACA7vPXWWxdddFEyX3jhhZ06dYqbB6h8BxxwwH/9138l84UXXvjWW2/FzQMAAFlKQQgAAGSBTz/99PDDD//uu+9CCO3bt7/qqqtiJwLiuOqqq9q3bx9C+O677w4//PBPP/00diIAAMg+CkIAACDTLVu27LDDDlu8eHEIoWHDhpMnT65Ro0bsUEAcNWrUmDx5csOGDUMIixcvPuyww5YtWxY7FAAAZBkFIQAAkNHWrFlz9NFHf/jhhyGE6tWr33///bvvvnvsUEBMu++++8MPP1yzZs0Qwocffvi73/1u1apVsUMBAEA2URACAACZq6Sk5MQTT3zppZdCCHl5effdd98hhxwSOxQQX5cuXf76179Wq1YthPDaa6/16dNnw4YNsUMBAEDWUBACAAAZKp1On3baaQ899FBy85Zbbvn9738fNxKQOY466qg///nPyTxz5sz+/fun0+m4kQAAIFsoCAEAgAx12WWXjR07Npn/+Mc/nn322XHzAJlm0KBBl19+eTJPnDixbAYAAH6aghAAAMhEd95557Bhw5K5b9++V199ddw8QGa65pprBgwYkMzXXXfdyJEj4+YBAICsoCAEAAAyzsMPP/yHP/whmY844ohx48alUqm4kYDMlEql7rrrrp49eyY3zzvvvGnTpsWNBAAAmU9BCAAAZJbnnnvu+OOPLykpCSF06NDhr3/9a35+fuxQQOaqVq3afffd17FjxxBCaWlp3759n3766dihAAAgoykI4/jv//7vQYMGderU6Ve/+tUxxxxzzz33rFu3LnYoAACI79133+3Zs+fatWtDCK1bt3700Ufr1KkTOxSQ6WrVqvXwww+3a9cuhLB+/fpevXq9+eabsUMBAEDmSqXT6dgZcs75558/YsSIf7uzffv2jz76aMuWLbfwxZOdl3ysAFSaBQsWhBBatGgROwhQFSxcuPDXv/71Z599FkJo1qzZiy++uOOOO8YORcax9PCf+DsEqCCWHgAqWSV0Pc4grGw33HBD0g62adPmwgsvHDFixOGHHx5CeOedd3r06JH8UBoAAHLQ8uXLDz300ORf9uvXr//YY4/5l31gkzRv3nzmzJmNGjUKIXz++eeHHnrokiVLYocCAIBMpCCsVEuWLLn66qtDCHvsscfs2bOHDx9+7rnnzpw588orrwwhvPPOO3fffXfsjAAAEMGaNWuOPvroDz74IIRQvXr1Bx54YK+99oodCsg+e+yxx/Tp02vWrBlC+Pjjj3v06PHdd9/FDgUAABlHQVip7rnnntWrV6dSqfvvv79evXpl91911VUHHHBACOH222+Plw4AAOIoKSk56aSTXnzxxRBCXl7exIkTu3fvHjsUkK26du06ZcqUatWqhRBeffXVPn36bNiwIXYoAADILArCSjVjxowQQseOHdu2bftvDx177LEhhI8//vijjz6KkAwAACJJp9ODBg2aPn16cnPEiBG9e/eOGwnIdkcfffSoUaOS+bHHHuvfv3+FXr4FAACyjoKw8pSWlr7xxhshhE6dOv3w0SOPPDIZXn311UqNBQAAUf3xj3+85557kvnSSy8955xz4uYBqobBgwdfcsklyTxx4sQrrrgibh4AAMgoCsLKs2DBgrVr14YQ2rRp88NH27Ztm5+fH0JwBiEAALnjrrvuuvbaa5O5b9++Q4cOjZsHqEquvfbaU045JZmHDh162223xc0DAACZIz92gBzyxRdfJMN22233w0fz8vK22WabRYsWLV68+Kdf5/XXX//Z91q/fv1mJASAzVBcXBwsPcBmmTFjxplnnpnMhx122F133ZX8lQI/zdLDxhs1atSyZcseeeSREMK555679dZbJxf4ANgklh4Aqh4FYeX57rvvkqF27do/+oRatWp9/2n/yb777vuz71VWRgJARVu6dGkIYauttoodBMgyTz/99BlnnFFSUhJC2HvvvW+55ZZly5bFDkV2sPSwSYYPH/7ZZ5/NmTOntLS0sLBw9erV3bt3jx0KyDKWHgCqHgVh5Sn7kVGylegPJfcn25D+hH322ecnHk3OL6xevfrmRASATZd8Sbb0ABsvnU7fcsstN998c2lpaQhhp512mjhxYsOGDWPnImtYetgk1atXnzhxYo8ePT755JN169YNHDjw/PPPP/fcc1OpVOxoQNaw9ABQ9SgIK0/ZiYPr1q370Sck1WByHuFPmD179k88mnzD2XbbbTcnIgBsuuQXMJYeYCN98803BQUFDz30UHJzxx13fPrpp1u1ahU3FdnF0sOm2nbbbZ9++ulu3bp9+umnpaWlN95440cffVRUVFS/fv3Y0YDsYOkBoOrJix0gh9SrVy8Zvvnmmx99QnJ/2dMAAKCK+eijj37961+XtYNdunR55ZVXtINAJWjVqtXs2bMPPfTQ5OZDDz203377vffee3FTAQBALArCylP2Dx8LFy784aNr1qz56quvvv80AACoSmbOnNmhQ4e5c+cmN0877bSnn3566623jpsKyB1NmjR5/PHHL7roomTrnXnz5h1wwAHTp0+PnQsAACJQEFaeRo0abbPNNiGEt99++4ePvvPOO8mw6667VmosAACoYOl0evjw4T169FixYkUIoWbNmuPHj7/rrruSy/kAVJpq1apdf/31kyZNqlOnTgjh22+/7dWr18UXX5xcEhUAAHKHgrBSdevWLYTw97///YcPzZo1K4Sw1VZbdenSpbJjAQBAhVm1alXv3r3L/v19hx12eP755wsKCmLnAnLX8ccf/+KLLyb79yS/YDjqqKNWrlwZOxcAAFQeBWGl6t27dwjh448/fuKJJ75//7p168aMGRNCOOyww1wjHQCAKuOjjz464IADHnjggeRmly5dZs+eve+++8ZNBbDnnnu+9tprZZckfOyxxzp06OCShAAA5A4FYaU65phj2rdvH0IYNGjQRx99lNy5fv36wYMHf/LJJ6lU6vLLL48aEAAAyo2LDgKZrOyShMlNlyQEACCnKAgrVSqVuu++++rWrbtgwYK2bdvut99+v/vd75o0aTJ+/PgQwpVXXtmhQ4fYGQEAYEv98KKD48aNc9FBINMklyScPHly7dq1g0sSAgCQS1LpdDp2hpzz9ttv9+/f/4033ii7p1GjRtdee+3pp5++5S+eSqVCCD5WACrNggULQggtWrSIHQTIFKtWrSosLCzbVnSHHXZ44IEH9ttvv7ipqEosPZS7t956q2fPnv/85z+Tm0ccccR9993XoEGDuKmAzGHpAaCSVULXoyCM5u233547d+6aNWtatGjRuXPnGjVqlMvLKggBqGS+KgPf99FHH/Xs2bNsW9EuXbpMmzbNtqKUL0sPFWH58uUnnHDCU089ldxs06bN9OnTd9ttt7ipgAxh6QGgkikI2WQKQgAqma/KQJmZM2eedNJJybaiIYTTTjtt1KhRthWl3Fl6qCAlJSWXXXbZ8OHDk5v16tUrKirq2bNn3FRAJrD0AFDJKqHrcQ1CAABgS7noIFAFuCQhAAC5Q0EIAABskVdeeaVLly5l/4besmXLl156qbCwMHYugM1x/PHHv/DCCy1btgz/++uHrl27vvLKK7FzAQBAeVIQAgAAm2n+/Pl9+vQ58MADX3jhheSebt26zZ49e++9944bDGBL7L333rNnz+7WrVty84UXXjjwwAP79Okzf/78uMEAAKC8KAgBAIBNtmzZsiFDhuy2225Tp05NLopQvXr1iy+++Mknn2zatGnsdABbqmnTpk8++eTFF19cvXr1EEI6nZ46depuu+02ZMiQZcuWxU4HAABbSkEIAABsgvXr148cOXKXXXYZOXLk+vXrkzuPPPLIuXPnDhs2LD8/P248gPKSn58/bNiwjz766OSTT06lUuF//wJs1arVVVddtWbNmtgBAQBg8ykIAQCAjZJOp6dNm9auXbshQ4asWLEiufOAAw54/vnnH3300datW8eNB1ARWrRoce+9977yyitdu3ZN7lm1atXVV1/dpk2bu+++u6SkJG48AADYPApCAADg582aNWufffY57rjj/vnPfyb3tGnTZurUqS+99FKnTp3iZgOoaPvtt9+zzz771FNPtW/fPrln4cKFgwYN+uUvfzljxoy42QAAYDMoCAEAgJ/y/vvvH3fccd27d58zZ05yT9OmTa+//vp33nmnd+/eybZ7ALmge/fub7zxxl133bXtttsm97z33ns9evQ49NBD33zzzbjZAABgkygIAQCAH7do0aJBgwa1b99+2rRpyT21a9e+6KKL5s+ff9FFF1WvXj1uPIDKl5+ff9ppp3388cfXX399vXr1kjuffvrp5BzrTz/9NGo6AADYWApCAADg361atWr48OHt2rUru8JWXl5e796933vvveuvv75+/fqxAwLEVKdOnYsuuuiDDz447bTT8vPzQwilpaXTpk3bbbfdLr744pUrV8YOCAAAP0NBCAAA/J+FCxcOHz78/7F3p4FVVfcesFcSIAkJMoOK4IA4UIQiAs6zV8W5FWktSp1ah161dUAqKkWL4HBbq+JAq7agXkSrVipWsFYFAZWqoKCAVEEQwkwIGSDJ+2G/97x5Q0hO4HAynOf5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27dPeIUANBqbNm369NNP165d26FDh969e2dnZ9d1RQA0EsuXL1+wYMGWLVu6dOnSq1evtLS0nbiJ1Q0A8UvI1AMAtTV//vy5c+eefvrprVu33olvT8iqR0DYSPzxj38cNmzY/fffvxMB4SOPPHL33Xfn5eVFXzZp0uSCCy549NFHLaQBqGTLli233HLL008/XVhYGPXssccev/jFL0aMGNG0adN47lBWVrbPPvuUlJTsaMD48ePPPPPMxJQLQMPx9ddfX3311W+++WZ5eXnU06VLl3vvvffiiy+u1X2sbgCI065PPVY3AOy0X/3qV//4xz8+/PDDI444orbfm6hVj4CwMSguLn7mmWd27ntvvPHGhx56KGq3a9du3bp127ZtmzRp0ocffvjBBx9YRQMQU1xcfPLJJ8+ePTv6sn379qtXr960adOoUaPmzZv3yiuvpKfXfHT50qVLv/vuu+qfkphyAWg4vvrqq/79+69duzaE0KRJkxYtWqxfv37p0qU/+clPVqxYcfPNN8d5H6sbAOKUkKnH6gaAnbN48eK33npr5743gaseAWGDt2bNmuuvv/7LL7/cie99/fXXoz9JRx999OOPP37YYYetWbNm7Nixd91119dff/3zn//8r3/9a6LrBaChuvPOO6N08Oqrrx4+fHinTp0WL1586623vvzyy6+99tojjzxy/fXX13iTRYsWRY3bbrstIyNj+wE7d1Y2AA3axRdfvHbt2vT09LFjx/74xz/Ozc396KOPBg8evGjRoqFDh5566qnf//73a7yJ1Q0A8UvI1GN1A8BOWLBgwaBBg7Zt27YT35vYVU9abBM9Dcvnn3/+/PPPf/rpp9OmTSsqKoo677///vh/uzaEcOSRR86ePbtLly4fffRRxWD5uuuuGzt2bFpa2ty5c3v06JHg0gFogNauXdulS5ctW7YMGDDgtddei20WLCwsPO644+bMmbP33nt//fXXNR40+thjj1177bUdO3ZcuXLl7q8agAbgjTfeiI5fGz169NChQ2P9ixYt6tu378aNGy+88MJJkybVeB+rGwDilKipx+oGgPhNmTLlzTff/Oijj2bMmBEL5mp7xGhiVz01HwVG/fTee+/99re/nTx5ciwdrK1vvvkm2ghy0003Vdp2OmzYsBBCeXl5PD8MAZAKJk+evGXLlhDCvffeW/Eo0ezs7Btv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16ceqxsAdtrbb78dTRYffvhhlQOSs+rxDsKUtvfee7/yyivnn3/+smXLfvnLX8b609LSbr/99iuvvLIOawOgvjn99NMffvjhG2+88f3333///fdj/bm5uc8++2zPnj1rvENaWtr48ePPOuus99577+233479MBS55JJLHnroobS0tMSXDkD9dvfddy9btmz8+PETJkyYMGFCrL9r166TJ09u3rx5PDexugEgfrs+9VjdAJB8iV31ZIwYMSLBBVJHTjzxxBNPPLFz585VXm3fvn004KCDDqrY37lz50svvTQrK6uwsDAtLW2fffY544wzxo4dO2TIkKRUDUBD0rdv33PPPbesrKy4uLhJkyYHHnjgxRdf/PTTTx955JHbD65y6snMzLzsssv69etXWlravHnzjIyM3r17n3vuuffcc8/NN98cHaQOQKpJS0u74IIL+vTpU1RUVFZW1rx588MOO+y///u///SnP+21117bj+/WrVs0xXTo0KFiv9UNAHFKyNRjdQPATmvVqlU0s7Ro0aLKAUlY9aSV/9/plAAAAAAAAECjl17XBQAAAAAAAADJIyAEAAAAAACAFCIgBAAAAAAAgBQiIAQAAAAAAIAUIiAEAAAAAACAFCIgBAAAAAAAgBQiIAQAAAAAAIAUIiAEAAAAAACAFCIgBAAAAAAAgBQiIAQAAAAAAIAUIiAEAAAAAACAFCIgBAAAAAAAgBQiIAQAAAAAAIAUIiAEAAAAAACAFCIgBAAAAAAAgBQiIAQAAAAAAIAUIiAEAAAAAACAFCIgBAAAAAAAgBQiIAQAAAAAAIAUIiAEAAAAAACAFCIgBAAAAAAAgBTSpK4LAAAAgHhNmTJl4sSJZWVlp5566qWXXlpUVPT73/9+4cKFHTt2vPLKK7t27VrXBQIAADQAAkIAAAAahlGjRm3atOmxxx7btGnTEUcc8d13333wwQeXX3759ddff/bZZ//1r3/98ssv67pGAACABsARowAAADQAzz///PLly0ePHp2dnd2xY8cTTzxx2LBh7dq1O+uss95999233367c+fOdV0jAABAw5BWXl5e1zUAAABAdUpLS7t37z5z5sw2bdpEPaeddtq0adMWLlzYrVu3srKyWbNmHXbYYS1atKjbOgEAABoEASEAAAD13fr161977bVLL700+rK0tLRt27adOnX6/PPP67YwAACAhsgRowAAANR3rVu3jqWDIYR///vfGzduPO200+qwJAAAgIZLQAgAAEADM3Xq1BDCqaeeWteFAAAANEgCQgAAABqYqVOnZmRknHDCCbGedevW1WE9AAAADYuAEAAAgIYkLy/vvffe69WrV4sWLaKesrKy4447bvPmzXVbGAAAQEMhIAQAAKC++8Mf/tC9e/dvvvkmhPDCCy+UlpZ27949dvXll18+5ZRTcnNz665AAACAhqRJXRcAAAAANbjrrruKioqKi4sLCwufe+65Xr16FRUVRZeWLVv2yCOPvPTSS3VbIQAAQAOSVl5eXtc1AAAAQHVuueWWhQsXnn766a+//voNN9zQuXPnCy64YODAgU2aNJkzZ864ceM6dOhQ1zUCAAA0GAJCAAAAGoDCwsIFCxYcdNBB0VGi5eXlX3zxRZMmTbp161bXpQEAADQwAkIAAAAAAABIIel1XQAAAAAAAACQPAJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIQJCAAAAAAAASCECQgAAAAAAAEghAkIAAAAAAABIIU3quoA6M27cuDlz5lx++eX9+vWrcsB33333yiuvLFmyJCMj46CDDjr//PPbtGmzo7uVlZW99dZbs2bNWrt2bYcOHU488cSjjz66mqdv2bLl1Vdf/fzzz7ds2dKlS5ezzz77wAMP3NWPBAAAAAAAADVJKy8vr+sa6sC//vWvU045paysbPz48YMHD650tby8fOTIkXfffXdpaWmsMysr64EHHrjuuuu2v9v8+fN/9KMfzZs3r2LnMccc89xzz3Xp0mX78a+88soVV1yxbt26ip1XXXXVH/7wh6ysrJ3/VAAAAAAAAFCTVDxidN26dYMHDy4rK9vRgOHDh48YMaK0tDQ7O/uMM844/vjjmzZtWlRU9Itf/OKxxx6rNPjbb789+eSTo3TwwAMPHDhwYKdOnUIIM2bMOO200zZs2FBp/D/+8Y8LL7xw3bp16enp/fr1O/fcc/fYY48Qwrhx44YMGZLgjwoAAAAAAAD/f6kYEF5xxRXLly/f0dV58+bde++9IYQ+ffrk5eVNmTLlnXfeWbp06X777RdC+NWvfrVy5cqK42+88cZVq1aFEJ599tlFixa98MIL3377bXSHhQsX/uY3v6k4uLi4+IorrigtLW3VqtVnn302e/bsV199dc2aNWeffXYI4YUXXnj11VcT/4EBAAAAAADg/6RcQPjYY4+98sor0aa9Kt1///3l5eUtW7b829/+lpubG3Xuueeer732WlpaWlFR0SOPPBIbvHjx4r/+9a8hhFtuueXiiy+O9d92220DBw4MITzxxBObNm2K9T/77LNRNvnss88eeuihUWfTpk2ff/75/fffP3p6Aj8sAAAAAAAAVFaeSj777LPs7Oz09PQ///nP0ccfP358xQHbtm1r3bp1COHqq6/e/tv79esXQujRo0es58EHHwwhpKWlrVixotLg119/PXrEiy++GOs855xzQgiHHHLI9je/9dZbQwjp6el5eXm78hnr5E8RAAAAAAAACbQraVGNUmgHYVFR0Y9//OPCwsJbbrnl5JNPrnLMvHnz1q9fH0I45ZRTtr967rnnhhA+++yzaEwI4d133w0hdO/efa+99qo0+OSTT442IEZjIu+99171Ny8rK5s+fXqtPxsAAAAAAADEp0ldF5A8N99887x58/r06XP33XdHbw3c3pdffhk1evTosf3VaAdhCGHhwoX9+/ePja9ycGZmZs+ePd9///2FCxdGPatWrdqwYcOOxvft2zctLa28vDw2flfYSgj12pFHhtmzQwhh1qzQv39dVwO7aunSpSGELl261HUhAKQKUw8ASWbqASDJ0tLSdvcjUmUH4eTJkx999NGcnJznnnuuadOmOxq2bNmyqLHPPvtsfzXWGf1MEBtf5eBYf6XBOxrfrFmz9u3bVxwPAAAAAAAACZcSOwi/++67yy67LITw0EMPHXTQQdWM3Lx5c9TIycnZ/mp0ZGgIIT8/P4RQXl6+ZcuWiv1Vjo8GV7x5NePz8vJi43ckntxYygj12Z4lJc1CCCGsXLmyxN9WGr4VK1bUdQkApBZTDwBJZuoBoPFp/DsIy8vLL7nkkjVr1vzwhz+84oorqh9cWFgYQmjWrFmVIVxmZmbUiHLBoqKi6CTPWH+V46PBsZvHPx4AAAAAAAASrvHvILzvvvveeuutTp06PfnkkzUOzsrKCiFs3bq1yqvFxcVRo1mzZqFCzldSUlLN+Ghw7Obxj9+R6t8vGEWbjkSHeu3//prvueeewd9WGgtTDwBJZuoBIMlMPQA0Jo18B+FHH310xx13pKenjx8/vk2bNjWOj04WjZ0dWkmsMzojND09PTs7O4RQUFBQ5d0qHUAaO7Y0zvEAAAAAAACQcI18B+G0adO2bt3asmXLMWPGjBkzJtYf2wt4//33T5gwIYQwcuTIfv36derUKepfsWLFgQceWOluy5cvjxp777131OjUqdPixYt3dAp5NL7i4NjNtx+8bdu2vLy8iuMBAAAAAAAg4Rp5QBjZuHHjP/7xjyovzZ07d+7cuSGEX/ziFyGEgw8+OOr/8ssvtw8IFy5cGDUOPfTQqHHwwQcvXrz4yy+/rPLmixYtqji4U6dOubm5mzdvrnL84sWLy8rKKo4HAAAAAACAhGvkAeGxxx571113bd+/adOm3/3udyGECy64oGfPniGEgw46KITQs2fPFi1a5Ofnv/fee2eddVal73rvvfdCCF27du3YsWPUc8wxx/z973//9NNP8/PzW7RoUXHwokWLVq5cGY2JdR599NFvvvlmdJ8qbx6N2clPCwAAAAAAADVp/AHhscceu33/t99+GwWEP/jBDwYPHhzrb9as2RlnnDFp0qTnnntu5MiRzZo1i13asGHDq6++GkK44IILYp3nnXfer3/9661bt06YMOGaa66p+IhnnnkmuuGAAQMqjn/zzTdnz569YMGCSjsF//znP4cQjjjiiM6dO+/SZwYAAAAAAIAdS6/rAuqdm2++OYSwbNmyO+64I9ZZVlZ23XXXFRQUZGZmXn/99bH+7t27n3nmmSGEESNGfPPNN7H+jz/+OAogr7jiijZt2sT6hwwZ0r59+xDC1VdfXVRUFOt//PHHZ8yYEUK45ZZbdt9HAwAAAAAAgEa+g3An9OvX79prrx07dux99903Y8aMs846a/PmzdE5oiGE3/72t5V2+D300EMzZ87My8vr06fPeeed16tXr/fff3/y5MmFhYX77bffyJEjKw7Oycl55JFHBg0a9O677x522GHnn39++/btp02bNm3atBDCOeecM3DgwGR+WAAAAAAAAFKNgLAKv//970MIY8eOnTFjRrSxL4TQpEmTkSNH3nTTTZUGd+vWbcqUKT/60Y+++eabp556Ktb//e9//4UXXmjXrl2l8RdddFF+fv7111+/ePHiBx54INY/aNCgP/7xj2lpabvlIyXU9OnT33777eXLl2dnZ/fq1eucc85p27ZtXRcFAAAAAABAXNLKy8vruoY6UFxcPHPmzBDCoYce2rFjxyrHzJ8//8UXX1yyZElGRsYhhxxy0UUX7bvvvju6YWFh4SuvvPL++++vW7euY8eOJ5100plnntmkyQ7z11WrVk2cOPHzzz8vLCzs0qXLeeed17dv313/XCGEKGLcTf9ZFyxYMGTIkA8//LBiZ05Ozu233z506ND0dCfWQnyOPDLMnh1CCLNmhf7967oa2FVLly4NIXTp0qWuCwEgVZh6AEgyUw8ASbZbs57/9xGpGRA2YrvvD81nn312/PHHr1+/vsqr11xzzdixYxP+UGicBIQ0LpbKACSZqQeAJDP1AJBkSQgIbfkiLmVlZZdffvmO0sEQwmOPPTZlypRklgQAAAAAAMBOEBASl5kzZ1Y6WXR7Dz/8cHKKAQAAAAAAYKcJCInLO++8U+OYf/3rX06sBQAAAAAAqOcEhMRl1apVNY4pLCzctGlTEooBAAAAAABgpwkIiUtOTk6NY9LT05s3b56EYgAAAAAAANhpAkLicuihh9Y45sADD2zatGkSigEAAAAAAGCnCQiJy1lnnZWbm1v9mEGDBiWnGAAAAAAAAHaagJC4tGnTZsSIEdUM6NKly80335yscgAAAAAAANhJAkLiddNNN916661paWnbX2ratOnf//73PfbYI/lVAQAAAAAAUCsCQmphzJgx77777nHHHRfrycjICCFs3bp11qxZdVcXAAAAAAAA8RIQUjvHHnvsz372s6g9aNCge+65J2rffffdxcXFdVcXAAAAAAAAcREQUmurVq2KGnvuued///d/d+zYMYSwdOnSP/3pT3VaFwAAAAAAADUTEFJreXl5UaNDhw45OTlDhw6NvrznnnsKCwvrri4AAAAAAABqJiCk1mI7CKO9g9dcc80+++wTQvjuu++eeOKJuqwMAAAAAACAmggIqbWKOwhDCFlZWbfddlvUM2rUqPz8/DqrDAAAAAAAgJoICKm1SjsIQwhXXXXV/vvvH0JYvXr12LFj66wyAAAAAAAAaiIgpNYq7SAMITRr1mzYsGFR+/7779+0aVPdVAYAAAAAAEBNBITUTnl5+erVq6N2LCAMIVx++eUHHXRQCGHt2rUPPfRQ3RQHAAAAAABATQSE1M6GDRuKi4tDCC1atGjevHmsPyMj4/bbb4/aDz744Lp16+qmPgAAAAAAAKolIKR2tj9fNOYnP/nJoYceGkLYuHHj//zP/yS7MgAAAAAAAOIgIKR2Vq1aFTU6duxY6VJGRsadd94ZtR966KFYlAgAAAAAAED9ISCkdqrZQRhCGDRoUK9evUIImzdvfuCBB5JaGQAAAAAAAHEQEFI71ewgDCGkpaXdddddUfuRRx5Zvnx58ioDAAAAAAAgDgJCaie2g7DKgDCEcP755/ft2zeEUFhYeN999yWvMgAAAAAAAOIgIKR2YjsIqzxiNPz/NxE+8cQTy5YtS1JlAAAAAAAAxEFASO1U/w7CyFlnnXXUUUeFEIqLi0eNGpWkygAAAAAAAIiDgJDaqf4dhDEjR46MGn/605+WLFmy28sCAAAAAAAgPgJCaieeHYQhhFNPPfXEE08MIWzduvWee+5JQmEAAAAAAADEQ0BI7cS5gzCEcPfdd0eNv/zlL19++eXuLQsAAAAAAID4CAiphcLCwvz8/BBC06ZNW7VqVf3gY4899rTTTgshlJaWcx0BrQAAIABJREFUxsJCAAAAAAAA6paAkFqoeL5oWlpajeNHjRoVDXv++efnzZu3e4sDAAAAAAAgDgJCaiH+80UjRxxxxIABA0IIZWVlNhECAAAAAADUBwJCaqHiDsI4v2XkyJHRJsIXX3zxk08+2V2VAQAAAAAAEB8BIbVQ2x2EIYTDDz/8ggsuCCGUl5ffddddu6syAAAAAAAA4iMgpBZ2IiAMIYwcOTI9PT2E8Le//W327Nm7pTIAAAAAAADiIyCkFnbiiNEQwve+972LLrooao8YMSLhVQEAAAAAABA/ASG1sHMBYQhh5MiRTZo0CSG88cYb7777buIrAwAAAAAAID4CQmph544YDSF069btJz/5SdQePnx4gssCAAAAAAAgbgJCamGndxCGEEaMGNGsWbMQwnvvvff2228nuDIAAAAAAADiIyCkFnZ6B2EIYb/99hsyZEjUtokQAAAAAACgrggIiVdpaem6detCCGlpae3atduJOwwfPjwzMzOE8P7777/xxhsJrg8AAAAAAIA4CAiJ15o1a0pLS0MIbdq0adq06U7coUuXLldeeWXUHj58eHl5eSLrAwAAAAAAIA4CQuK1K+eLxtx+++3NmzcPIcyZM+e1115LTGUAAAAAAADETUBIvPLy8qJGhw4ddvome+2119VXXx21hw8fXlZWloDKAAAAAAAAiJuAkHglZAdhCGHYsGEtWrQIIcybN++ll15KQGUAAAAAAADETUBIvGI7CHcxIGzXrt11110XtYcPHx691xAAAAAAAIDkEBASr9gOwl05YjQydOjQVq1ahRAWLlz4v//7v7taGQAAAAAAAHETEBKvhLyDMNKqVasbbrghao8YMWLbtm27eEMAAAAAAADiJCAkXol6B2Hkl7/8ZZs2bUIIixcv/stf/rLrNwQAAAAAACAeAkLilcAdhCGEli1b3nTTTVF75MiRJSUlu35PAAAAAAAAaiQgJF6J3UEYQrjhhhuirPGbb7556qmnEnJPAAAAAAAAqicgJF6rV6+OGgnZQRhCyMnJufXWW6P23XffXVhYmJDbAgAAAAAAUA0BIXHZuHFjUVFRCCEnJycnJydRt73uuus6deoUQlixYsWTTz6ZqNsCAAAAAACwIwJC4pLw80UjWVlZQ4cOjdqjR4/esmVLAm8OAAAAAADA9gSExCUvLy9qJOp80Zif//zn++23Xwhh5cqVjz76aGJvDgAAAAAAQCUCQuKym3YQhhCaNWt22223Re0xY8bk5+cn9v4AAAAAAABUJCAkLrEdhAkPCEMIl19++QEHHBBCWLt27UMPPZTw+wMAAAAAABAjICQusR2ECT9iNITQtGnTO+64I2o/8MAD69evT/gjAAAAAAAAiAgIicvuewdh5JJLLjnkkENCCBs3bvzd7363Ox4BAAAAAABAEBASp933DsJIRkZGbBPh7373u9WrV++OpwAAAAAAACAgJC67ewdhCOFHP/pRz549QwibN29+8MEHd9NTAAAAAAAAUpyAkLjs7h2EIYT09PQ777wzaj/yyCOxJwIAAAAAAJBAAkLikoQdhCGEH/zgB3379g0hFBQUjB49evc9CAAAAAAAIGUJCKlZUVHRxo0bQwhNmjRp3br17ntQWlpa7E2Ejz/++Lfffrv7ngUAAAAAAJCaBITUrOL2wfT03ftn5pxzzjnyyCNDCEVFRffee+9ufRYAAAAAAEAKEhBSs+ScLxrzm9/8Jmo8/vjjRx55ZO/evU888cRhw4YtWrQoCU8HAAAAAABo3ASE1GzVqlVRo2PHjkl43GmnndalS5cQQllZ2ezZsz/55JN33nln9OjRhx566F133VVeXp6EGgAAAAAAABorASE1S/IOwttuu23p0qXb95eWlo4cOTL2kkIAAAAAAAB2goCQmiVzB+HcuXMffPDBagaMGTNm/vz5u7sMAAAAAACAxkpASM2SuYPwmWeeKS0trWbAtm3bxo8fv7vLAAAAAAAAaKwEhNQsmQHhhx9+mJAxAAAAAAAAVElASM2SGRBu2LChxjFr167d3WUAAAAAAAA0VgJCahYLCJPwDsLWrVvXOKZt27a7uwwAAAAAAIDGSkBIzVauXBk1khAQ9u3bt8Yx/fr1291lAAAAAAAANFYCQmpQVlYWHemZlpbWvn373f24IUOGpKdX98eySZMmgwcP3t1lAAAAAAAANFYCQmqwZs2abdu2hRBat27drFmz3f24nj173nTTTdUMGDp0aPfu3Xd3GQAAAAAAAI2VgJAaxF5A2KFDh+Q8cfTo0cOGDatyH+Evf/nLu+++OzllAAAAAAAANEoCQmqwatWqqJGEFxBG0tPTR40aNX/+/FtuueW4447r0aNHy5YtYzWkpaUlpwwAAAAAAIBGSUBIDZK/gzBy8MEH33fffe++++68efMefvjhqPPJJ58sLy9PZhkAAAAAAACNjICQGiR/B+H2LrzwwtatW4cQlixZ8q9//auuygAAAAAAAGgEUi4gLC8v37x5c/zjCwoKioqK4hxcVla2YcOG+Le4lZSUbNq0Kf5i6kRd7SCsKDs7+yc/+UnUHjduXF2VAQAAAAAA0AikSkC4fv3666+/vlevXjk5OS1atOjYseMJJ5zw4osv7mj8qlWrrrvuuo4dO+bm5mZnZ3fp0mXo0KHVhHmTJk065phjMjMzW7dunZWV9V//9V9vvvnmjgZv3bp19OjRBx98cFZWVsuWLVu1anXJJZcsWrRoVz/k7lEfdhCGEH72s59FjZdeemn16tV1WAkAAAAAAECDlhIB4XvvvXfooYc+/PDDc+fOLSwsDCHk5eW9++67AwcO/K//+q9t27ZVGj9//vxevXqNHTs2tnlu2bJl9913X+/evVesWLH9/a+//vqLLrro/fffj25VUlIyderUM8444957791+cEFBwfHHHz9s2LCFCxdGew03btw4YcKE3r17v/XWW4n94AlRH3YQhhAOO+ywfv36hRBKSkqeffbZOqwEAAAAAACgQWv8AWFxcfHll1++atWq3NzcBx988OOPP/7222+nTp160kknhRCmTp36m9/8ptL48847b9WqVRkZGXfcccesWbP++c9//uIXvwghLFmy5MILL6x0/6eeeurhhx8OIfTv33/ChAmff/75uHHjDj744PLy8ttvv/2NN96oNP6aa66ZNWtWCOHiiy9+/fXX//3vf48ZMyY3N7egoGDgwIErV67cff9T7Jx6soMwhHDVVVdFjSeeeCL+c1wBAAAAAACoKK3RBy1/+MMfbrjhhhDC1KlTTz311Fh/WVnZMcccM2vWrMzMzM2bNzdp0iTqf/TRR6M48NFHH7322mtj44cOHXrfffeFEF599dVzzz036iwuLu7atevy5csPOuigWbNmtW7dOur/+uuv+/fvn5eXd/jhh8+ZMyd2k88++6xnz57l5eUDBw6cOHFiWlpa1D958uTzzjuvrKzsl7/85f/8z//syueN7pnA/6z77bffN998E0JYvHhx165dE3XbnbB58+ZOnTpFB73OmDHj6KOPrsNiYJcceWSYPTuEEGbNCv3713U1sKuWLl0aQujSpUtdFwJAqjD1AJBkph4AkizhWc/2Gv8OwpkzZ4YQ+vTpUzEdDCGkp6dH+V9xcfGXX34Z63/qqadCCEceeWTFdDCEMGrUqLZt24YQnnnmmVjnm2++uXz58hDCH/7wh1g6GELYb7/9fv3rX4cQ/v3vf8+dOzfW//TTT5eXl2dnZz/55JOxdDCEcPbZZ0eh4/jx48vKyhLwsRMndsRone8gzM3NHTRoUNQeN25c3RYDAAAAAADQQDX+gHDBggUhhB49emx/ad99940a0S8BhRDy8vI+/vjjEMLAgQMrDc7IyBgwYEAIYdq0abHXFkYniLZq1eq0006rNP6cc86pOKZi+9RTT23VqlWV49esWfPRRx/V7hPuTps2bYre2pidnZ2bm1vX5fx/p4xOnDhxw4YNdVsMAAAAAABAQ9T4A8J777335ZdfvvXWW7e/9J///CdqxJLCuXPnRhs2+1d16N8ZZ5wRQsjPz//666+jnk8//TSEcMQRR6SnV/5f8oADDujWrVt0z6gntlWxmptXHF8f1J/tg5G+ffv27t07hFBYWPj888/XdTkAAAAAAAANT+MPCM8888zzzz+/e/fulfoXL1581113hRD69+8fu7po0aKosf/++29/q9gb+GLDokaVg2PjY4OXLFlSWlq6o/F77713dnZ2xfH1wapVq6JGPQkIQwhXXHFF1Hj88cfrthIAAAAAAICGqEldF5BURUVFw4YN27Rp0+eff/7BBx+Ul5d/73vfmzRpUmzAunXrokaHDh22//ZY59q1ayuOr3JwrL/S4GrGt2/ffunSpbHxOzJmzJjqB4QQNm3aVOOYeMT2SrZp0yZR99xF55133i233FJYWDh37tx33333+9//fl1XBLWWU1qaEUIIoaCgoLR+/M2CXbF58+aQuKkHAGpk6gEgyUw9ADQ+KRcQ/v73v499uffee48fP75z586xnoKCghBCRkZGkyZV/C8T7fCLDSspKYleRpiVlVXl46Lx0eCKjTjH78htt91W/YAQQqLez/fNN99EjZYtW9afd/4NGDDgpZdeCiGMGzfut7/9bV2XA7WW9X8BYX5+fkm9+ZsFOy1aJNefaQKARs/UA0CSmXoAaHxSKyDMysq6/fbbi4qKlixZ8s4776xYsaJPnz533nnniBEjogHRCwjT0tKq/PboagghygVjX1Y/Phq8E+N3ZOjQodVcjfYX7rHHHtXfJE75+flRo1OnTom656678soro4DwlVdeGT16dE5OTl1XBLWTkRHlgyEnJyer3vzNgp0WLZXrzzQBQKNn6gEgyUw9ADQ+KRcQ3nPPPVF748aNV1111aRJk37zm9/07t37vPPOCyFEUdO2bdtKS0tj/4IfU1xcHDWiYZmZmRkZGaWlpUVFRVU+Lhofi69ijTjH78jo0aOruRoFhK1atar+JnGKnZzQpUuXRN1z151xxhndu3efP3/+5s2b33zzzcsuu6yuK4Ja+r//e2nRokWoN3+zYKdFk0X9mSYAaPRMPQAkmakHgMYnva4LqDMtW7Z86qmnotcBPvnkk1FnbJqPvS+wojVr1lQaFjWqHBwbX2lwNeOjtw/Wqx818vLyosaO3ptYV6644oqoMW7cuLqtBAAAAAAAoGFp5AHhmjVrpk+fPn369Njmv4pyc3P7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X91ll10ef/zx/fbb79RTTx0xYsSECRO23nrrjb/5M888c+65506fPr3yxebNm//xj38sLi6uUkwmk8mrr776mmuuKS8vT10cMmTIsGHDhgwZsu7NP/nkk1NOOWXKlCmVL+6zzz4PPvhgx44d193/xBNPDBgwYOHChakr559/fnFx8V/+8pf69etv/JuqQY4Y3YBzzjknKggffvjhYcOGtWzZMu5EAAAAAAAAP10tOmI0Pz//iiuuKCsrW9+GXr16Rd3ML3/5y1NOOWXj7/zYY48dddRR06dPr1ev3gEHHDBw4MBDDz10iy22WLhw4eDBg88999wq+y+//PKhQ4eWl5c3aNDg8MMP33///evVq7dq1arf/OY3w4cPr7J55syZPXv2jNrBTp069e7du127diGECRMmHHrooYsXL66y//nnnz/ppJMWLlyYk5PTvXv3Y489tkmTJiGEkpKSfv36bfybqlkmCDdgt9126969ewhh9erVo0ePjjsOAAAAAADAJqlFBeHKlSu33Xbbyy67bMKECRveuc022+Tm5m7kbZcvX37++eeHEDp27Dhp0qTXXnutpKTkhRde+Pe//33ggQeGEO64445nnnkmtX/KlCnXXXddCOHnP/95aWnps88++/rrr8+YMSMaWLzgggvmzJlT+f6//e1vo/G7Bx54YOrUqWPHjp05c2Z0h88///wPf/hD5c2rV68eMGBAeXl506ZNP/roo0mTJo0bN27+/PlHH310CGHs2LHjxo3byPdVs0wQbtjZZ58dLYYPH15RURFvGAAAAAAAgE1RiwrC4uLiK6644vrrr583b94VV1zxzTff1Mht77333q+//jqEcPPNN+++++6p6+3bt3/kkUeigbkRI0akrt9www3JZHLLLbccP358o0aNooutW7d+8sknE4nEqlWrbrvtttTmadOmPf744yGEiy+++LTTTktd/93vfte7d+8QwsiRI5csWZK6/sADD8yaNSta7LjjjtHFevXqjRkzZptttom+e4286x/LBOGG9enTJ3oC5RdffPHKK6/EHQcAAAAAAOCnq0UFYaqaOv7443//+9+PGTPmtttuW7t27Sbe9vXXX49u3qtXryovtWjR4vDDDw8hvPfee9GV8vLyp556KoRw6qmntm3btvLmLl26dOvWLYRQechv/PjxyWQykUhEQ4qVnXXWWSGElStXvvjii6mLTzzxRAihc+fORx55ZOXNjRo1igrFt956a968eZvwdn+KlStXLl26NISQn5/ftGnTNH/3OqFBgwZnnHFGtF73mFkAAAAAAIA6pBYVhJXVr1//ggsuOOaYY6666qrnn39+U2715ZdfhhC6dOlS7asdOnQIIcybN6+8vDyEMGXKlEWLFoUQDj744HU3H3vssSGEjz76KNoTQvjHP/4RQthpp53atGlTZXPPnj2jAcRoT+SNN97Y8M0rKirefPPNH/UGN13qfNFWrVolEok0f/e6YsiQIdFvzvjx46MxUAAAAAAAgLqoFhWE0RBbZVtttdUf//jH3NzcSy+9dPr06T/tttdff/2TTz554403Vvvq5MmTQ6WHGn722WfR9WoLxe7du0eLzz//PFpE+6vdXFBQsOuuu1bePHfu3MWLF69vf7du3aL+KbU/bTyAcGN06tTpoIMOCiGUlZWNGjUq7jgAAAAAAAA/US0qCG+99daFCxdG62QyOX/+/ClTprz44ouzZ8/eYostDjjggCuuuGLlypU/9rYHHnjg0Ucfvdtuu6370ptvvvnss8+GEE488cToSvS0whBC+/bt192fujhjxozK+6vdnLpeZfP69ufn57ds2bLy/rTxAMKNNHjw4GgxcuTITT/8FgAAAAAAIBZ5cQf4Tv369ffbb78tttjim2++mTt3bqqASSQSzZs3b9Omzdtvv/3qq69WeXrfT/bKK6/07t07mUy2bNnyoosuii4uW7YsWmyxxRbr/pLoyNDwf8OOyWRyxYoVla9Xuz81GZm6+Qb2l5aWrjtJWcV222234Q0hhNmzZ//gnpTU3GTjxo1/1C/MNnvuuWdRUdHcuXNnz5593333RQ+whJ+gxZo1+SGEEObPn7/GDx11XzSJnpdXi/6lAoDM5qMHgDTz0QNA5qlFn2rJZLKwsLBz585HHHFEmzZt2rRp07p16+g/8/Pza/AbzZ0794orrrjrrruSyWSTJk2ee+65wsLC6KVoQjE/P7/aR/EVFBREi6gXXLVqVTKZrHy92v3R5tTNN37/+mzMaatlZWU/uCclNUHYvHnzH/ULs9DJJ5/817/+NYQwevToQw45JO441HllZWV+6MgA0XN8/cMMQNr46AEgzXz0AJB5alFBmJ+f/+KLL66vPKsRa9asufHGG6+77rpoSm+vvfa65557dthhh9SG+vXrhxDWd3rk6tWrU1FDpZ5vzZo1G9ifajejm2/8/vX54osvNvBqNF/Ytm3bDd+kslWrVkWLbbfd9kf9wix0/vnn33HHHeXl5f/4xz9WrFjRqVOnuBNRJ+XWqxctWrZsmfRDR90X/Y9knyAApI2PHgDSzEcPAJmnFhWE//M//7NZ7z9hwoQBAwZEx2m2bt166NChxcXFOTnfewpjdLJodHZow4YNq9whNdsXnRGak5PToEGDlStXLl++vNrvWOUA0tSxpRu5f3223XbbDW8IP/LEg3nz5kWLNm3aOCphw7bZZpsjjzzyySefTCaTd9999/XXXx93Iuqm/5tRzs3NDX7oqPuizw6fIACkjY8eANLMRw8AmSfnh7dkhBEjRhxwwAGfffZZw4YNr7766mnTpg0aNKhKOxhCaNeuXbSo9lF8s2bNihapvy4U7V/fc/ui/VU2r29/WVlZdNRn+v8uUuqI0VatWqX5W9dFZ599drS4++67U8OXAAAAAAAAdUVWFIQPPvjgOeecU15efsABB0yZMuWKK65IDfNVkTpuNBo0rOLzzz+PFjvuuGPl/dVuDiFMnTq18uZ27dpF04HV7p82bVpFRUXl/WkTPWY5hFBUVJTmb10XHX744dHJogsWLHj00UfjjgMAAAAAAPDjZH5B+OWXX5555pnJZPLkk09+8cUXN3w+56677tq4ceMQwhtvvLHuq9HF7bbbLlWk7bPPPiGEDz74IHqoYWVTp06dM2dOak9k77333vDNU3vSyQThj5JIJAYMGBCtR4wYEW8YAAAAAACAHyvzC8Lbb7997dq17dq1GzVqVL169Ta8OT8///DDDw8hPPjgg2vWrKn80uLFi8eNGxdCOOGEE1IXjzvuuBDC2rVr77///iq3uvfee6MbHnnkkVX2T5o06dNPP62y/29/+1sI4Re/+EWHDh1+1BvcROXl5QsWLAghJBKJFi1apPNb110DBw4sKCgIIUyYMGHy5MlxxwEAAAAAAPgRMr8gjIq3fffd98svv/xoPSqf+XnRRReFEL7++usrrrgidbGiomLIkCHLly8vKCg477zzUtd32mmnI444IoQwdOjQr776KnV98uTJN998cwhhwIABzZs3T13v169fy5YtQwiDBw+u/Pi6ESNGTJgwIYRw8cUX1/xvwQbNmzcvOtq0sLDwBwtUIi1atOjVq1e0vuuuu+INAwAAAAAA8KMkkslk3Bk2owULFmzMVFxRUVF0HGhkyJAhd9xxRwhhn332Oeqoo5YtW/b0009/8MEHIYRhw4ZdeOGFlX/t1KlTu3fvvnjx4sLCwuOOO65r164TJ0586qmnli9fvvXWW7/77rtVAowdO7ZPnz4hhE6dOh1//PEtW7Z86aWXXnrppWQyecwxx4wbNy6RSGzKW45++cb/sX744Yddu3YNIey8884fffTRpnzrrPKPf/zjgAMOCCE0btx45syZTZo0iTsRdUqPHmHSpBBCePvtsOeecaeBTTVjxowQQseOHeMOAkC28NEDQJr56AEgzX5s1/MT5G2+W/+gadOmPfTQQ/Pnz99zzz1POumkzTG+9sUXX/yEX3XLLbeEEO64444JEyZEg30hhLy8vKuvvrpKOxhC+NnPfvbss8+ecsopX3311d133526vttuu40dO3bdevLkk09eunTpeeedN23atGHDhqWu9+nT56677trEdvAnmDt3brTwAMIfZf/99+/SpctHH320dOnSMWPGDBo0KO5EAAAAAAAAGyW2gvCxxx7r27fv6tWroy9Hjhw5fvz4Gh/D2m677V599dUf3Jafn1/5y3r16t1+++1Dhgx59NFHp0+fnpub27lz55NPPnmrrbaq9pf36NHj008/feKJJyZOnLhw4cKioqKDDjroiCOOyMur/rd3wIABRx999MMPP/zxxx+vXLmyY8eOxx13XLdu3X7CG9x0qYKwqKgolgB116BBg84999wQwh133KEgBAAAAAAA6op4jhh97LHH+vTpU15eXvniHnvs8fbbb3sM3ib6sWOnN910UzQWed555916662bMVnGWbp0abt27ZYuXRpCmDhx4l577RV3IuoOR4ySWRy2A0Ca+egBIM189ACQZmk4YjRn8916fVavXn3++ee3atXq2muvff755996662xY8eecMIJH3zwwZ133pn+PFmutLQ0Wjhi9Mdq3LjxKaecEq1HjBgRbxgAAAAAAICNlI6C8KOPPvrzn/+c+nLEiBEtWrSYOnXqZZdddthhh/Xo0aN3796PP/74qFGjrr322pUrV0bb5s+ff9FFF6UhXpZzxOimOOecc6LFww8/PG/evHjDAAAAAAAAbIx0FIRr1qyZMmVK6sunn356/PjxW2yxRZVt/fr1O/nkkydO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0fp3v/tdvGEAAAAAAIDMoyDMLh5AWCf84Q9/qFevXgjhH//4x8svvxx3HAAAAAAAIKMoCLOLCcI6oVOnTmeddVa0vvTSS5PJZLx5AAAAAACATKIgzC4mCOuKq666qkGDBiGEd999d/z48XHHAQAAAAAAMoeCMLsoCOuKtm3bnn322dH68ssvr6ioiDcPAAAAAACQMRSE2cURo3XIpZde2qRJkxDCRx99NGbMmLjjAAAAAAAAGUJBmF1MENYhLVq0+O1vfxutr7jiijVr1sSbBwAAAAAAyAwKwuxigrBuueCCCwoLC0MI//nPf+6555644wAAAAAAAJlAQZhdTBDWLVtuueUll1wSra+++uqVK1fGmwcAAAAAAMgACsLskioITRDWFeedd1779u1DCLNnzx4+fHjccQAAAAAAgDpPQZhFli5dumLFihBCgwYNGjduHHccNkr9+vUvvfTSaH3dddctWbIk3jwAAAAAAEBdpyDMIh5AWEcVFxdvt912IYT58+ffcsstcccBAAAAAADqNgVhFvEAwjqqXr16V155ZbQeNmzYvHnz4s0DAAAAAADUaQrCLGKCsO7q27fvTjvtFEJYunTpsGHD4o4DAAAAAADUYQrCLGKCsO7Kzc29+uqro/Vf/vKXmTNnxpsHAAAAAACouxSEWcQEYZ3Wq1evPffcM4SwatWq6667Lu44AAAAAABAXaUgzCImCOu0RCLxhz/8IVqXlJR88cUX8eYBAAAAAADqqGwsCF988cXOnTvfc889G9hTUVHxyCOP9OnTp1u3bj169DjjjDOeffbZDez/8ssvf//73x988MG77bbbYYcd9sc//nHOnDkb2P/WW28NGjRo33333WOPPY4//vhRo0atXr36J76fjaYgrOt++ctfHnTQQSGEtWvXpk4cBQAAAAAA+FHy4g4Qg7/97W+fffbZggUL1rfh22+/7dWr1yuvvJK6MmnSpPvuu++kk0564IEH8vPzq+x/6KGHBg4cuHz58tSVF1988aabbnrooYcOOeSQde9/4YUX3nTTTakvJ0+ePG7cuFtvvfXJJ5/caqutfvob+yGOGM0A11xzzb777htCuP/++y+88MJdd9017kQAAAAAAEAdk3UThG+++ebYsWM3vOe0006L2sH99tvvT3/605VXXrnbbruFEB599NEhQ4ZU2TxhwoQzzjhj+fLlhYWFAwcOvP322/v27duoUaMFCxb06tXr3//+d5X9119/fdQObr/99pdccslNN910xBFHhBCmTJlyzDHHrFq1qqbe6bpMEGaAffbZ56ijjgohVFRUpE4cBQAAAAAA2HiJZDIZd4Z0WL169UcfffTQQw/deeedS5YsCSHccMMNF1100bo7n3rqqWOOOSaE0K9fv3vvvTe6WFZWdsQRR7z00kshhPfff79r166p/d26dXvvvfcaNWo0ceLEXXbZJbr40ksvHXHEEWVlZSeccMLjjz+e2lxaWrrNNtusWLGiS5cuEydObNy4cXR96NChUdlz6623nnfeeZvyThOJRAih2j/W5s2bL1q0KIrRsmXLTfkuxGjKlCm77bZbRUVFCOHtt9/ec889407Ej9ejR5g0KYQQ3n47+BOk7psxY0YIoWPHjnEHASBb+OgBIM189ACQZhvoempKVkwQ/u1vf2vYsOEvfvGLYcOGRe3gBvz1r38NIWy99dZ33nln6mJeXt7YsWPr168fQrjttttS199666333nsvhHDTTTel2sEQwiGHHHLhhReGEJ544omZM2emro8aNWrFihWJROLRRx9NtYMhhKFDh/bo0SP13TeHNWvWLF68OISQm5tbWFi4mb4LabDLLrv07t07Wl955ZXxhgEAAAAAAOqcrCgI8/LyOnTosNX/2cDO5cuXv/baayGE008/vcqzBps1a9azZ88QwjPPPJO6+NRTT4UQCgoK+vbtW+VWJ554YgghmUw+++yzVfbvs88+O+ywQ5X9vXr1CiFMmzZt6tSpP/YNbozS0tKoam7ZsmVOTlb8uWewa665Ji8vL4TwwgsvvPrqq3HHAQAAAAAA6pKsKIr69u37ZSUb2PnBBx+sWbMmhLDvvvuu++rRRx8dQpg9e/asWbOiK++++24IYffdd2/YsGGVzb/4xS+KiopCCO+88050paKi4l//+teGb155f83yAMJM8rOf/axfv37R+ne/+12WHBQMAAAAAADUiKwoCDfe559/Hi223377dZrlhfkAACAASURBVF/deeedo0VqyC/aX+3mRCKx0047Vd48Y8aMVatWrW//DjvsEM2EbaYJwrlz50aLqLakrrvyyisLCgpCCO+8887TTz8ddxwAAAAAAKDOyIs7QO0yZ86caNGmTZt1X23btm20+Oabbyrvr3Zzan+Vzevbn5OTU1RUNGvWrNT+9XnppZc2vCGEEDWRlaWmHgsLC9d9lTqnVatWxcXF0RMxL7300p49ezo5tg7Jr6iI/rTWrFlT4eeRum/16tWhuo8eANhMfPQAkGY+egDIPArC71m+fHkIIScnp379+uu+2qBBg8rbysvLo385WPd80cr7o82VFxu5f30OPfTQH3gblQ4UTZk+fXq0aNy48bqvUhf179//nnvuWb58+UcffXT33Xcfe+yxcSdiY7UuK4uecbpw4cI1fh6p+xYsWBBCiMaaASANfPQAkGY+egDIPArC74keQJibm1vtq9ERoOH//rpQtLny9Wr3p/5u0Y/dvz6HHHLIBl6N5gvXLTgXL14cLYqKiqqtP6lz2rVrV1xcfMstt4QQbr755l69eq3vHy1qm0QiES0KCgpy/DxS90X/I9mHCwBp46MHgDTz0QNA5lEnfE8027d27dpkMpn6f/BTUtVdNOrXoEGDRCKRTCajOcJ1RftTc4epwcGN3L8+L7744gZejWK3atWqyvVly5ZFi2233XbdV6mjhg4dOnr06IULF06fPv2ZZ54ZOHBg3InYOPXqRf/drFmz4OeRui/6/PLhAkDa+OgBIM189ACQeTy07HsaN24cLZYsWbLuq6mLqW2NGjVa3+bU9dTmDd983f01a+7cudGiqKhoc9yfWGy55ZYXXXRRtB46dOjKlSvjzQMAAAAAANR+CsLv2WabbaLFzJkz13111qxZVbZFi2o3p/ZX2by+/StXrly4cGHlbTUr9dxBf9cpw5x33nmtW7cOIcyaNevOO++MOw4AAAAAAFDbKQi/Z8cdd4wWH3744bqvRhcTiUTnzp0r7692c3l5+ccff1z5ns2aNYum96rdP2XKlCoZapYJwky1xRZbXHbZZdH62muvXbp0abx5AAAAAACAWk5B+D2dO3du165dCOHll19e99XoYvfu3VOngPbs2TOEMHXq1K+//rrK5nfeeSd67N8hhxySuhjtf+WVV9Z383r16u2///418Va+J5lMzp8/P1q3bNmyxu9PvAYNGhQNns6bN+8vf/lL3HEAAAAAAIBaTUFY1YknnhhCGDt2bOpMzshnn3320ksvhRBOPvnk1MVjjz02Pz8/mUzefvvtVe5z2223hRBatGhx0EEHpS727t07hDBt2rTnnnuu8ubVq1ffddddIYTDDz+8SZMmNfuOQggLFixYu3ZtCKFp06b169ev8fsTr/z8/Msvvzxa33DDDdFZtQAAAAAAANVSEFZ18cUXFxQULF269Fe/+lXqtMa5c+eeeuqpFRUVrVq1GjRoUGpz69ati4uLQwg333zzU089lbpeUlLy4IMPhhAuueSSgoKC1PXjjz9+l112CSEMGjRo6tSp0cU1a9YMHjx4+vTpiUQiVfPULA8gzHj9+vWLDqf99ttvhw0bFnccAAAAAACg9sqLO0Ct0759+zvuuGPAgAEvvPBCq1at9t9//2XLlr3zzjtlZWV5eXkPPvjgFltsUXn/dddd99prr3388cfHHHPMtttu27Vr17feemvOnDkhhEMOOeT888+vvDmRSDzwwAN77733jBkzdthhh5///OctW7Z84403osNIr7rqqu7du2+ON+UBhBkvNzd36NChffr0CSHcfPPNO+200+rVqxs2bNi1a9eddtop7nQAAAAAAEAtYoKwGv379x87dmybNm1WrVr1wgsvTJw4saysbPvtt3/55ZcPPvjgKpsbN278+uuv9+7dOycnZ/r06X//+9/nzJmTn58/ZMiQ8ePH5+VVrWB32WWXCRMm7LHHHslk8r333nv22WeXLVvWrFmzO+6446qrrtpM78gEYTbo3bt3165dQwirVq361a9+NXDgwNNOO23nnXfefffdq33sJQAAAAAAkJ2ycYIwmUz+4J7evXv36tVrwoQJ06dPz83N7dy5c7du3da3ubCwcOzYsTNnzpw0adLChQuLior23Xff5s2br2//rrvu+s9//vPDDz/8+OOPV65c2bFjx/3226/ySaQ1zgRhNpg/f361Tx98//33Dz300DvvvHPAgAHpTwUAAAAAANQ22VgQbqTc3Nz9999///3338j97du3b9++/cbff9ddd911111/UrQfzQRhNhg4cODXX39d7UsVFRWDBw/ea6+9HDcKAAAAAAA4YjQrKAgz3pQpU8aPH7+BDWVlZX/+85/TlgcAAAAAAKi1FIRZwRGjGe+5556rkT0AAAAAAEDGUxBmhXnz5kULE4SZan2Hi1ZWWlq6atWqNIQBAAAAAABqMwVhVkhNECoIM1Vubu4P7kkkEjk5fuQBAAAAACDbaQuyQqogbN26dbxJ2Ey22WabH9zTvn37/Pz8NIQBAAAAAABqMwVh5lu2bNny5ctDCPXr12/S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\"/>","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We see that all the power of the background flow is contained in the first 10 wavenumbers and that our dealiasing will be sufficient.","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Initial-Conditions","page":"Barotropic zeta refraction","title":"Initial Conditions","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We initialise a slab of across-front velocity","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"u_0 = frac12left(1 + mathrmerfleft(3 + frac2 zHright)right)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"where H = 2times10^-3.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"const H = 2e-3\nu₀(x, z) = 0.5 * (1 + erf(3 + 2 * z / H));","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"problem = Problem(domain, background_flow)\nset_ζ!(problem; u=u₀)","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Preconditioning","page":"Barotropic zeta refraction","title":"Preconditioning","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We can speed up the iterative solver by using a preconditioner. Here we use a DiagonalQuadraticPreconditioner This preconditioner approximates the Sawyer-Eliassen equation in spectral space by","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"mathcalLzeta approx left(omega_0^2 k_z^2 + omega_1^2 k_x^2right)  (k_x^2 + k_z^2) zeta","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Here we set omega_0^2 = 1 and omega_1^2 = N².","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"ω₀² = 1.0\nω₁² = N²\npreconditioner = DiagonalQuadraticPreconditioner(domain, ω₀², ω₁²)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"DiagonalQuadraticPreconditioner:\n  ├───────── domain: Domain with eltype Float64 and physical size (128, 512)\n  ├──────────── ω₀²: 1\n  └──────────── ω₁²: 40000\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Then we create a timestepper with timestep Delta t = 2pi  f  50.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"ts = Timestepper(problem, 2π / 50, preconditioner)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Timestepper:\n  ├───────── problem: Problem{Float64}\n  ├──────── timestep: h = 0.12566\n  ├─────────────── 𝓒: SawyerEliassenSolver.Timesteppers.DIRKNCoefficients{Float64}\n  ├───────────── cgs: SawyerEliassenSolver.Timesteppers.ConjugateGradientSolver{Float64}\n  └─────────────── 𝓟: DiagonalQuadraticPreconditioner with ω₀² = 1, ω₁² = 40000\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Output","page":"Barotropic zeta refraction","title":"Output","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Save u, v, w, b and uz every 5 timesteps. We'll also save the background flow as ConstantOutputVariables using write_background_flow!.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"output_writer = OutputWriter(problem, \"barotropic_zeta_refraction.h5\"; overwrite=true)\nadd_output_variables!(\n    output_writer;\n    u=OutputVariables.u(problem),\n    v=OutputVariables.v(problem),\n    w=OutputVariables.w(problem),\n    b=OutputVariables.b(problem),\n    ∂u∂z=OutputVariables.∂u∂z(problem),\n)\nwrite_background_flow!(output_writer)\nwrite_attributes!(output_writer; Ro=Ro, L=L, H=H)\nwrite!(output_writer)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Run the simulation for 10 inertial periods.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"for _ in 1:100\n    advance!(ts, 5)\n    write!(output_writer)\nend","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Visualise-the-solution","page":"Barotropic zeta refraction","title":"Visualise the solution","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We'll plot the across-filament vertical shear and the wave energy density","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"mathcalE = frac12left(u^2 + v^2 + w^2 + b^2N^2right)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"in the top 25% of the domain. We'll also contour the background vorticity V_x","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"z_idx = (3 * NZ ÷ 4):NZ\n\noutput = h5open(\"barotropic_zeta_refraction.h5\", \"r\") do h5\n    u = h5[\"u\"][:, z_idx, :]\n    v = h5[\"v\"][:, z_idx, :]\n    w = h5[\"w\"][:, z_idx, :]\n    b = h5[\"b\"][:, z_idx, :]\n    E = (u .^ 2 .+ v .^ 2 .+ w .^ 2 .+ b .^ 2 / N²) / 2\n    Vx = h5[\"Vx\"][:, z_idx]\n    (\n        E=E,\n        ∂u∂z=h5[\"∂u∂z\"][:, z_idx, :],\n        Vx=Vx,\n        time=read_dataset(h5, \"time\"),\n        x=read_dataset(h5, \"x\"),\n        z=h5[\"z\"][z_idx],\n    )\nend;","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"n = Observable(1)\n∂u∂zₙ = @lift output[:∂u∂z][:, :, $n]\nEₙ = @lift output[:E][:, :, $n]\ntitle = @lift @sprintf \"t = %.2f inertial periods\" output[:time][$n] / 2π\n\nfig = Figure(; size=(1200, 400))\nLabel(fig[1, 1:2], title; tellwidth=false)\nax_∂u∂z = Axis(fig[2, 1]; ylabel=\"z\")\nax_E = Axis(fig[2, 2]; xlabel=\"x\", ylabel=\"z\")\nlinkaxes!(ax_∂u∂z, ax_E)\n\ncontour_levels = 0:1:4\n\ncf_∂u∂z = heatmap!(\n    ax_∂u∂z, output[:x], output[:z], ∂u∂zₙ; colormap=:balance, colorrange=(-1000, 1000)\n)\nColorbar(\n    fig[3, 1], cf_∂u∂z; vertical=false, label=L\"\\partial u/\\partial z\", labelpadding=10\n)\ncontour!(\n    ax_∂u∂z,\n    output[:x],\n    output[:z],\n    output[:Vx];\n    levels=contour_levels,\n    color=:black,\n    labels=true,\n)\n\ncf_E = heatmap!(\n    ax_E, output[:x], output[:z], Eₙ; colormap=Reverse(:grays), colorrange=(0, 0.5)\n)\nColorbar(fig[3, 2], cf_E; vertical=false, label=L\"\\mathcal{E}\", labelpadding=10)\ncontour!(\n    ax_E,\n    output[:x],\n    output[:z],\n    output[:Vx];\n    levels=contour_levels,\n    color=:black,\n    labels=true,\n)\n\nrecord(fig, \"barotropic_zeta_refraction.mp4\", 1:length(output[:time]); framerate=10) do i\n    n[] = i\nend","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"(Image: )","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Performance-with-and-without-preconditioning","page":"Barotropic zeta refraction","title":"Performance with and without preconditioning","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Let's time how long it takes to run 10 inertial periods with and without preconditioning. First create a clean problem.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"function setup_problem()\n    grid = Grid(NX, NZ, (-LX / 2, LX / 2), LZ)\n    domain = Domain(grid; dealias_x=dealias)\n    xgrid, zgrid = gridpoints(grid)\n    background_flow = BackgroundFlow(grid)\n    background_flow.Vx .= Vx.(xgrid)\n    background_flow.Bz .= N²\n    problem = Problem(domain, background_flow)\n    set_ζ!(problem; u=u₀)\n    return domain, problem\nend;","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Without-preconditioning","page":"Barotropic zeta refraction","title":"Without preconditioning","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Create the timestep and advance 1 step before timing.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"domain, problem = setup_problem()\nts = Timestepper(problem, 2π / 50)\nadvance!(ts)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"@time advance!(ts, 500)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"221.396195 seconds (1.63 M allocations: 132.632 GiB, 2.71% gc time)\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/#With-preconditioning","page":"Barotropic zeta refraction","title":"With preconditioning","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"domain, problem = setup_problem()\npreconditioner = DiagonalQuadraticPreconditioner(domain, ω₀², ω₁²)\nts = Timestepper(problem, 2π / 50, preconditioner)\nadvance!(ts)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"@time advance!(ts, 500)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":" 15.807481 seconds (133.50 k allocations: 10.323 GiB, 3.11% gc time)\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We see that the preconditioner speeds up the simulation by a factor of 10. This is because the preconditioner drastically reduces the number of iterations required by the iterative solver from approximately 150 to 3.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Eliassen, A. (1962). On the vertical circulation in frontal zones. Geofys. publ 24, 147–160.\n\n\n\nMooers, C. N. (1975). Several effects of a baroclinic current on the cross‐stream propagation of inertial‐internal waves. Geophysical Fluid Dynamics 6, 245–275.\n\n\n\nSawyer, J. S. and Sutton, O. G. (1956). The vertical circulation at meteorological fronts and its relation to frontogenesis. Proceedings of the Royal Society of London. Series A. Mathematical and Physical Sciences 234, 346–362.\n\n\n\nSharp, P. W.; Fine, J. M. and Burrage, K. (1990). Two-stage and Three-stage Diagonally Implicit Runge-Kutta Nyström Methods of Orders Three and Four. IMA Journal of Numerical Analysis 10, 489–504.\n\n\n\n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"EditURL = \"../../../examples/near-inertial_waves.jl\"","category":"page"},{"location":"literated/near-inertial_waves/#near-inertial_waves_example","page":"Near-inertial waves","title":"Near-inertial waves","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"This simple example demonstrates how to set up and run a simulation with SawyerEliassenSolver.","category":"page"},{"location":"literated/near-inertial_waves/#Setting-up-a-problem","page":"Near-inertial waves","title":"Setting up a problem","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"First load the SawyerEliassenSolver and the other packages we need.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"using CairoMakie\nusing HDF5\nusing Printf\nusing Statistics\n\nusing SawyerEliassenSolver","category":"page"},{"location":"literated/near-inertial_waves/#Grid","page":"Near-inertial waves","title":"Grid","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The first step is to create a grid. The grids are periodic in x and bounded in z. Let's simulate some near-inertial waves in a domain of depth 1 km and width 250 km.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"NX, NZ = 128, 64\nconst LX, LZ = 250, 1\ngrid = Grid(NX, NZ, (-LX / 2, LX / 2), LZ)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Grid{Float64}:\n  ├── NX: 128\n  ├── NZ: 64\n  ├─── x: [-125,125)\n  └─── z: [-1,0]\n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Some remarks on the grid:","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Here we use the default floating point precision of Float64.\nAlternatively, we could use Float32 by creating the grid with grid = Grid(Float32, NX, NZ, (-LX/2,LX/2), LZ).\nThe choice of precision here propagates through the entire simulation.\nWe specified the x extent with a tuple of bounds but the z extent with a single depth value. Passing a the width / depth is equivalent to passing a tuple of (0, LX) / (-LZ, 0) for x and z respectively.","category":"page"},{"location":"literated/near-inertial_waves/#Background-Flow","page":"Near-inertial waves","title":"Background Flow","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"With a grid we can now create a background flow. When creating the background flow let's set the Coriolis frequency to a typical midlatitude value of 10^-4mathrms^-1.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"const f = 1e-4\nbackground_flow = BackgroundFlow(grid, f)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"BackgroundFlow:\n  ├─── f: 0.0001\n  ├── Vx: 128×64 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  ├── Bx: 128×64 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  └── Bz: 128×64 Matrix{Float64}\n          [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The background flow is initialised to zeros. For our simple example, let's use a constant background stratification of 10^-4mathrms^-2","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"const N² = 1e-4\nbackground_flow.Bz .= N²;","category":"page"},{"location":"literated/near-inertial_waves/#Domain","page":"Near-inertial waves","title":"Domain","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Now we create a Domain. The Domain object contains not just the grid but also details of the spectral domain and the transforms between the different representations. When creating a Domain we can specify the number of high wavenumbers to zero-out inorder to dealias the products with the background flow. In this example the background flow is constant and so we do not need to worry about dealiasing.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"domain = Domain(grid)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Domain:\n  ├─────────── grid: Grid with eltype Float64 and size (128, 64)\n  ├─────── spectral: Spectral domain of size (65, 64) and spectral resolution (64, 63)\n  └───── transforms: FFTW transforms: rfft, type II DST and type II DCT.\n","category":"page"},{"location":"literated/near-inertial_waves/#Problem","page":"Near-inertial waves","title":"Problem","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The next step is to define a Problem. A problem consists of a domain, background flow and forcing. We leave forcing for a later example and thus create the problem with","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"problem = Problem(domain, background_flow)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Problem:\n  ├─────────── domain: Domain with eltype Float64 and physical size (128, 64)\n  ├─────── background: BackgroundFlow with f = 0.0001 and Vx,Bx,Bz = 128×64 Matrix{Float64}\n  ├──────── ζ_forcing: NoForcing{Float64}\n  ├──────── v_forcing: NoForcing{Float64}\n  ├──────── b_forcing: NoForcing{Float64}\n  └──────────── state: ζ,ζₜ = 65×64 FSVariable{Float64}, v,b = 128×64 XZVariable{Float64}, clock = Clock(t = 0, iteration = 0)\n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The problem object also contains the current state of the simulation.","category":"page"},{"location":"literated/near-inertial_waves/#Initial-conditions","page":"Near-inertial waves","title":"Initial conditions","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Here we simulate a pair of waves propagating horizontally in different directions. If the streamfunction of a wave is psi = a cos(k x - omega t + phi) sin m z then the polarisation relations give","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"beginalign*\n  u  = -m a cos(k x - omega t + phi) cos m z \n  v  = -(f  omega) m a sin(k x - omega t + phi) cos m z \n  w  = -k a sin(k x - omega t + phi) sin m z \n  b  = (N^2  omega) k a cos(k x - omega t + phi) sin m z\nendalign*","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"ω(k, m) = √(f^2 * m^2 + N² * k^2) / √(k^2 + m^2)\nfunction u(x, z, t, W)\n    return -W.m * W.a * cos(W.k * x - ω(W.k, W.m) * t + W.φ) * cos(W.m * z)\nend\nfunction v(x, z, t, W)\n    return -(f / ω(W.k, W.m)) *\n           W.m *\n           W.a *\n           sin(W.k * x - ω(W.k, W.m) * t + W.φ) *\n           cos(W.m * z)\nend\nfunction w(x, z, t, W)\n    return -W.k * W.a * sin(W.k * x - ω(W.k, W.m) * t + W.φ) * sin(W.m * z)\nend\nfunction b(x, z, t, W)\n    return N² / ω(W.k, W.m) *\n           W.k *\n           W.a *\n           cos(W.k * x - ω(W.k, W.m) * t + W.φ) *\n           sin(W.m * z)\nend\n\nW₁ = (; k=2 * π / LX, m=π / LZ, a=0.1, φ=0)\nW₂ = (; k=-12 * π / LX, m=4 * π / LZ, a=0.01, φ=π / 2);\nω(W₁.k, W₁.m) / f, ω(W₂.k, W₂.m) / f","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"(1.2805838694583849, 1.5619374797310408)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"A couple of utility functions allow us to set initial conditions from the velocity and buoyancy. First we specify the initial conditions as functions of x and z.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"u₀(x, z) = u(x, z, 0, W₁) + u(x, z, 0, W₂)\nv₀(x, z) = v(x, z, 0, W₁) + v(x, z, 0, W₂)\nw₀(x, z) = w(x, z, 0, W₁) + w(x, z, 0, W₂)\nb₀(x, z) = b(x, z, 0, W₁) + b(x, z, 0, W₂);","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Then we use set_ζ! and set_vb! to set the initial conditions.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"set_ζ!(problem; u=u₀, w=w₀)\nset_vb!(problem; v=v₀, b=b₀)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Note that set_vb! also sets the state variable ζₜ using zeta_t = b_x - fv_z. The functions set_v! and set_b! can be used to set v and b separately without computing ζₜ. Furthermore, with v and b specified the function compute_ζₜ! can be used to compute and set ζₜ.","category":"page"},{"location":"literated/near-inertial_waves/#Timestepper","page":"Near-inertial waves","title":"Timestepper","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The next step is to create a timestepper. We use a timestep of Δt = 2πf⁻¹/100.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Δt = 2π / f / 100\nts = Timestepper(problem, Δt)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Timestepper:\n  ├───────── problem: Problem{Float64}\n  ├──────── timestep: h = 628.32\n  ├─────────────── 𝓒: SawyerEliassenSolver.Timesteppers.DIRKNCoefficients{Float64}\n  ├───────────── cgs: SawyerEliassenSolver.Timesteppers.ConjugateGradientSolver{Float64}\n  └─────────────── 𝓟: IdentityPreconditioner{Float64}\n","category":"page"},{"location":"literated/near-inertial_waves/#Output","page":"Near-inertial waves","title":"Output","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"We can write output to an HDF5 file using an OutputWriter.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"output_writer = OutputWriter(problem, \"near_inertial_waves.h5\"; overwrite=true)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"OutputWriter:\n  ├─────── filepath: near_inertial_waves.h5\n  ├──────── problem: Problem{Float64}\n  ├──── coordinates: x, z\n  └────── variables: \n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Here we'll just save the u component of the velocity. Common output variables are defined in the submodule OutputVariables","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"u_output = OutputVariables.u(problem)\nadd_output_variables!(output_writer; u=u_output)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"We can also write some attributes to the output file.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"write_attributes!(output_writer; f=f, N²=N²)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"To save the current state of the simulation to the output file we use the write! function. i.e. to save the initial conditions","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"write!(output_writer)","category":"page"},{"location":"literated/near-inertial_waves/#Running-the-simulation","page":"Near-inertial waves","title":"Running the simulation","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Finally, it is time to run the simulation. We use advance! to timestep the simulation. Let's run the simulation for 1000 timesteps saving output every 10 timesteps.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"for _ in 1:100\n    advance!(ts, 10)\n    write!(output_writer)\nend","category":"page"},{"location":"literated/near-inertial_waves/#Visualise-the-solution","page":"Near-inertial waves","title":"Visualise the solution","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Read in the output we saved.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"output = h5open(\"near_inertial_waves.h5\", \"r\") do h5\n    (\n        u=read_dataset(h5, \"u\"),\n        time=read_dataset(h5, \"time\"),\n        x=read_dataset(h5, \"x\"),\n        z=read_dataset(h5, \"z\"),\n    )\nend;","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Make a video of u.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"n = Observable(1)\nuₙ = @lift output[:u][:, :, $n]\ntitle = @lift @sprintf \"t = %.2f inertial periods\" output[:time][$n] * f / 2π\n\nfig = Figure(; size=(1200, 400))\nLabel(fig[1, 1:2], title; tellwidth=false)\nax = Axis(fig[2, 1]; xlabel=\"x [km]\", ylabel=\"z [km]\")\n\ncf = heatmap!(ax, output[:x], output[:z], uₙ; colormap=:balance, colorrange=(-0.5, 0.5))\nColorbar(fig[2, 2], cf; label=\"u [ms⁻¹]\", labelpadding=10)\n\nrecord(fig, \"near-inertial_waves.mp4\", 1:length(output[:time]); framerate=10) do i\n    n[] = i\nend","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"(Image: ) We have a mode 1 wave propagating to the right and a mode 4 wave propagating to the left.","category":"page"},{"location":"literated/near-inertial_waves/#Error-analysis","page":"Near-inertial waves","title":"Error analysis","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"We can compute the root mean square error between the theoretical solution and the simulated solution after 1 inertial period","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"x_grid, z_grid = gridpoints(domain)\nu_theory = [\n    u(x, z, 2π / f, W₁) + u(x, z, 2π / f, W₂) for x in xgridpoints(domain),\n    z in zgridpoints(domain)\n];\n\nfunction run_one_inertial_period(problem, nsteps::Int)\n    set_ζ!(problem; u=u₀, w=w₀)\n    set_vb!(problem; v=v₀, b=b₀)\n    Δt = 2π / f / nsteps\n    ts = Timestepper(problem, Δt)\n    for _ in 1:nsteps\n        advance!(ts)\n    end\n    output = OutputVariables.u(problem)\n    compute!(output)\n    return output\nend\n\nfunction rms_error(simulated, theory)\n    squared_error = (simulated .- theory) .^ 2\n    return sqrt(mean(squared_error))\nend;","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Make a plot of the root mean square error as a function of the timestep. Our time stepping scheme is third-order accurate and we see that the error scales as Δt³. The lower bound for the error is determined by the tolerance of the iterative solver.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"fig = Figure(; size=(1200, 400))\nax = Axis(\n    fig[1, 1];\n    xlabel=\"Δt [Inertial periods]\",\n    ylabel=\"RMS Error\",\n    xscale=log10,\n    yscale=log10,\n)\nnumber_of_steps = [10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000]\n\nfor nsteps in number_of_steps\n    problem = Problem(domain, background_flow)\n    u_sim = run_one_inertial_period(problem, nsteps)\n    rms = rms_error(u_sim, u_theory)\n    scatter!(ax, 1 / nsteps, rms; color=:red, marker=:cross)\nend\n\nlines!(\n    ax,\n    1 ./ number_of_steps,\n    1e3 ./ number_of_steps .^ 3;\n    color=:black,\n    label=\"Δt³\",\n    linewidth=2,\n)\naxislegend(; position=:lt)\n\nfig","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"<img width=1200 height=400 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"This page was generated using Literate.jl.","category":"page"},{"location":"library/problems/#Problems","page":"Problems","title":"Problems","text":"","category":"section"},{"location":"library/problems/","page":"Problems","title":"Problems","text":"Modules = [SawyerEliassenSolver.Problems]\nPrivate = false","category":"page"},{"location":"library/problems/#SawyerEliassenSolver.Problems.BackgroundFlow","page":"Problems","title":"SawyerEliassenSolver.Problems.BackgroundFlow","text":"struct BackgroundFlow{T}\n\nThe balanced background gradients. The background flow is in thermal wind balance and therefore assumed to be steady.\n\nFields\n\nf::Any: Coriolis frequency f\nVx::Matrix: Lateral shear partial Vpartial x\nBx::Matrix: Horizontal buoyancy gradient partial Bpartial x = fpartial Vpartial z\nBz::Matrix: Vertical buoyancy gradient partial Bpartial z\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.BackgroundFlow-Union{Tuple{Grid{T}}, Tuple{T}} where T","page":"Problems","title":"SawyerEliassenSolver.Problems.BackgroundFlow","text":"BackgroundFlow(grid::Grid{T}) -> BackgroundFlow\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.BackgroundFlow-Union{Tuple{T}, Tuple{Grid{T}, T}} where T","page":"Problems","title":"SawyerEliassenSolver.Problems.BackgroundFlow","text":"BackgroundFlow(grid::Grid{T}, f) -> BackgroundFlow\n\n\nCreate a new BackgroundFlow given a Grid and Coriolis frequency f which defaults to 1. Background gradients are initialised to 0.\n\nExamples\n\ngrid = Grid(256,128,2000.0,1.0)\nbg = BackgroundFlow(grid)\n\n# output\nBackgroundFlow:\n  ├─── f: 1\n  ├── Vx: 256×128 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  ├── Bx: 256×128 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  └── Bz: 256×128 Matrix{Float64}\n          [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.Clock","page":"Problems","title":"SawyerEliassenSolver.Problems.Clock","text":"mutable struct Clock{T}\n\nCurrent simulation time and iteration.\n\nt::Any\niteration::Int64\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.Clock-Union{Tuple{}, Tuple{T}} where T","page":"Problems","title":"SawyerEliassenSolver.Problems.Clock","text":"Default initialiser for Clock\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.Problem","page":"Problems","title":"SawyerEliassenSolver.Problems.Problem","text":"struct Problem{T}\n\nA struct representing a Sawyer-Eliassen problem.\n\nFields\n\ndomain::Domain{T} where T\nbackground::BackgroundFlow\nζ_forcing::AbstractForcingFunction\nv_forcing::Union{NoForcing{T}, GlobalPhysicalForcing{T}, PointwisePhysicalForcing{T}} where T\nb_forcing::Union{NoForcing{T}, GlobalPhysicalForcing{T}, PointwisePhysicalForcing{T}} where T\nstate::State\nscratch::Scratch\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.Scratch","page":"Problems","title":"SawyerEliassenSolver.Problems.Scratch","text":"struct Scratch{T}\n\nScratch space for temporary variables used in the Sawyer-Eliassen problem. These variables have two primary uses in the code:\n\n1) intermediate terms in the computation of the Sawyer-Eliassen operator 𝓛\n2) intermediate terms in the advection of the background flow\n\nBetween timesteps these variables are available for other purposes e.g. setting the initial conditions, computing output.\n\nFields\n\nFS_tmp::FSVariable\nFC_tmp::FCVariable\nXS_tmp::XSVariable\nXC_tmp::XCVariable\nXZ_tmp::XZVariable\nXZ_tmp2::XZVariable\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.State","page":"Problems","title":"SawyerEliassenSolver.Problems.State","text":"struct State{T}\n\nState variables of the problem.\n\nζ::FSVariable\nζₜ::FSVariable\nv::XZVariable\nb::XZVariable\nclock::Clock\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.compute_ζₜ!-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.compute_ζₜ!","text":"compute_ζₜ!(problem::Problem)\n\n\nCompute and set ζₜ by projecting b onto sine space, v onto cosine space and using ζₜ = bx - fvz\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Bx-Tuple{BackgroundFlow}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Bx","text":"get_Bx(bg::BackgroundFlow) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Bx-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Bx","text":"get_Bx(problem::Problem) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Bz-Tuple{BackgroundFlow}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Bz","text":"get_Bz(bg::BackgroundFlow) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Bz-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Bz","text":"get_Bz(problem::Problem) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Vx-Tuple{BackgroundFlow}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Vx","text":"get_Vx(bg::BackgroundFlow) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Vx-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Vx","text":"get_Vx(problem::Problem) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_f-Tuple{BackgroundFlow}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_f","text":"get_f(bg::BackgroundFlow) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_f-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_f","text":"get_f(problem::Problem) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_iteration-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_iteration","text":"get_iteration(problem::Problem) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_iteration-Tuple{State}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_iteration","text":"get_iteration(state::State) -> Int64\n\n\nGet current iteration.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_problem-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_problem","text":"get_problem(problem::Problem) -> Problem\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_scratch-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_scratch","text":"get_scratch(problem::Problem) -> Scratch\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_time-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_time","text":"get_time(problem::Problem) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_time-Tuple{State}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_time","text":"get_time(state::State) -> Any\n\n\nGet current simulation time.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_ζ_forcing-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_ζ_forcing","text":"get_ζ_forcing(problem::Problem) -> AbstractForcingFunction\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_b!-Tuple{Problem, Any}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_b!","text":"set_b!(problem::Problem, b)\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_b!-Tuple{State, Function}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_b!","text":"set_b!(state::State, func::Function)\n\n\nSet b from a function b(x,z).\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_b!-Tuple{State, XZVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_b!","text":"set_b!(state::State, b::XZVariable)\n\n\nSet b from a variable.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_v!-Tuple{Problem, Any}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_v!","text":"set_v!(problem::Problem, v)\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_v!-Tuple{State, Function}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_v!","text":"set_v!(state::State, func::Function)\n\n\nSet v from a function v(x,z).\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_v!-Tuple{State, XZVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_v!","text":"set_v!(state::State, v::XZVariable)\n\n\nSet v from a variable.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_vb!-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_vb!","text":"set_vb!(problem::Problem; v, b)\n\n\nSet v and / or b and then compute and set ζₜ\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{Problem, Any}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(problem::Problem, ζ) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(problem::Problem; u, w)\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State, FSVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State, ζ::FSVariable)\n\n\nSet ζ from a variable in spectral space.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State, Function}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State, func::Function)\n\n\nSet ζ from a function. func should specify ζ = func(x,z) pointwise.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State, XSVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State, ζ::XSVariable)\n\n\nSet ζ from a variable in XS space.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State, XZVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State, ζ::XZVariable)\n\n\nSet ζ from a variable in physical space.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State; u, w)\n\n\nSet ζ from u and w. u and w may be a XZVariable, XCVariable/ XSVariable, FCVariable / FSVariable or a function specifying u(x,z) / w(x,z) pointwise. If not specified u and w default to 0.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#Domains","page":"Domains","title":"Domains","text":"","category":"section"},{"location":"library/domains/","page":"Domains","title":"Domains","text":"Modules = [SawyerEliassenSolver.Domains]\nPrivate = false\nPages = [\n    \"Domains/grid.jl\",\n    \"Domains/spectral.jl\",\n    \"Domains/transforms.jl\",\n    \"Domains/domain.jl\",\n    \"Domains/Domains.jl\"\n]","category":"page"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Grid","page":"Domains","title":"SawyerEliassenSolver.Domains.Grid","text":"struct Grid{T<:Union{Float32, Float64}}\n\nThe physical grid. x is uniformly spaced and periodic with the left boundary at x1 and the right boundary at xNX + 1 = x1 as is standard for DFTs. z is a standard DCT/DST type II grid – uniformly spaced interior points with the boundaries at z12 and zNZ + 12. The float type of the grid determines the float point precision of the simulation and since we use FFTW is restriced to Float32 or Float64.\n\nFields\n\nNX::Int64: Number of grid points in x\nNZ::Int64: Number of grid points in z\nx_bounds::Tuple{T, T} where T<:Union{Float32, Float64}: Lower and upper x bounds: x₀x₁)\nz_bounds::Tuple{T, T} where T<:Union{Float32, Float64}: Lower and upper z bounds: z₀z₁\n\n\n\n\n\n","category":"type"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Grid-NTuple{4, Any}","page":"Domains","title":"SawyerEliassenSolver.Domains.Grid","text":"Grid(NX, NZ, x_bounds, z_bounds) -> Any\n\n\n4 argument constructor for  Grid uses the default float type of Float64.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Grid-NTuple{5, Any}","page":"Domains","title":"SawyerEliassenSolver.Domains.Grid","text":"Grid(FT, NX, NZ, x_bounds, z_bounds) -> Grid\n\n\nCreate a physical Grid with float type FT and (NX,NZ) points. The lateral bounds, [x₀,x₁) are set with a 2-tuple x_bounds or a single number LX which is equivalent to passing (0, LX). Similarly, the vertical bounds [z₀,z₁] are set by the 2-tuple z_bounds or a height LZ equivalent to (-LZ, 0).\n\nExamples\n\njulia> grid = Grid(256,128,(-1000,1000),(-1,1))\nGrid{Float64}:\n  ├── NX: 256\n  ├── NZ: 128\n  ├─── x: [-1000,1000)\n  └─── z: [-1,1]\n\njulia> grid = Grid(Float32,256,128,(-1000,1000),10)\nGrid{Float32}:\n  ├── NX: 256\n  ├── NZ: 128\n  ├─── x: [-1000,1000)\n  └─── z: [-10,0]\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.gridpoints-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.gridpoints","text":"gridpoints(\n    grid::Grid\n) -> Tuple{Union{Base.ReshapedArray{Float32, 2, LinRange{Float32, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, LinRange{Float64, Int64}, Tuple{}}}, Union{Base.ReshapedArray{Float32, 2, LinRange{Float32, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, LinRange{Float64, Int64}, Tuple{}}}}\n\n\nGet both the x and z gridpoints, reshaped to size (NX,1) and (1,NZ) ready for broadcasting.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.stepsize-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.stepsize","text":"stepsize(\n    grid::Grid\n) -> Tuple{Union{Float32, Float64}, Union{Float32, Float64}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xgridpoints-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.xgridpoints","text":"xgridpoints(\n    grid::Grid\n) -> Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}\n\n\nLinRange of the x gridpoints.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xstepsize-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.xstepsize","text":"xstepsize(grid::Grid) -> Union{Float32, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zgridpoints-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.zgridpoints","text":"zgridpoints(\n    grid::Grid\n) -> Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}\n\n\nLinRange of the z gridpoints.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zstepsize-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.zstepsize","text":"zstepsize(grid::Grid) -> Union{Float32, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Domain","page":"Domains","title":"SawyerEliassenSolver.Domains.Domain","text":"struct Domain{T<:Union{Float32, Float64}}\n\nThe domain, both physical and spectral, on which a problem is defined. This struct also stores the FFTW plans for transforming between the physical and spectral representations of variables.\n\n\n\n\n\n","category":"type"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Domain-Union{Tuple{Grid{T}}, Tuple{T}} where T","page":"Domains","title":"SawyerEliassenSolver.Domains.Domain","text":"Domain(grid::Grid{T}; dealias_x, dealias_z) -> Domain\n\n\nConstruct a domain from a grid. To dealias the products with the background flow a number of the higher wavenumbers can be zeroed out. The number of retained wavenumbers are CNX = grid.NX ÷ 2 - dealias_x and CNZ = grid.NZ - 1 - dealias_z Note that we already drop the Nyquist wavenumber in x as well as the zeroth (barotropic) cosine mode / highest sine mode.\n\nExamples\n\nBuild an domain with no dealiasing.\n\njulia> grid = Grid(16,8,1,1);\n\njulia> domain = Domain(grid)\nDomain:\n  ├─────────── grid: Grid with eltype Float64 and size (16, 8)\n  ├─────── spectral: Spectral domain of size (9, 8) and spectral resolution (8, 7)\n  └───── transforms: FFTW transforms: rfft, type II DST and type II DCT.\n\nA domain with dealising in the vertical.\n\njulia> grid = Grid(16,8,1,1);\n\njulia> domain = Domain(grid, dealias_z=2)\nDomain:\n  ├─────────── grid: Grid with eltype Float64 and size (16, 8)\n  ├─────── spectral: Spectral domain of size (9, 8) and spectral resolution (8, 5)\n  └───── transforms: FFTW transforms: rfft, type II DST and type II DCT.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.consistent_domains-Tuple{Any, Vararg{Any}}","page":"Domains","title":"SawyerEliassenSolver.Domains.consistent_domains","text":"consistent_domains(a, B...) -> Bool\n\n\nCheck that these variables have the same domain.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.get_domain","page":"Domains","title":"SawyerEliassenSolver.Domains.get_domain","text":"Get the domain this object is defined over.\n\n\n\n\n\n","category":"function"},{"location":"library/domains/#SawyerEliassenSolver.Domains.gridpoints-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.gridpoints","text":"gridpoints(\n    domain::Domain\n) -> Tuple{Union{Base.ReshapedArray{Float32, 2, LinRange{Float32, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, LinRange{Float64, Int64}, Tuple{}}}, Union{Base.ReshapedArray{Float32, 2, LinRange{Float32, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, LinRange{Float64, Int64}, Tuple{}}}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.resolved_cosine_indices-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.resolved_cosine_indices","text":"resolved_cosine_indices(domain::Domain) -> UnitRange{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.resolved_fourier_indices-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.resolved_fourier_indices","text":"resolved_fourier_indices(domain::Domain) -> UnitRange{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.resolved_sine_indices-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.resolved_sine_indices","text":"resolved_sine_indices(domain::Domain) -> UnitRange{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.stepsize-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.stepsize","text":"stepsize(\n    domain::Domain\n) -> Tuple{Union{Float32, Float64}, Union{Float32, Float64}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.wavenumbers-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.wavenumbers","text":"wavenumbers(\n    domain::Domain\n) -> Tuple{Union{Base.ReshapedArray{Float32, 2, StepRangeLen{Float32, Float64, Float64, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{}}}, Union{Base.ReshapedArray{Float32, 2, StepRangeLen{Float32, Float64, Float64, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{}}}}\n\n\nResolved k_x and k_z reshaped to size (CNX,1) and (1,CNZ) ready for broadcasting.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.wavenumbers_full-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.wavenumbers_full","text":"wavenumbers_full(\n    domain::Domain\n) -> Tuple{Union{Base.ReshapedArray{Float32, 2, StepRangeLen{Float32, Float64, Float64, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{}}}, Union{Base.ReshapedArray{Float32, 2, StepRangeLen{Float32, Float64, Float64, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{}}}}\n\n\nk_x and k_z including unresolved zeroed-out wavenumbers reshaped to size (NX ÷ 2 + 1,1) and (1,NZ) ready for broadcasting.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xgridpoints-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.xgridpoints","text":"xgridpoints(\n    domain::Domain\n) -> Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xstepsize-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.xstepsize","text":"xstepsize(domain::Domain) -> Union{Float32, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xwavenumbers-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.xwavenumbers","text":"xwavenumbers(\n    domain::Domain\n) -> Union{StepRangeLen{Float32, Float64, Float64, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}\n\n\nThe resolved x wavenumbers k_x.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xwavenumbers_full-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.xwavenumbers_full","text":"xwavenumbers_full(\n    domain::Domain\n) -> Union{StepRangeLen{Float32, Float64, Float64, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}\n\n\nThe x wavenumbers k_x including unresolved zeroed-out wavenumbers.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zgridpoints-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.zgridpoints","text":"zgridpoints(\n    domain::Domain\n) -> Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zstepsize-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.zstepsize","text":"zstepsize(domain::Domain) -> Union{Float32, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zwavenumbers-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.zwavenumbers","text":"zwavenumbers(\n    domain::Domain\n) -> Union{StepRangeLen{Float32, Float64, Float64, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}\n\n\nThe resolved z wavenumbers k_z.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zwavenumbers_full-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.zwavenumbers_full","text":"zwavenumbers_full(\n    domain::Domain\n) -> Union{StepRangeLen{Float32, Float64, Float64, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}\n\n\nThe z wavenumbers k_z including unresolved zeroed-out wavenumbers.\n\n\n\n\n\n","category":"method"},{"location":"examples/variably_stratified_frontal_zone/#Variably-Stratified-Frontal-Zone","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/#Background-Flow","page":"Variably Stratified Frontal Zone","title":"Background Flow","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"beginaligned\n    V_x = 0 \n    B_x = fV_z = Gamma f^2  \n    B_z = leftPi_0^2 + left(Pi_infty^2 - Pi_0^2right)frac11 + mathrme^z + Drightf^2\nendaligned","category":"page"},{"location":"examples/variably_stratified_frontal_zone/#Initial-Conditions","page":"Variably Stratified Frontal Zone","title":"Initial Conditions","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"The streamfunction is specified as a wavepacket of the form","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi = Acos(kx + mz -omega t)","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"where A is a slowly varying amplitude that is neglected when constructing the initial conditions. The initial amplitude is","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"A(xz) = mathrme^-(lambda_x^2(x - x_0)^2 + lambda_z^2(z - z_0))2","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"The wavepacket is initialised in the top part of the domain where B_z = Pi_0^2f^2. k and m are chosen such that the wave has frequency omega = frac1sqrt2f. That is ","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"fracmk = fracGamma pm sqrtGamma^2 - left(Pi_0^2 - f^-2omega^2right)left(1 - f^-2omega^2right)left(1 - f^-2omega^2right)","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"Given the streamfunction we can compute u, w, v, and b by","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"beginaligned\n    u = -psi_z = mAsin(kx + mz - omega t)  \n    w = psi_x = -kAsin(kx + mz - omega t)  \n    v_t = -u(f + V_x) - wV_z implies v = leftfracfGamma komega - fracfmomegarightAcos(kx + mz - omega t)  \n    b_t = -uB_x - wB_z implies b = leftfracf^2Pi_0^2 komega - fracf^2Gamma momegarightAcos(kx + mz - omega t)\nendaligned","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi_t is then computed from the thermal wind imbalance","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi_t = left(fracpartial^2partial x^2 + fracpartial^2partial z^2right)^-1left(b_x - fv_zright)","category":"page"},{"location":"library/timesteppers/#Timesteppers","page":"Timesteppers","title":"Timesteppers","text":"","category":"section"},{"location":"library/timesteppers/","page":"Timesteppers","title":"Timesteppers","text":"Modules = [SawyerEliassenSolver.Timesteppers]\nPrivate = false","category":"page"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.AbstractPreconditioner","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.AbstractPreconditioner","text":"Abstract supertype for conjugate gradient preconditioners.\n\n\n\n\n\n","category":"type"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.DiagonalQuadraticPreconditioner","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.DiagonalQuadraticPreconditioner","text":"struct DiagonalQuadraticPreconditioner{T} <: AbstractPreconditioner{T}\n\nA preconditioner that approximates 𝓛ζ in spectral space by 𝓛ζ  (ω₀² k_z² + ω₁² k_x^2)  (k_x² + k_z²) ζ\n\nFields\n\ndomain::Domain{T} where T\nω₀²::Any\nω₁²::Any\n\n\n\n\n\n","category":"type"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.IdentityPreconditioner","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.IdentityPreconditioner","text":"struct IdentityPreconditioner{T} <: AbstractPreconditioner{T}\n\nThe default preconditioner for the conjugate gradient algorithm which does nothing.\n\n\n\n\n\n","category":"type"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.Timestepper","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.Timestepper","text":"struct Timestepper{T}\n\nObject that stores all the variables and operators required to advance a problem one timestep.\n\n\n\n\n\n","category":"type"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.Timestepper-Union{Tuple{T}, Tuple{Problem{T}, T}, Tuple{Problem{T}, T, Any}} where T","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.Timestepper","text":"Timestepper(problem::Problem{T}, h::T, [𝓟::AbstractPreconditioner]; c=nothing, cg_max_iterations=nothing, cg_tol=nothing)\n\nConstructor for Timestepper. The timestep h is required and a preconditioner may optionally be passed.\n\nKeyword arguments\n\nc: use a non-default value for the free parameter in the timestepping stepping scheme. See Sharp et al. (1990) for valid ranges of values.\ncg_max_iterations: maximum number of iterations for the conjugate gradient solver.\ncg_tol: tolerance for the conjugate gradient solver.\n\n\n\n\n\n","category":"method"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.advance!-Tuple{Timestepper, Integer}","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.advance!","text":"advance!(ts::Timestepper, n::Integer)\n\n\nAdvance the timestepper n timesteps.\n\n\n\n\n\n","category":"method"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.advance!-Tuple{Timestepper}","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.advance!","text":"advance!(ts::Timestepper)\n\n\nAdvance the timestepper one timestep.\n\n\n\n\n\n","category":"method"},{"location":"Sawyer-Eliassen equation/theory/#The-Sawyer-Eliassen-equation","page":"Theory","title":"The Sawyer-Eliassen equation","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"The Sawyer-Eliassen equation (Sawyer and Sutton, 1956; Eliassen, 1962) describes the ageostrophic overturning circulations at fronts. The derivation here largely follows Mooers (1975) although we allow for arbitary momentum and buoyancy forcing. Consider a 2D set-up with a buoyancy field B(xz) in thermal wind balance partial Bpartial x = fpartial Vpartial z with a geostrophic velocity V(xz). Assuming that perturbations from this state are also 2D the Boussinesq equations can be written.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginalign\n    fracpartial upartial t - fv + frac1rho_0fracpartial ppartial x  = mathcalF^(x)      \n    fracpartial vpartial t + ufracpartial Vpartial x + wfracpartial Vpartial z + fu  = mathcalF^(y) \n    fracpartial wpartial t + frac1rho_0fracpartial ppartial z - b  = mathcalF^(z) \n    fracpartial bpartial t + ufracpartial Bpartial x + wfracpartial Bpartial z  = mathcalB \n    fracpartial upartial x + fracpartial wpartial z  = 0\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"where the non-linear terms have been absorbed into the arbitary RHS forcing. Introducing a streamfunction psi such that u = -partialpsipartial z and w = partialpsipartial x we form the evolution equation for the component of vorticity into the page.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartialpsipartial t = fracpartial bpartial x - ffracpartial vpartial z + fracpartial mathcalF^(z)partial x - fracpartial mathcalF^(x)partial z\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"and the v and b perturbations are determined by ","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginalign\n    fracpartial vpartial t  = -mathcalJ(psiV + fx) + mathcalF^(y)  \n    fracpartial bpartial t  = -mathcalJ(psiB) + mathcalB\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"where mathcalJ(psi cdot) equiv (partialpsipartial x) partial partial z - (partialpsipartial z) partial partial x is advection by the perturbations.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"The dynamics are controlled by a single second-order in time equation for the stream-function","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartial^2psipartial t^2 = -fracpartial partial xmathcalJ(psiB) + ffracpartial partial zmathcalJ(psiV + fx) + mathfrakF(xzt)\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"where the forcing is ","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    mathfrakF(xzt) = fracpartial^2 mathcalF^(z)partial xpartial t - fracpartial^2 mathcalF^(x)partial zpartial t - ffracpartialmathcalF^(y)partial z + fracpartialmathcalBpartial x\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"In expanding the RHS some cancellations can be made thanks to the assumption of thermal wind balance and the Sawyer-Eliassen equation is reached","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartial^2psipartial t^2 = -fracpartial Bpartial zfracpartial^2psipartial x^2 + 2fracpartial Bpartial xfracpartial^2psipartial xpartial z - fleft(f + fracpartial Vpartial xright)fracpartial^2psipartial z^2 + mathfrakF(xzt)\nendequation","category":"page"},{"location":"examples/barotropic_niws/#Barotropic-NIWs","page":"Barotropic NIWs","title":"Barotropic NIWs","text":"","category":"section"},{"location":"library/SawyerEliassenSolver/#SawyerEliassenSolver","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver","text":"","category":"section"},{"location":"library/SawyerEliassenSolver/","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver","text":"The main module of this package. It reexports all the public names defined in its submodules.","category":"page"},{"location":"library/SawyerEliassenSolver/","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver","text":"Modules = [SawyerEliassenSolver]","category":"page"},{"location":"library/SawyerEliassenSolver/#SawyerEliassenSolver.SawyerEliassenSolver","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver.SawyerEliassenSolver","text":"SawyerEliassenSolver.jl – Solve the Sawyer-Eliassen equation using a pseudo-spectral discretisation and 3rd order accurate implicit timestepping for arbitrary balanced background flows.\n\nExports\n\nAbstractForcingFunction\nAbstractPreconditioner\nBackgroundFlow\nClock\nConstantOutputVariable\nDiagonalQuadraticPreconditioner\nDomain\nDomains\nFCVariable\nFSVariable\nFZVariable\nForcing\nGlobalPhysicalForcing\nGlobalSpectralForcing\nGrid\nIdentityPreconditioner\nNoForcing\nOutput\nOutputVariable\nOutputVariables\nOutputWriter\nPhysicalForcing\nPointwisePhysicalForcing\nPointwiseSpectralForcing\nProblem\nProblems\nScratch\nSpectralForcing\nState\nTimestepper\nTimesteppers\nVariables\nXCVariable\nXSVariable\nXZVariable\nadd_output_variables!\nadvance!\ncompute!\ncompute_ζₜ!\nconsistent_domains\ncosine_transform\ncosine_transform!\nget_Bx\nget_Bz\nget_Vx\nget_domain\nget_f\nget_iteration\nget_problem\nget_scratch\nget_time\nget_ζ_forcing\ngridpoints\nhorizontal_counterpart\nhorizontal_transform\nhorizontal_transform!\nintegrate_background_gradients\nresolved\nresolved_cosine_indices\nresolved_fourier_indices\nresolved_sine_indices\nset_b!\nset_v!\nset_vb!\nset_ζ!\nsine_transform\nsine_transform!\nstepsize\ntransform!\nwavenumbers\nwavenumbers_full\nwrite!\nwrite_Bx!\nwrite_Bz!\nwrite_Vx!\nwrite_attributes!\nwrite_background_buoyancy!\nwrite_background_flow!\nwrite_background_velocity!\nwrite_constant_array!\nwrite_f!\nxgridpoints\nxstepsize\nxwavenumbers\nxwavenumbers_full\nzgridpoints\nzstepsize\nzwavenumbers\nzwavenumbers_full\n∂x\n∂x!\n∂z\n∂z!\n∂z²\n∂z²!\n∇⁻²!\n∫dx\n∫dx!\n∫dz\n∫dz!\n∫dz²\n∫dz²!\n\n\n\n\n\n","category":"module"},{"location":"library/SawyerEliassenSolver/#SawyerEliassenSolver.__init__-Tuple{}","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver.__init__","text":"Initialise the SawyerEliassenSolver module.\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"library/variables/","page":"Variables","title":"Variables","text":"Modules = [SawyerEliassenSolver.Variables]\nPrivate = false","category":"page"},{"location":"library/variables/#SawyerEliassenSolver.Variables","page":"Variables","title":"SawyerEliassenSolver.Variables","text":"Module for different variable representations, transforms between representations and operators that act on variables.\n\nExports\n\nFCVariable\nFSVariable\nFZVariable\nXCVariable\nXSVariable\nXZVariable\ncosine_transform\ncosine_transform!\nhorizontal_counterpart\nhorizontal_transform\nhorizontal_transform!\nresolved\nsine_transform\nsine_transform!\ntransform!\n∂x\n∂x!\n∂z\n∂z!\n∂z²\n∂z²!\n∇⁻²!\n∫dx\n∫dx!\n∫dz\n∫dz!\n∫dz²\n∫dz²!\n\n\n\n\n\n","category":"module"},{"location":"library/variables/#SawyerEliassenSolver.Variables.FCVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.FCVariable","text":"A variable expressed in Fourier space in the horizontal and cosine space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.FSVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.FSVariable","text":"A variable expressed in Fourier space in the horizontal and sine space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.FZVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.FZVariable","text":"A variable expressed in Fourier space in the horizontal and physical space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.XCVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.XCVariable","text":"A variable expressed in physical space in the horizontal and cosine space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.XSVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.XSVariable","text":"A variable expressed in physical space in the horizontal and sine space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.XZVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.XZVariable","text":"A variable expressed in physical space in the horizontal and vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.cosine_transform","page":"Variables","title":"SawyerEliassenSolver.Variables.cosine_transform","text":"Transform the variable from physical space to cosine space or vice verse in the vertical.\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.cosine_transform!-Tuple{XCVariable, XZVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.cosine_transform!","text":"cosine_transform!(out::XCVariable, in::XZVariable)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.cosine_transform!-Tuple{XZVariable, XCVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.cosine_transform!","text":"cosine_transform!(out::XZVariable, in::XCVariable)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.horizontal_counterpart-Tuple{XZVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.horizontal_counterpart","text":"Return the fourier (physical) counterpart to a physical (fourier) variable.\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.horizontal_transform","page":"Variables","title":"SawyerEliassenSolver.Variables.horizontal_transform","text":"Transform the variable from physical space to Fourier space or vice verse in the horizontal.\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.horizontal_transform!-Tuple{Union{FCVariable{T}, FSVariable{T}, FZVariable{T}} where T, Union{XCVariable{T}, XSVariable{T}, XZVariable{T}} where T}","page":"Variables","title":"SawyerEliassenSolver.Variables.horizontal_transform!","text":"horizontal_transform!(\n    out::Union{FCVariable{T}, FSVariable{T}, FZVariable{T}} where T,\n    in::Union{XCVariable{T}, XSVariable{T}, XZVariable{T}} where T\n)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.horizontal_transform!-Tuple{Union{XCVariable{T}, XSVariable{T}, XZVariable{T}} where T, Union{FCVariable{T}, FSVariable{T}, FZVariable{T}} where T}","page":"Variables","title":"SawyerEliassenSolver.Variables.horizontal_transform!","text":"horizontal_transform!(\n    out::Union{XCVariable{T}, XSVariable{T}, XZVariable{T}} where T,\n    in::Union{FCVariable{T}, FSVariable{T}, FZVariable{T}} where T\n)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.resolved","page":"Variables","title":"SawyerEliassenSolver.Variables.resolved","text":"Return a view into the resolved wavenumbers.\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.sine_transform","page":"Variables","title":"SawyerEliassenSolver.Variables.sine_transform","text":"Transform the variable from physical space to sine space or vice verse in the vertical.\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.sine_transform!-Tuple{XSVariable, XZVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.sine_transform!","text":"sine_transform!(out::XSVariable, in::XZVariable)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.sine_transform!-Tuple{XZVariable, XSVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.sine_transform!","text":"sine_transform!(out::XZVariable, in::XSVariable)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.transform!-Tuple{SawyerEliassenSolver.Variables.AbstractVariable, SawyerEliassenSolver.Variables.AbstractVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.transform!","text":"Safe transforms with domain validation for public use.\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂x","page":"Variables","title":"SawyerEliassenSolver.Variables.∂x","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂x!","page":"Variables","title":"SawyerEliassenSolver.Variables.∂x!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂z","page":"Variables","title":"SawyerEliassenSolver.Variables.∂z","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂z!","page":"Variables","title":"SawyerEliassenSolver.Variables.∂z!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂z²","page":"Variables","title":"SawyerEliassenSolver.Variables.∂z²","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂z²!","page":"Variables","title":"SawyerEliassenSolver.Variables.∂z²!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∇⁻²!","page":"Variables","title":"SawyerEliassenSolver.Variables.∇⁻²!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dx","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dx","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dx!","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dx!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dz","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dz","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dz!","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dz!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dz²","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dz²","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dz²!","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dz²!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"EditURL = \"../../../examples/forced_secondary_circulation.jl\"","category":"page"},{"location":"literated/forced_secondary_circulation/#forced_secondary_circulation_example","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"This example demonstrates how to apply RHS forcing and how to create output variables.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"With the flow initially at rest we will apply forcing to the RHS of the vorticity equation and generate a secondary circulation. The forcing function will take the form","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"mathcalF(xzt) = mathcalSleft(fracxLfraczHright)sigmaleft(fracttauright)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"where L, H and tau are horizontal, vertical and temporal scales respectively. The spatial structure is given by a Gaussian,","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"mathcalS(xz) = expleft(-fracx^22 + fracz^22right)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"and the temporal part is given by (minus) the derivative of a Gaussian,","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"sigma(t) = texp(-t^2  2)","category":"page"},{"location":"literated/forced_secondary_circulation/#Load-packages","page":"Forced secondary circulation","title":"Load packages","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"using CairoMakie\nusing HDF5\nusing Printf\n\nusing SawyerEliassenSolver","category":"page"},{"location":"literated/forced_secondary_circulation/#Grid,-background-flow-and-domain","page":"Forced secondary circulation","title":"Grid, background flow and domain","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"We non-dimensionalise by the half-height of the domain and f. The background flow has uniform gradients and thus we require no dealiasing.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"const NX, NZ = 4096, 256\nconst LX::Float64 = 1000\nconst M²::Float64 = 100\nconst N²::Float64 = 1e5\n\ngrid = Grid(NX, NZ, (-LX / 2, LX / 2), (-1, 1))\n\nbackground_flow = BackgroundFlow(grid)\nbackground_flow.Bx .= M²\nbackground_flow.Bz .= N²\n\ndomain = Domain(grid);","category":"page"},{"location":"literated/forced_secondary_circulation/#Forcing","page":"Forced secondary circulation","title":"Forcing","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"zeta forcing can be applied in four different ways:","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"PointwisePhysicalForcing\nGlobalPhysicalForcing\nPointwiseSpectralForcing\nGlobalSpectralForcing","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Here we implement Pointwise Physical Forcing where we specify the forcing as a function of x, z and t. The function can also optionally accepted parameters as the final arguments. We specify the spatial and temporal parts of the RHS forcing as non-dimensional functions and then provide the length and time scales as parameters.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"@inline forcing_spatial(x, z) = exp(-(x^2 + z^2) / 2)\n@inline forcing_temporal(t) = t * exp(-t^2 / 2)\n@inline forcing(x, z, t, p) = forcing_spatial(x / p.L, z / p.H) * forcing_temporal(t / p.τ)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"forcing (generic function with 1 method)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"We now construct the RHS forcing for the domain by passing in the function and parameters. We choose a timescale of 3 inertial periods.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"const parameters = (; L=20.0, H=0.05, τ=6π)\nphysical_forcing = PointwisePhysicalForcing(domain, forcing, parameters)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"PointwisePhysicalForcing{Float64, @NamedTuple{L::Float64, H::Float64, τ::Float64}}(Domain{Float64}(Grid{Float64}(4096, 256, (-500.0, 500.0), (-1.0, 1.0)), SawyerEliassenSolver.Domains.Spectral{Float64}(2049, 256, 2048, 255, 0.006283185307179587, 1.5707963267948966), SawyerEliassenSolver.Domains.Transforms{Float64}(FFTW real-to-complex plan for 4096×256 array of Float64\n(rdft2-vrank>=1-x256/1\n  (rdft2-ct-dit/32\n    (hc2c-direct-32/124/1 \"hc2cfdftv_32_avx2\"\n      (rdft2-r2hc-direct-32 \"r2cf_32\")\n      (rdft2-r2hc01-direct-32 \"r2cfII_32\"))\n    (dft-direct-128-x16 \"n1fv_128_avx2\"))), FFTW r2r RODFT10 plan for 4096×256 array of Float64\n(rodft10e-r2hc-256-x4096\n  (rdft-ct-dit/16\n    (hc2hc-direct-16/30 \"hf_16\"\n      (rdft-r2hc-direct-r2c-16 \"r2cf_16\")\n      (rdft-r2hc01-direct-r2c-16 \"r2cfII_16\"))\n    (rdft-indirect-after\n      (rdft-r2hc-direct-r2c-16-x16 \"r2cf_16\")\n      (rdft-rank0-ip-sq/1-x16-x16)))), FFTW r2r REDFT10 plan for 4096×256 array of Float64\n(redft10e-r2hc-256-x4096\n  (rdft-ct-dit/16\n    (hc2hc-direct-16/30 \"hf_16\"\n      (rdft-r2hc-direct-r2c-16 \"r2cf_16\")\n      (rdft-r2hc01-direct-r2c-16 \"r2cfII_16\"))\n    (rdft-indirect-after\n      (rdft-r2hc-direct-r2c-16-x16 \"r2cf_16\")\n      (rdft-rank0-ip-sq/1-x16-x16)))))), Main.var\"##239\".forcing, (L = 20.0, H = 0.05, τ = 18.84955592153876))","category":"page"},{"location":"literated/forced_secondary_circulation/#Time-dependence-of-the-forcing","page":"Forced secondary circulation","title":"Time dependence of the forcing","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"fig = fig = Figure(; size=(1200, 400))\nLabel(fig[1, :], \"Forcing time dependence\"; tellwidth=false)\nax = Axis(\n    fig[2, :];\n    xlabel=L\"t \\ [\\text{inertial periods}]\",\n    ylabel=L\"\\sigma\\left(\\frac{t}{\\tau}\\right)\",\n)\ntime = 0.0:0.1:10.0\nlines!(ax, time, forcing_temporal.(time / 3))\nxlims!(ax, 0, 10)\nylims!(ax, 0, nothing)\n\ncurrent_figure() # hide\nfig","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"<img width=1200 height=400 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>","category":"page"},{"location":"literated/forced_secondary_circulation/#Setting-up-the-problem","page":"Forced secondary circulation","title":"Setting up the problem","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Now we pass in the forcing as a keyword argument when constructing the problem.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"problem = Problem(domain, background_flow; ζ_forcing=physical_forcing)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Problem:\n  ├─────────── domain: Domain with eltype Float64 and physical size (4096, 256)\n  ├─────── background: BackgroundFlow with f = 1 and Vx,Bx,Bz = 4096×256 Matrix{Float64}\n  ├──────── ζ_forcing: PointwisePhysicalForcing{Float64, @NamedTuple{L::Float64, H::Float64, τ::Float64}}\n  ├──────── v_forcing: NoForcing{Float64}\n  ├──────── b_forcing: NoForcing{Float64}\n  └──────────── state: ζ,ζₜ = 2049×256 FSVariable{Float64}, v,b = 4096×256 XZVariable{Float64}, clock = Clock(t = 0, iteration = 0)\n","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"We can also pass in PointwisePhysicalForcing or PointwiseSpectralForcing as keyword arguments v_forcing and b_forcing for v and b respectively.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"We don't need to set any initial conditions but we'll use a preconditioner.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"preconditioner = DiagonalQuadraticPreconditioner(domain, 1.0, N²)\nts = Timestepper(problem, 2π / 50, preconditioner)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Timestepper:\n  ├───────── problem: Problem{Float64}\n  ├──────── timestep: h = 0.12566\n  ├─────────────── 𝓒: SawyerEliassenSolver.Timesteppers.DIRKNCoefficients{Float64}\n  ├───────────── cgs: SawyerEliassenSolver.Timesteppers.ConjugateGradientSolver{Float64}\n  └─────────────── 𝓟: DiagonalQuadraticPreconditioner with ω₀² = 1, ω₁² = 1e+05\n","category":"page"},{"location":"literated/forced_secondary_circulation/#Output","page":"Forced secondary circulation","title":"Output","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Let's save u and w to visualise the overturning circulation that we're forcing. Also compute and save the background buoyancy.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"output_writer = OutputWriter(problem, \"forced_secondary_circulation.h5\"; overwrite=true)\nadd_output_variables!(\n    output_writer; u=OutputVariables.u(problem), w=OutputVariables.w(problem)\n)\nwrite_attributes!(\n    output_writer; f=1.0, M²=M², N²=N², L=parameters.L, H=parameters.H, tau=parameters.τ\n)\nwrite_background_buoyancy!(output_writer)\nwrite!(output_writer)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"[ Info: [389.10505836575874 1167.3151750972763 1945.5252918287938 2723.7354085603115 3501.9455252918287 4280.155642023346 5058.365758754864 5836.575875486382 6614.785992217899 7392.996108949416 8171.206225680934 8949.41634241245 9727.626459143969 10505.836575875486 11284.046692607004 12062.256809338522 12840.46692607004 13618.677042801557 14396.887159533075 15175.097276264592 15953.307392996108 16731.517509727626 17509.727626459146 18287.93774319066 19066.14785992218 19844.357976653697 20622.568093385213 21400.778210116732 22178.988326848248 22957.198443579768 23735.408560311284 24513.618677042803 25291.82879377432 26070.03891050584 26848.249027237354 27626.45914396887 28404.66926070039 29182.879377431906 29961.089494163425 30739.29961089494 31517.50972762646 32295.719844357976 33073.929961089496 33852.140077821015 34630.35019455253 35408.56031128405 36186.77042801557 36964.98054474708 37743.1906614786 38521.40077821012 39299.61089494164 40077.82101167315 40856.03112840467 41634.24124513619 42412.45136186771 43190.66147859922 43968.87159533074 44747.08171206226 45525.29182879377 46303.50194552529 47081.71206225681 47859.92217898833 48638.13229571984 49416.34241245136 50194.55252918288 50972.7626459144 51750.97276264591 52529.18287937743 53307.39299610895 54085.603112840465 54863.813229571984 55642.023346303504 56420.23346303502 57198.443579766536 57976.653696498055 58754.863813229575 59533.07392996109 60311.284046692606 61089.494163424126 61867.704280155645 62645.91439688716 63424.12451361868 64202.3346303502 64980.544747081716 65758.75486381323 66536.96498054476 67315.17509727627 68093.38521400778 68871.5953307393 69649.80544747082 70428.01556420233 71206.22568093386 71984.43579766537 72762.64591439688 73540.85603112841 74319.06614785992 75097.27626459143 75875.48638132296 76653.69649805447 77431.906614786 78210.11673151751 78988.32684824902 79766.53696498055 80544.74708171206 81322.95719844358 82101.1673151751 82879.37743190661 83657.58754863813 84435.79766536965 85214.00778210117 85992.21789883269 86770.4280155642 87548.63813229572 88326.84824902724 89105.05836575876 89883.26848249027 90661.4785992218 91439.6887159533 92217.89883268482 92996.10894941635 93774.31906614786 94552.52918287939 95330.7392996109 96108.94941634241 96887.15953307394 97665.36964980545 98443.57976653696 99221.78988326849 100000.0 100778.21011673151 101556.42023346304 102334.63035019455 103112.84046692608 103891.05058365759 104669.2607003891 105447.47081712063 106225.68093385214 107003.89105058365 107782.10116731518 108560.3112840467 109338.5214007782 110116.73151750973 110894.94163424124 111673.15175097277 112451.36186770428 113229.5719844358 114007.78210116732 114785.99221789883 115564.20233463035 116342.41245136187 117120.62256809339 117898.8326848249 118677.04280155642 119455.25291828794 120233.46303501946 121011.67315175098 121789.88326848249 122568.09338521402 123346.30350194553 124124.51361867704 124902.72373540857 125680.93385214008 126459.14396887159 127237.35408560312 128015.56420233463 128793.77431906616 129571.98443579767 130350.19455252918 131128.4046692607 131906.61478599222 132684.82490272375 133463.03501945524 134241.24513618677 135019.4552529183 135797.6653696498 136575.87548638132 137354.08560311285 138132.29571984435 138910.50583657587 139688.7159533074 140466.9260700389 141245.13618677043 142023.34630350195 142801.55642023348 143579.76653696498 144357.9766536965 145136.18677042803 145914.39688715953 146692.60700389105 147470.81712062258 148249.02723735408 149027.2373540856 149805.44747081713 150583.65758754863 151361.86770428016 152140.07782101168 152918.28793774318 153696.4980544747 154474.70817120624 155252.91828793773 156031.12840466926 156809.3385214008 157587.54863813228 158365.7587548638 159143.96887159534 159922.17898832686 160700.38910505836 161478.5992217899 162256.80933852142 163035.0194552529 163813.22957198444 164591.43968871597 165369.64980544747 166147.859922179 166926.07003891052 167704.28015564202 168482.49027237354 169260.70038910507 170038.91050583657 170817.1206225681 171595.33073929962 172373.54085603112 173151.75097276265 173929.96108949417 174708.17120622567 175486.3813229572 176264.59143968872 177042.80155642022 177821.01167315175 178599.22178988328 179377.4319066148 180155.6420233463 180933.85214007783 181712.06225680935 182490.27237354085 183268.48249027238 184046.6926070039 184824.9027237354 185603.11284046693 186381.32295719846 187159.53307392995 187937.74319066148 188715.953307393 189494.1634241245 190272.37354085603 191050.58365758756 191828.79377431906 192607.00389105058 193385.2140077821 194163.4241245136 194941.63424124513 195719.84435797666 196498.0544747082 197276.26459143969 198054.4747081712 198832.68482490274]\n","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Run the simulation.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"for ii in 1:100\n    advance!(ts, 5)\n    write!(output_writer)\nend","category":"page"},{"location":"literated/forced_secondary_circulation/#Movie","page":"Forced secondary circulation","title":"Movie","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"output = h5open(\"forced_secondary_circulation.h5\", \"r\") do h5\n    (\n        u=read_dataset(h5, \"u\"),\n        w=read_dataset(h5, \"w\"),\n        time=read_dataset(h5, \"time\"),\n        x=read_dataset(h5, \"x\"),\n        z=read_dataset(h5, \"z\"),\n        B=read_dataset(h5, \"B\"),\n    )\nend;\n\nn = Observable(1)\nuₙ = @lift output[:u][:, :, $n]\nwₙ = @lift output[:w][:, :, $n]\ntitle = @lift @sprintf \"t = %.2f inertial periods\" output[:time][$n] / 2π\n\nfig = Figure(; size=(1200, 400))\nLabel(fig[1, 1:2], title; tellwidth=false)\nax_u = Axis(fig[2, 1]; ylabel=\"z\")\nax_w = Axis(fig[2, 2]; xlabel=\"x\", ylabel=\"z\")\nlinkaxes!(ax_u, ax_w)\n\ncf_u = heatmap!(\n    ax_u, output[:x], output[:z], uₙ; colormap=:balance, colorrange=(-0.01, 0.01)\n)\nColorbar(fig[3, 1], cf_u; vertical=false, label=L\"u\", labelpadding=10)\ncontour!(ax_u, output[:x], output[:z], output[:B]; color=:black)\n\ncf_w = heatmap!(\n    ax_w, output[:x], output[:z], wₙ; colormap=:balance, colorrange=(-1e-4, 1e-4)\n)\nColorbar(fig[3, 2], cf_w; vertical=false, label=L\"w\", labelpadding=10)\ncontour!(ax_w, output[:x], output[:z], output[:B]; color=:black)\n\nrecord(fig, \"forced_secondary_circulation.mp4\", 1:length(output[:time]); framerate=10) do i\n    n[] = i\nend","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"\"forced_secondary_circulation.mp4\"","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"(Image: )","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Numerical-Solution","page":"Numerics","title":"Numerical Solution","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"The Sawyer-Eliassen equation can be written in the form","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\n    zeta_tt = -mathcalLzeta + F \nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"with the accompanying v and b equations","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginalign\n    v_t  = -u(f + V_x) - wV_z + mathcalF^(y)  \n    b_t  = -uB_x - wBz + mathcalB\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"where ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation*\n        u = -psi_z quad w = psi_x quad psi = nabla^-2zeta \nendequation*","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Pseudospectral-discretisation","page":"Numerics","title":"Pseudospectral discretisation","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"The Sawyer-Eliassen operator mathcalL varies in space but not time whereas the forcings are functions of space and time. We use a pseudospectral discretisation solving for zeta in spectral space. Enforcing the boundary conditions in z we express zeta in Fourier-sine modes. u and w are then computed in Fourier-cosine and Fourier-sine space respectively. Products between the background flow and waves are computed in physical space and a user prescribed number of the highest wavenumber modes are zeroed-out in order to dealias the solution. v and b only ever exist in physical space.","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Diagonally-Implicit-Runge-Kutta-Nyström","page":"Numerics","title":"Diagonally Implicit Runge-Kutta Nyström","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"We utilise a 2-stage 3rd-order accurate diagonally implicit Runge-Kutta Nyström (DIRKN) timestepping scheme due to Sharp et al. (1990). The state variables are advanced according to ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginalign\n    zeta^n+1  = zeta^n + h zeta_t + h^2 sum_j=1^2 b_j zeta_tt^n+c_j  \n    zeta_t^n+1  = zeta_t^n  + h sum_j=1^2 b_j^prime zeta_tt^n+c_j  \n    v^n+1  = v^n + h sum_j=1^2 b_j^prime v_t^n+c_j  \n    b^n+1  = b^n + h sum_j=1^2 b_j^prime b_t^n+c_j\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"with the intermediate stages defined by the implicit equations ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\n    zeta^n + c_j = zeta_n + c_j h zeta_t + h^2 sum_k=1^j a_jk zeta_tt^n + c_k\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"To solve, we define the implicit Sawyer-Eliassen operator mathcalL^I equiv I + h^2 a_ii mathcalL. As is typical of DIRKN schemes we take the diagonal elements a_11 and a_22 to be the same. Then we proceed by solving ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\n    mathcalL^Izeta^n + c_1 = zeta^n + c_1 h zeta_t^n + h^2 a_11 F^n + c_1\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"and then ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\n    mathcalL^Izeta^n + c_2 = zeta^n + c_2 h zeta_t^n + h^2 a_21 left( - mathcalLzeta^n + c_1 + F^n + c_1right) + h^2 a_22 F^n + c_2\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Coefficients","page":"Numerics","title":"Coefficients","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"Sharp et al. (1990) derive conditions under which the numerical scheme is 3rd order accurate. The coefficients form a one-parameter family which we write in terms of c = c_1.","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\nbegingathered\n    c_2 = frac3c - 23(2c-1) quad\n    a_11 = a_22 = frac12c^2 quad\n    a_21 = frac-2(9c^4 - 9c^3 + 3c - 1)9(2c-1)^2 \n    b_1 = frac1 - c4(3c^2 - 3c + 1) quad \n    b_2 = frac(3c-1)(2c-1)4(3c^2 - 3c + 1)  \n    b_1 = frac14(3c^2 - 3c + 1) quad \n    b_2 = frac3(2c-1)^24(3c^2 - 3c + 1)    \nendgathered\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"The numerical scheme is only R-stable (unconditionally stable when mathcalL is positive definite) for certain ranges of c. By default we use c = 1714.","category":"page"},{"location":"library/output/#Output","page":"Output","title":"Output","text":"","category":"section"},{"location":"library/output/","page":"Output","title":"Output","text":"Modules = [SawyerEliassenSolver.Output]\nPrivate = false","category":"page"},{"location":"library/output/#SawyerEliassenSolver.Output","page":"Output","title":"SawyerEliassenSolver.Output","text":"\n\n\n\n","category":"module"},{"location":"library/output/#SawyerEliassenSolver.Output.ConstantOutputVariable","page":"Output","title":"SawyerEliassenSolver.Output.ConstantOutputVariable","text":"struct ConstantOutputVariable{O, N} <: AbstractArray{O, N}\n\nA struct to output a constant (time independent) variable.\n\nFields\n\narray\ndimension_labels\n\narray is the array storing the data to be output. dimension_labels is a tuple of dimension labels. When added to an OutputWriter these labels are used to attach dimension scales (coordinates) to the output variable.\n\nnote: Note\nDimension labels are not required to be associated with a dimension scale. But if they are then the size of the dimension must match.\n\n\n\n\n\n","category":"type"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"struct OutputVariable{T, N, O, A} <: AbstractArray{O, N}\n\nA struct to create output variables.\n\nFields\n\nproblem\nfunc\ndimension_labels\noutput_array\nargs\n\nfunc is a function with signature     func(problem::Problem, output_array::AbstractArray{T,N}, args...) that computes the output field in-place in output_array. args are the arguments to func. dimension_labels is a tuple of dimension labels. When added to an OutputWriter these labels are used to attach dimension scales (coordinates) to the output variable.\n\nnote: Note\nDimension labels are not required to be associated with a dimension scale. But if they are then the size of the dimension must match.\n\n\n\n\n\n","category":"type"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{N}, Tuple{S}, Tuple{T}, Tuple{Problem{T}, Function, NamedTuple{S, NTuple{N, Integer}}, Type, Any}} where {T, S, N}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimensions::NamedTuple{S, NTuple{N, Integer}},\n    type::Type,\n    args\n) -> OutputVariable\n\n\nCreate an output variable specifying the dimension labels and sizes in a named tuple.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{N}, Tuple{S}, Tuple{T}, Tuple{Problem{T}, Function, NamedTuple{S, NTuple{N, Integer}}, Type}} where {T, S, N}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimensions::NamedTuple{S, NTuple{N, Integer}},\n    type::Type\n) -> OutputVariable{_A, _B, T, Tuple{}} where {_A, _B, T}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{N}, Tuple{T}, Tuple{Problem{T}, Function, NTuple{N, Union{Nothing, Symbol}}, NTuple{N, Integer}, Type, Any}} where {T, N}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimension_labels::NTuple{N, Union{Nothing, Symbol}},\n    sizes::NTuple{N, Integer},\n    type::Type,\n    args\n) -> OutputVariable\n\n\nCreate an output variable creating the output array of shape sizes and type type.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{N}, Tuple{T}, Tuple{Problem{T}, Function, NTuple{N, Union{Nothing, Symbol}}, NTuple{N, Integer}, Type}} where {T, N}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimension_labels::NTuple{N, Union{Nothing, Symbol}},\n    sizes::NTuple{N, Integer},\n    type::Type\n) -> OutputVariable{_A, _B, T, Tuple{}} where {_A, _B, T}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{O}, Tuple{N}, Tuple{T}, Tuple{Problem{T}, Function, NTuple{N, Union{Nothing, Symbol}}, AbstractArray{O, N}}} where {T, N, O}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimension_labels::NTuple{N, Union{Nothing, Symbol}},\n    output_array::AbstractArray{O, N}\n) -> OutputVariable{_A, _B, _C, Tuple{}} where {_A, _B, _C}\n\n\nCreate an output variable with a function that takes no additional arguments.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputWriter","page":"Output","title":"SawyerEliassenSolver.Output.OutputWriter","text":"struct OutputWriter{T, D}\n\nStruct for writing output to an HDF5 file.\n\n\n\n\n\n","category":"type"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputWriter-Union{Tuple{T}, Tuple{Problem{T}, String, NamedTuple}} where T","page":"Output","title":"SawyerEliassenSolver.Output.OutputWriter","text":"OutputWriter(\n    problem::Problem{T},\n    filepath::String,\n    coordinates::NamedTuple;\n    overwrite\n) -> OutputWriter{_A, NamedTuple{names, T}} where {_A, names, T<:Tuple}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputWriter-Union{Tuple{T}, Tuple{Problem{T}, String}} where T","page":"Output","title":"SawyerEliassenSolver.Output.OutputWriter","text":"OutputWriter(\n    problem::Problem{T},\n    filepath::String;\n    overwrite\n) -> OutputWriter{_A, NamedTuple{(:x, :z), var\"#s182\"}} where {_A, var\"#s182\"<:Tuple{Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}, Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.add_output_variables!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.add_output_variables!","text":"add_output_variables!(\n    output_writer::OutputWriter;\n    kwargs...\n)\n\n\nAdd OutputVariables to the OutputWriter. Excepts keyword arguments where the key is the name of the variable and the value an OutputVariable.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.compute!-Tuple{OutputVariable}","page":"Output","title":"SawyerEliassenSolver.Output.compute!","text":"compute!(output_variable::OutputVariable) -> Any\n\n\nCompute the output field in-place in output_variable.output_array.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.integrate_background_gradients-Tuple{XZVariable, XZVariable}","page":"Output","title":"SawyerEliassenSolver.Output.integrate_background_gradients","text":"integrate_background_gradients(\n    Bx::XZVariable,\n    Bz::XZVariable;\n    out\n) -> XZVariable\n\n\nIntegrate periodic background gradients.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write!","text":"write!(ow::OutputWriter)\n\n\nCompute and write the output variables to the output file.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_Bx!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_Bx!","text":"write_Bx!(output_writer::OutputWriter; name)\n\n\nWrite the current background B_x to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_Bz!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_Bz!","text":"write_Bz!(output_writer::OutputWriter; name)\n\n\nWrite the current background B_z to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_Vx!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_Vx!","text":"write_Vx!(output_writer::OutputWriter; name)\n\n\nWrite the current background V_x to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_attributes!-Tuple{OutputWriter, Vararg{Any}}","page":"Output","title":"SawyerEliassenSolver.Output.write_attributes!","text":"write_attributes!(ow::OutputWriter, attributes...)\n\n\nWrite attributes to the output file. Attributes should be provided as (key,value) or key => value where key can be converted to a string.\n\nwarning: Warning\nThis is just a thin wrapper around HDF5.write_attribute and will error if the value is not compatible with HDF5.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_attributes!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_attributes!","text":"write_attributes!(ow::OutputWriter; attributes...)\n\n\nWrite attributes to the output file providing the attributes as keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_background_buoyancy!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_background_buoyancy!","text":"write_background_buoyancy!(ow::OutputWriter; name)\n\n\nIntegrate the background buoyancy gradients and write to output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_background_flow!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_background_flow!","text":"write_background_flow!(ow::OutputWriter; f, Vx, Bx, Bz)\n\n\nWrite the background flow to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_background_velocity!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_background_velocity!","text":"write_background_velocity!(ow::OutputWriter; name)\n\n\nIntegrate the background velocity gradients and write to output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_constant_array!-Union{Tuple{N}, Tuple{T}, Tuple{OutputWriter, AbstractArray{T, N}, String}, Tuple{OutputWriter, AbstractArray{T, N}, String, NTuple{N, Union{Nothing, Symbol}}}} where {T, N}","page":"Output","title":"SawyerEliassenSolver.Output.write_constant_array!","text":"write_constant_array!(\n    output_writer::OutputWriter,\n    array::AbstractArray{T, N},\n    name::String\n)\nwrite_constant_array!(\n    output_writer::OutputWriter,\n    array::AbstractArray{T, N},\n    name::String,\n    dimension_labels::NTuple{N, Union{Nothing, Symbol}}\n)\n\n\nCreate a ConstantOutputVariable and write it to the file created by an OutputWriter in one go.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_f!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_f!","text":"write_f!(output_writer::OutputWriter; name)\n\n\nWrite the background f as an attribute to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#OutputVariables","page":"Output","title":"OutputVariables","text":"","category":"section"},{"location":"library/output/","page":"Output","title":"Output","text":"Modules = [SawyerEliassenSolver.Output.OutputVariables]\nPrivate = false","category":"page"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables","text":"Implementation of common output variables for the Sawyer-Eliassen solver.\n\nExports\n\nb\nu\nv\nw\n∂u∂x\n∂u∂z\n∂w∂x\n∂w∂z\n∂²u∂x²\n∂²u∂x∂z\n∂²u∂z²\n∂²w∂x²\n∂²w∂x∂z\n∂²w∂z²\n\n\n\n\n\n","category":"module"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.b-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.b","text":"b(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.u-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.u","text":"u(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.v-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.v","text":"v(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.w-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.w","text":"w(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂u∂x-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂u∂x","text":"∂u∂x(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂u∂z-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂u∂z","text":"∂u∂z(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂w∂x-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂w∂x","text":"∂w∂x(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂w∂z-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂w∂z","text":"∂w∂z(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²u∂x²-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²u∂x²","text":"∂²u∂x²(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²u∂x∂z-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²u∂x∂z","text":"∂²u∂x∂z(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²u∂z²-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²u∂z²","text":"∂²u∂z²(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²w∂x²-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²w∂x²","text":"∂²w∂x²(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²w∂x∂z-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²w∂x∂z","text":"∂²w∂x∂z(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²w∂z²-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²w∂z²","text":"∂²w∂z²(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/forcing/#Forcing","page":"Forcing","title":"Forcing","text":"","category":"section"},{"location":"library/forcing/","page":"Forcing","title":"Forcing","text":"Modules = [SawyerEliassenSolver.Forcing]\nPrivate = false","category":"page"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing","text":"Module for implementing different RHS forcings.\n\nExports\n\nAbstractForcingFunction\nGlobalPhysicalForcing\nGlobalSpectralForcing\nNoForcing\nPhysicalForcing\nPointwisePhysicalForcing\nPointwiseSpectralForcing\nSpectralForcing\n\n\n\n\n\n","category":"module"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.PhysicalForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.PhysicalForcing","text":"Union of types representing forcing in physical (XZ) space.\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.SpectralForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.SpectralForcing","text":"Union of types representing forcing in spectral (FS) space.\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.AbstractForcingFunction","page":"Forcing","title":"SawyerEliassenSolver.Forcing.AbstractForcingFunction","text":"Abstract super type for all forcings.\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.GlobalPhysicalForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.GlobalPhysicalForcing","text":"struct GlobalPhysicalForcing{T, P} <: AbstractForcingFunction{T}\n\nApply global forcing to the Sawyer-Eliassen equation in physical space. func is a function that updates the entire forcing variable in-place at time t. func should have signature func(F::XZVariable{T},t::T,params::P)::Nothing where {T<:Union{Float32,Float64}}.\n\nFields\n\ndomain::Domain{T} where T\nfunc::Function\nparams::Any\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.GlobalSpectralForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.GlobalSpectralForcing","text":"struct GlobalSpectralForcing{T, P} <: AbstractForcingFunction{T}\n\nApply global forcing to the Sawyer-Eliassen equation in spectral space. func is a function that updates the entire forcing variable in-place at time t. func should have signature func(F::FSVariable{T},t::T,params::P)::Nothing where {T<:Union{Float32,Float64}}. Note that the FSVariable{T} has entries of type Complex{T}.\n\nFields\n\ndomain::Domain{T} where T\nfunc::Function\nparams::Any\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.NoForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.NoForcing","text":"Type representing no forcing.\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.PointwisePhysicalForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.PointwisePhysicalForcing","text":"struct PointwisePhysicalForcing{T, P} <: AbstractForcingFunction{T}\n\nApply pointwise forcing to the Sawyer-Eliassen equation in physical space. func is a function that computes the forcing at a given position and time. func should have signature func(x::T,z::T,t::T,params::P)::T where {T<:Union{Float32,Float64}}.\n\nFields\n\ndomain::Domain{T} where T\nfunc::Function\nparams::Any\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.PointwiseSpectralForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.PointwiseSpectralForcing","text":"struct PointwiseSpectralForcing{T, P} <: AbstractForcingFunction{T}\n\nApply pointwise forcing to the Sawyer-Eliassen equation in spectral space. func is a function that computes the forcing at given wavenumbers and time. func should have signature func(kx::T,kz::T,t::T,params::P)::complex{T} where {T<:Union{Float32,Float64}}.\n\nFields\n\ndomain::Domain{T} where T\nfunc::Function\nparams::Any\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SawyerEliassenSolver","category":"page"},{"location":"#SawyerEliassenSolver","page":"Home","title":"SawyerEliassenSolver","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SawyerEliassenSolver.","category":"page"},{"location":"examples/baroclinic_vorticity_filament/#Baroclinic-Vorticity-Filament","page":"Baroclinic Vorticity Filament","title":"Baroclinic Vorticity Filament","text":"","category":"section"}]
}
