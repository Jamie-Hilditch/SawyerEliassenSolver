var documenterSearchIndex = {"docs":
[{"location":"examples/barotropic_niws/#Barotropic-NIWs","page":"Barotropic NIWs","title":"Barotropic NIWs","text":"","category":"section"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Eliassen, A. (1962). On the vertical circulation in frontal zones. Geofys. publ 24, 147–160.\n\n\n\nMooers, C. N. (1975). Several effects of a baroclinic current on the cross‐stream propagation of inertial‐internal waves. Geophysical Fluid Dynamics 6, 245–275.\n\n\n\nSawyer, J. S. and Sutton, O. G. (1956). The vertical circulation at meteorological fronts and its relation to frontogenesis. Proceedings of the Royal Society of London. Series A. Mathematical and Physical Sciences 234, 346–362.\n\n\n\n","category":"page"},{"location":"library/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Documentation for Sawyer-Eliassen Solver's public interface.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [SawyerEliassenSolver]\nPrivate = false\nPages = [\"SawyerEliassenSolver.jl\"]\nOrder = [:module]","category":"page"},{"location":"library/public/#SawyerEliassenSolver.SawyerEliassenSolver","page":"Public","title":"SawyerEliassenSolver.SawyerEliassenSolver","text":"SawyerEliassenSolver.jl – Solve the Sawyer-Eliassen equation using a pseudo-spectral discretisation and 3rd order accurate implicit timestepping for arbitrary balanced background flows.\n\nExports\n\n\n\n\n\n","category":"module"},{"location":"library/public/#Grid","page":"Public","title":"Grid","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [SawyerEliassenSolver]\nPrivate = false\nPages = [\"grid.jl\"]","category":"page"},{"location":"library/public/#SawyerEliassenSolver.Grid","page":"Public","title":"SawyerEliassenSolver.Grid","text":"struct Grid\n\nThe physical grid. x is uniformly spaced and periodic with the left boundary at x1 and the right boundary at xNX + 1 = x1 as is standard for DFTs. z is a standard DCT/DST type II grid – uniformly spaced interior points with the boundaries at z12 and zNZ + 12.\n\nFields\n\nNX::Int64: Number of grid points in x\nNZ::Int64: Number of grid points in z\nx_bounds::Tuple{Float64, Float64}: Lower and upper x bounds: x0x1)\nz_bounds::Tuple{Float64, Float64}: Lower and upper z bounds: z0z1\nx::Vector{Float64}: Vector of x gridpoints\nz::Vector{Float64}: Vector of z gridpoints\n\n\n\n\n\n","category":"type"},{"location":"library/public/#SawyerEliassenSolver.Grid-NTuple{4, Any}","page":"Public","title":"SawyerEliassenSolver.Grid","text":"Grid(NX, NZ, x_bounds, z_bounds) -> Grid\n\n\nCreate a physical Grid with (NX,NZ) points. The lateral bounds, [x0,x1) are set with a 2-tuple x_bounds or a width LX in which case x0 = 0, x1 = LX. The vertical bounds [z0,z1] are set by the 2-tuple z_bounds or a height LZ in which case z0 = -LZ, z1 = 0.\n\nExamples\n\njulia> grid = Grid(256,128,(-1000,1000),(-1,0))\nGrid:\n  ├── NX: 256\n  ├── NZ: 128\n  ├─── x: [-1000,1000)\n  └─── z: [-1,0]\n\n\n\n\n\n","category":"method"},{"location":"library/public/#SawyerEliassenSolver.Grid-Tuple{Any, Any, Any, Real}","page":"Public","title":"SawyerEliassenSolver.Grid","text":"Grid(NX, NZ, x_bounds, LZ::Real) -> Grid\n\n\nSee Grid(NX,NZ,x_bounds,z_bounds)\n\nExamples\n\njulia> grid = Grid(256,128,2000,(-1,0))\nGrid:\n  ├── NX: 256\n  ├── NZ: 128\n  ├─── x: [0,2000)\n  └─── z: [-1,0]\n\n\n\n\n\n","category":"method"},{"location":"library/public/#SawyerEliassenSolver.Grid-Tuple{Any, Any, Real, Any}","page":"Public","title":"SawyerEliassenSolver.Grid","text":"Grid(NX, NZ, LX::Real, z_bounds) -> Grid\n\n\nSee Grid(NX,NZ,x_bounds,z_bounds)\n\nExamples\n\njulia> grid = Grid(256,128,(-1000,1000),1)\nGrid:\n  ├── NX: 256\n  ├── NZ: 128\n  ├─── x: [-1000,1000)\n  └─── z: [-1,0]\n\n\n\n\n\n","category":"method"},{"location":"library/public/#SawyerEliassenSolver.Grid-Tuple{Any, Any, Real, Real}","page":"Public","title":"SawyerEliassenSolver.Grid","text":"Grid(NX, NZ, LX::Real, LZ::Real) -> Grid\n\n\nSee Grid(NX,NZ,x_bounds,z_bounds)\n\nExamples\n\njulia> grid = Grid(256,128,2000,1)\nGrid:\n  ├── NX: 256\n  ├── NZ: 128\n  ├─── x: [0,2000)\n  └─── z: [-1,0]\n\n\n\n\n\n","category":"method"},{"location":"library/public/#Background-Flow","page":"Public","title":"Background Flow","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [SawyerEliassenSolver]\nPrivate = false\nPages = [\"background.jl\"]","category":"page"},{"location":"library/public/#SawyerEliassenSolver.BackgroundFlow","page":"Public","title":"SawyerEliassenSolver.BackgroundFlow","text":"BackgroundFlow(grid::Grid) -> BackgroundFlow\nBackgroundFlow(grid::Grid, f::Float64) -> BackgroundFlow\n\n\nCreate a new BackgroundFlow given a Grid and Coriolis frequency f which defaults to 1. Background gradients are initialised to 0.\n\nExamples\n\ngrid = Grid(256,128,2000,1)\nbg = BackgroundFlow(grid)\n\n# output\nBackgroundFlow:\n  ├─── f: 1\n  ├── Vx: 256×128 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  ├── Bx: 256×128 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  └── Bz: 256×128 Matrix{Float64}\n          [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n\n\n\n\n\n","category":"type"},{"location":"library/public/#SawyerEliassenSolver.BackgroundFlow-2","page":"Public","title":"SawyerEliassenSolver.BackgroundFlow","text":"struct BackgroundFlow\n\nThe balanced background gradients. The background flow is in thermal wind balance and therefore assumed to be steady.\n\nFields\n\nf::Float64: Coriolis frequency f\nVx::Matrix{Float64}: Lateral shear partial Vpartial x\nBx::Matrix{Float64}: Horizontal buoyancy gradient partial Bpartial x = fpartial Vpartial z\nBz::Matrix{Float64}: Vertical buoyancy gradient partial Bpartial z\n\n\n\n\n\n","category":"type"},{"location":"library/public/#Problem","page":"Public","title":"Problem","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [SawyerEliassenSolver]\nPrivate = false\nPages = [\"problem.jl\"]","category":"page"},{"location":"library/public/#SawyerEliassenSolver.Problem","page":"Public","title":"SawyerEliassenSolver.Problem","text":"struct Problem\n\nComponents of a Sawyer-Eliassen problem.\n\nFields\n\ngrid::Grid\nbackground_flow::BackgroundFlow\nspectral_domain::SawyerEliassenSolver.SpectralDomain: Wavenumbers and metadata for spectral domain\ntransforms::SawyerEliassenSolver.Transforms: Transforms between physical and spectral space\nscratch::SawyerEliassenSolver.Scratch: Temporary working arrays\n\n\n\n\n\n","category":"type"},{"location":"library/public/#SawyerEliassenSolver.Problem-Tuple{Grid, BackgroundFlow}","page":"Public","title":"SawyerEliassenSolver.Problem","text":"Problem(\n    grid::Grid,\n    background_flow::BackgroundFlow;\n    dealias_x::Int=0,\n    dealias_z::Int=0\n) -> Problem\n\nSet-up a Sawyer-Eliassen problem. The Sawyer-Eliassen equation involves a product between the background gradients and the solution. For smooth background fields the aliasing is confined to just the highest wavenumbers. Dealiasing should be applied equal to the bandwidth of the background flow.\n\nKeyword arguments\n\ndealias_x: the number (default 0) of high-wavenumbers that are zero-ed out\ndealias_z: the number (default 0) of high-modes that are zero-ed out\n\nExamples\n\ngrid = Grid(256,128,2000,1)\nbg = BackgroundFlow(grid)\nproblem = Problem(grid,bg,dealias_x=10,dealias_z=10)\n\n# output\nProblem:\n  ├───────────── grid: Grid of size (256,128)\n  ├── background_flow: BackgroundFlow: f = 1, Vx,Bx,Bz = 256×128 Matrix{Float64}\n  ├── spectral_domain: SawyerEliassenSolver.SpectralDomain\n  ├─────── transforms: SawyerEliassenSolver.Transforms\n  └────────── scratch: SawyerEliassenSolver.Scratch\n\n\n\n\n\n","category":"method"},{"location":"library/public/#SawyerEliassenSolver.setup_simulation","page":"Public","title":"SawyerEliassenSolver.setup_simulation","text":"setup_simulation(\n    problem::Problem,\n    h\n) -> Tuple{Timestepper!, State}\nsetup_simulation(\n    problem::Problem,\n    h,\n    cg_tol::Union{Nothing, Float64}\n) -> Tuple{Timestepper!, State}\n\n\nConstruct the timestepper given a timestep h. Optionally modify the tolerance for the conjugate gradient solver.\n\nExamples\n\ngrid = Grid(256,128,2000,1)\nbg = BackgroundFlow(grid)\nproblem = Problem(grid,bg,dealias_x=10,dealias_z=10)\ntimestepper, state = setup_simulation(problem,0.1)\n\n# output\n[...]\n\n\n\n\n\n","category":"function"},{"location":"library/public/#Timestepper","page":"Public","title":"Timestepper","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [SawyerEliassenSolver]\nPrivate = false\nPages = [\"timestepper.jl\"]","category":"page"},{"location":"library/public/#SawyerEliassenSolver.Timestepper!","page":"Public","title":"SawyerEliassenSolver.Timestepper!","text":"struct Timestepper!\n\nTimesteps the state using a 2-stage 3rd order accurate Diagonally Implicit Runge-Kutta Nyström (DIRKN) scheme.\n\nFields\n\nstate::State\nh::Float64\nf1::Matrix{ComplexF64}\nf2::Matrix{ComplexF64}\nr::Matrix{ComplexF64}\nL!::SawyerEliassenSolver.SawyerEliassenRHS!\nupdate_v!::SawyerEliassenSolver.UpdateV!\nupdate_b!::SawyerEliassenSolver.UpdateB!\ncgs!::SawyerEliassenSolver.ConjugateGradientSolver!\n\n\n\n\n\n","category":"type"},{"location":"library/public/#SawyerEliassenSolver.Timestepper!-Tuple{Int64}","page":"Public","title":"SawyerEliassenSolver.Timestepper!","text":"Advance the state n timesteps\n\nExamples\n\n[...]\ntimestepper, state = setup_simulation(problem,0.1)\ntimestepper(10)\n\n\n\n\n\n","category":"method"},{"location":"library/public/#SawyerEliassenSolver.Timestepper!-Tuple{}","page":"Public","title":"SawyerEliassenSolver.Timestepper!","text":"Advance the state one timestep using the DIRKN scheme\n\nExamples\n\n[...]\ntimestepper, state = setup_simulation(problem,0.1)\ntimestepper()\n\n\n\n\n\n","category":"method"},{"location":"library/public/#Tools","page":"Public","title":"Tools","text":"","category":"section"},{"location":"library/public/#Output-Writer","page":"Public","title":"Output Writer","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [SawyerEliassenSolver.Tools]\nPrivate = false\nPages = [\"Tools/output_writer.jl\"]","category":"page"},{"location":"library/public/#SawyerEliassenSolver.Tools.write_attribute-Tuple{SawyerEliassenSolver.Tools.OutputWriter, Vararg{Pair{String}}}","page":"Public","title":"SawyerEliassenSolver.Tools.write_attribute","text":"Thin wrapper around HDF5.write_attribute\n\n\n\n\n\n","category":"method"},{"location":"library/public/#Wall-Time-Stop","page":"Public","title":"Wall Time Stop","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [SawyerEliassenSolver.Tools]\nPrivate = false\nPages = [\"Tools/wall_time_stop.jl\"]","category":"page"},{"location":"library/public/#Initial-Conditions","page":"Public","title":"Initial Conditions","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [SawyerEliassenSolver.Tools]\nPrivate = false\nPages = [\"Tools/initial_conditions.jl\"]","category":"page"},{"location":"library/public/#SawyerEliassenSolver.Tools.set_ψt!-Tuple{State, Problem}","page":"Public","title":"SawyerEliassenSolver.Tools.set_ψt!","text":"Compute ψt in spectral space from b and v in physical space\n\n\n\n\n\n","category":"method"},{"location":"examples/variably_stratified_frontal_zone/#Variably-Stratified-Frontal-Zone","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/#Background-Flow","page":"Variably Stratified Frontal Zone","title":"Background Flow","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"beginaligned\n    V_x = 0 \n    B_x = fV_z = Gamma f^2  \n    B_z = leftPi_0^2 + left(Pi_infty^2 - Pi_0^2right)frac11 + mathrme^z + Drightf^2\nendaligned","category":"page"},{"location":"examples/variably_stratified_frontal_zone/#Initial-Conditions","page":"Variably Stratified Frontal Zone","title":"Initial Conditions","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"The streamfunction is specified as a wavepacket of the form","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi = Acos(kx + mz -omega t)","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"where A is a slowly varying amplitude that is neglected when constructing the initial conditions. The initial amplitude is","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"A(xz) = mathrme^-(lambda_x^2(x - x_0)^2 + lambda_z^2(z - z_0))2","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"The wavepacket is initialised in the top part of the domain where B_z = Pi_0^2f^2. k and m are chosen such that the wave has frequency omega = frac1sqrt2f. That is ","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"fracmk = fracGamma pm sqrtGamma^2 - left(Pi_0^2 - f^-2omega^2right)left(1 - f^-2omega^2right)left(1 - f^-2omega^2right)","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"Given the streamfunction we can compute u, w, v, and b by","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"beginaligned\n    u = -psi_z = mAsin(kx + mz - omega t)  \n    w = psi_x = -kAsin(kx + mz - omega t)  \n    v_t = -u(f + V_x) - wV_z implies v = leftfracfGamma komega - fracfmomegarightAcos(kx + mz - omega t)  \n    b_t = -uB_x - wB_z implies b = leftfracf^2Pi_0^2 komega - fracf^2Gamma momegarightAcos(kx + mz - omega t)\nendaligned","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi_t is then computed from the thermal wind imbalance","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi_t = left(fracpartial^2partial x^2 + fracpartial^2partial z^2right)^-1left(b_x - fv_zright)","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Numerical-Solution","page":"Numerics","title":"Numerical Solution","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"The Sawyer-Eliassen equation and the accompanying v and b equations can be written in the form","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginalign\n    psi_tt  = -mathcalL_psipsi + nabla^-2mathfrakF \n    v_t  = mathcalL_vpsi + mathcalF^(y)  \n    b_t  = mathcalL_bpsi + mathcalB\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"where mathcalL_psi, mathcalL_v and mathcalL_b are spatially varying but constant in time linear differential operators. The forcing functions mathfrakF, mathcalF^(y) and mathcalB can be functions of space and time.","category":"page"},{"location":"library/internals/#Internal-Documentation","page":"Internals","title":"Internal Documentation","text":"","category":"section"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"Documentation for Sawyer-Eliassen Solver's internal workings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SawyerEliassenSolver","category":"page"},{"location":"#SawyerEliassenSolver","page":"Home","title":"SawyerEliassenSolver","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SawyerEliassenSolver.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/#The-Sawyer-Eliassen-equation","page":"Theory","title":"The Sawyer-Eliassen equation","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"The Sawyer-Eliassen equation (Sawyer and Sutton, 1956; Eliassen, 1962) describes the ageostrophic overturning circulations at fronts. The derivation here largely follows Mooers (1975) although we allow for arbitary momentum and buoyancy forcing. Consider a 2D set-up with a buoyancy field B(xz) in thermal wind balance partial Bpartial x = fpartial Vpartial x with a geostrophic velocity V(xz). Assuming that perturbations from this state are also 2D the Boussinesq equations can be written.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginalign\n    fracpartial upartial t - fv + frac1rho_0fracpartial ppartial x  = mathcalF^(x)      \n    fracpartial vpartial t + ufracpartial Vpartial x + wfracpartial Vpartial z + fu  = mathcalF^(y) \n    fracpartial wpartial t + frac1rho_0fracpartial ppartial z - b  = mathcalF^(z) \n    fracpartial bpartial t + ufracpartial Bpartial x + wfracpartial Bpartial z  = mathcalB \n    fracpartial upartial x + fracpartial wpartial z  = 0\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"where the non-linear terms have been absorbed into the arbitary RHS forcing. Introducing a streamfunction psi such that u = -partialpsipartial z and w = partialpsipartial x we form the evolution equation for the component of vorticity into the page.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation labeleqderivation-vorticity-evolution\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartialpsipartial t = fracpartial bpartial x - ffracpartial vpartial z + fracpartial mathcalF^(x)partial x - fracpartial mathcalF^(z)partial z\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"and the v and b perturbations are determined by ","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginalign\n    fracpartial vpartial t  = -mathcalJ(psiV + fx) + mathcalF^(y)  \n    fracpartial bpartial t  = -mathcalJ(psiB) + mathcalB\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"where mathcalJ(psi cdot) equiv (partialpsipartial x) partial partial z - (partialpsipartial z) partial partial x is advection by the perturbations.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"The dynamics are controlled by a single second-order in time equation for the stream-function","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartial^2psipartial t^2 = -fracpartial partial xmathcalJ(psiB) + ffracpartial partial zmathcalJ(psiV + fx) + fracpartial^2 mathcalF^(x)partial xpartial t - fracpartial^2 mathcalF^(z)partial zpartial t - ffracpartialmathcalF^(y)partial z + fracpartialmathcalBpartial x\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"In expanding the RHS some cancellations can be made thanks to the assumption of thermal wind balance and the Sawyer-Eliassen equation is reached","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartial^2psipartial t^2 = -fracpartial Bpartial zfracpartial^2psipartial x^2 + 2fracpartial Bpartial xfracpartial^2psipartial xpartial z - fleft(f + fracpartial Vpartial xright)fracpartial^2psipartial z^2 + mathfrakF(xzt)\nendequation","category":"page"},{"location":"examples/baroclinic_vorticity_filament/#Baroclinic-Vorticity-Filament","page":"Baroclinic Vorticity Filament","title":"Baroclinic Vorticity Filament","text":"","category":"section"}]
}
