var documenterSearchIndex = {"docs":
[{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"EditURL = \"../../../examples/barotropic_zeta_refraction.jl\"","category":"page"},{"location":"literated/barotropic_zeta_refraction/#barotropic_zeta_refraction_example","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"This example demonstrates how to apply dealiasing, explores different variable representations and uses a preconditioner to speed up the iterative solver.","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Grid","page":"Barotropic zeta refraction","title":"Grid","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"The first step is to load the packages and then create a grid. Here the grid is non-dimensionalised by the half-width of the domain.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"using CairoMakie\nusing HDF5\nusing Printf\n\nusing SawyerEliassenSolver\n\nusing SpecialFunctions: erf","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"NX, NZ = 128, 512\nconst LX, LZ = 2, 0.1\ngrid = Grid(NX, NZ, (-LX / 2, LX / 2), LZ)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Grid{Float64}:\n  ├── NX: 128\n  ├── NZ: 512\n  ├─── x: [-1,1)\n  └─── z: [-0.1,0]\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Background-Flow","page":"Barotropic zeta refraction","title":"Background Flow","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"The background flow is barotropic with constant stratification N^2 = 200^2f^2 but spatially varying vorticity. We are modelling a cyclonic Gaussian filament in an otherwise anticyclonic flow. Non-dimensionalising by f the lateral shear is given by","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"V_x = Roleft(-1 + 2L^-1mathrme^-pi x^2L^2right)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"where Ro = 05 is the Rossby number of the anticyclonic region and L = 02 is the half-width of the Gaussian filament.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"const N²::Float64 = 200^2\nconst Ro = 0.5\nconst L = 0.2\nVx(x) = Ro * (-1 + 2 / L * exp(-π * x^2 / L^2));","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We create a background flow with the default f = 1.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"xgrid, zgrid = gridpoints(grid)\nbackground_flow = BackgroundFlow(grid)\nbackground_flow.Vx .= Vx.(xgrid);\nbackground_flow.Bz .= N²;","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Dealiasing","page":"Barotropic zeta refraction","title":"Dealiasing","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"The background flow is spatially varying and so it is a good idea to dealias by zeroing out the highest wavenumbers. This is done when creating the Domain. Here we drop the highest 10 wavenumbers in the horizontal.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"const dealias = 10\ndomain = Domain(grid; dealias_x=dealias)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Domain:\n  ├─────────── grid: Grid with eltype Float64 and size (128, 512)\n  ├─────── spectral: Spectral domain of size (65, 512) and spectral resolution (54, 511)\n  └───── transforms: FFTW transforms: rfft, type II DST and type II DCT.\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Variables","page":"Barotropic zeta refraction","title":"Variables","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Let's visualise the background flow in both physical and Fourier space. We can do this by creating an XZVariable and then transforming in the horizontal.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Vx_physical = XZVariable(domain)\nVx_physical .= background_flow.Vx\nVx_fourier = horizontal_transform(Vx_physical);\nsummary(Vx_fourier)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"\"65×512 FZVariable{Float64}\"","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Notice that Vx_fourier is an FZVariable. Variables can be any of six types determined by their horizontal and vertical representations. The six types are","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"XZVariable - physical in horizontal and vertical\nFZVariable - Fourier in horizontal, physical in vertical\nXSVariable - physical in horizontal, sine in vertical\nFSVariable - Fourier in horizontal, sine in vertical\nXCVariable - physical in horizontal, cosine in vertical\nFCVariable - Fourier in horizontal, cosine in vertical","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Furthermore, the functions horizontal_transform, sine_transform, cosine_transform, and the corresponding inplace versions horizontal_transform!, sine_transform!, cosine_transform!, can be used to transform between these representations.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Let's plot the background flow as a function of x and its power spectrum as a function of horizontal wavenumber k_x. We also indicate where the 10th wavenumber is.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"kx = xwavenumbers_full(domain)\n\nfig = Figure(; size=(1200, 600))\nLabel(fig[1, 1], \"Gaussian vorticity filament\"; tellwidth=false)\nax_physical = Axis(fig[2, 1]; xlabel=L\"x\", ylabel=L\"V_x\")\nlines!(ax_physical, xgrid[:, 1], Vx_physical[:, 1]; color=:black)\nxlims!(ax_physical, -1, 1)\n\nax_spectral = Axis(fig[3, 1]; xlabel=L\"k_x\", ylabel=L\"\\Phi_{V_x}\")\nscatterlines!(ax_spectral, kx, abs2.(Vx_fourier[:, 1]); color=:black)\nvlines!(ax_spectral, kx[dealias]; color=:red)\nxlims!(ax_spectral, 0, 200)\n\ncurrent_figure() # hide\nfig","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"<img width=1200 height=600 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We see that all the power of the background flow is contained in the first 10 wavenumbers and that our dealiasing will be sufficient.","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Initial-Conditions","page":"Barotropic zeta refraction","title":"Initial Conditions","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We initialise a slab of across-front velocity","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"u_0 = frac12left(1 + mathrmerfleft(3 + frac2 zHright)right)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"where H = 2times10^-3.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"const H = 2e-3\nu₀(x, z) = 0.5 * (1 + erf(3 + 2 * z / H));","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"problem = Problem(domain, background_flow)\nset_ζ!(problem; u=u₀)","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Preconditioning","page":"Barotropic zeta refraction","title":"Preconditioning","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We can speed up the iterative solver by using a preconditioner. Here we use a DiagonalQuadraticPreconditioner This preconditioner approximates the Sawyer-Eliassen equation in spectral space by","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"mathcalLzeta approx left(omega_0^2 k_z^2 + omega_1^2 k_x^2right)  (k_x^2 + k_z^2) zeta","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Here we set omega_0^2 = 1 and omega_1^2 = N².","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"ω₀² = 1.0\nω₁² = N²\npreconditioner = DiagonalQuadraticPreconditioner(domain, ω₀², ω₁²)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"DiagonalQuadraticPreconditioner:\n  ├───────── domain: Domain with eltype Float64 and physical size (128, 512)\n  ├──────────── ω₀²: 1\n  └──────────── ω₁²: 40000\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Then we create a timestepper with timestep Delta t = 2pi  f  50.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"ts = Timestepper(problem, 2π / 50, preconditioner)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Timestepper:\n  ├───────── problem: Problem{Float64, NoForcing{Float64}, NoForcing{Float64}, NoForcing{Float64}}\n  ├──────── timestep: h = 0.12566\n  ├─────────────── 𝓒: SawyerEliassenSolver.Timesteppers.DIRKNCoefficients{Float64}\n  ├───────────── cgs: SawyerEliassenSolver.Timesteppers.ConjugateGradientSolver{Float64}\n  └─────────────── 𝓟: DiagonalQuadraticPreconditioner with ω₀² = 1, ω₁² = 40000\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Output","page":"Barotropic zeta refraction","title":"Output","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Save u, v, w, b and uz every 5 timesteps. We'll also save the background flow as ConstantOutputVariables using write_background_flow!.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"output_writer = OutputWriter(problem, \"barotropic_zeta_refraction.h5\"; overwrite=true)\nadd_output_variables!(\n    output_writer;\n    u=OutputVariables.u(problem),\n    v=OutputVariables.v(problem),\n    w=OutputVariables.w(problem),\n    b=OutputVariables.b(problem),\n    ∂u∂z=OutputVariables.∂u∂z(problem),\n)\nwrite_background_flow!(output_writer)\nwrite_attributes!(output_writer; Ro=Ro, L=L, H=H)\nwrite!(output_writer)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Run the simulation for 10 inertial periods.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"for _ in 1:100\n    advance!(ts, 5)\n    write!(output_writer)\nend","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Visualise-the-solution","page":"Barotropic zeta refraction","title":"Visualise the solution","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We'll plot the across-filament vertical shear and the wave energy density","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"mathcalE = frac12left(u^2 + v^2 + w^2 + b^2N^2right)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"in the top 25% of the domain. We'll also contour the background vorticity V_x","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"z_idx = (3 * NZ ÷ 4):NZ\n\noutput = h5open(\"barotropic_zeta_refraction.h5\", \"r\") do h5\n    u = h5[\"u\"][:, z_idx, :]\n    v = h5[\"v\"][:, z_idx, :]\n    w = h5[\"w\"][:, z_idx, :]\n    b = h5[\"b\"][:, z_idx, :]\n    E = (u .^ 2 .+ v .^ 2 .+ w .^ 2 .+ b .^ 2 / N²) / 2\n    Vx = h5[\"Vx\"][:, z_idx]\n    (\n        E=E,\n        ∂u∂z=h5[\"∂u∂z\"][:, z_idx, :],\n        Vx=Vx,\n        time=read_dataset(h5, \"time\"),\n        x=read_dataset(h5, \"x\"),\n        z=h5[\"z\"][z_idx],\n    )\nend;","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"n = Observable(1)\n∂u∂zₙ = @lift output[:∂u∂z][:, :, $n]\nEₙ = @lift output[:E][:, :, $n]\ntitle = @lift @sprintf \"t = %.2f inertial periods\" output[:time][$n] / 2π\n\nfig = Figure(; size=(1200, 400))\nLabel(fig[1, 1:2], title; tellwidth=false)\nax_∂u∂z = Axis(fig[2, 1]; ylabel=\"z\")\nax_E = Axis(fig[2, 2]; xlabel=\"x\", ylabel=\"z\")\nlinkaxes!(ax_∂u∂z, ax_E)\n\ncontour_levels = 0:1:4\n\ncf_∂u∂z = heatmap!(\n    ax_∂u∂z, output[:x], output[:z], ∂u∂zₙ; colormap=:balance, colorrange=(-1000, 1000)\n)\nColorbar(\n    fig[3, 1], cf_∂u∂z; vertical=false, label=L\"\\partial u/\\partial z\", labelpadding=10\n)\ncontour!(\n    ax_∂u∂z,\n    output[:x],\n    output[:z],\n    output[:Vx];\n    levels=contour_levels,\n    color=:black,\n    labels=true,\n)\n\ncf_E = heatmap!(\n    ax_E, output[:x], output[:z], Eₙ; colormap=Reverse(:grays), colorrange=(0, 0.5)\n)\nColorbar(fig[3, 2], cf_E; vertical=false, label=L\"\\mathcal{E}\", labelpadding=10)\ncontour!(\n    ax_E,\n    output[:x],\n    output[:z],\n    output[:Vx];\n    levels=contour_levels,\n    color=:black,\n    labels=true,\n)\n\nrecord(fig, \"barotropic_zeta_refraction.mp4\", 1:length(output[:time]); framerate=10) do i\n    n[] = i\nend","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"(Image: )","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Performance-with-and-without-preconditioning","page":"Barotropic zeta refraction","title":"Performance with and without preconditioning","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Let's time how long it takes to run 10 inertial periods with and without preconditioning. First create a clean problem.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"function setup_problem()\n    grid = Grid(NX, NZ, (-LX / 2, LX / 2), LZ)\n    domain = Domain(grid; dealias_x=dealias)\n    xgrid, zgrid = gridpoints(grid)\n    background_flow = BackgroundFlow(grid)\n    background_flow.Vx .= Vx.(xgrid)\n    background_flow.Bz .= N²\n    problem = Problem(domain, background_flow)\n    set_ζ!(problem; u=u₀)\n    return domain, problem\nend;","category":"page"},{"location":"literated/barotropic_zeta_refraction/#Without-preconditioning","page":"Barotropic zeta refraction","title":"Without preconditioning","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"Create the timestepper and advance 1 step before timing.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"domain, problem = setup_problem()\nts = Timestepper(problem, 2π / 50)\nadvance!(ts)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"@time advance!(ts, 500)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"197.492286 seconds (4.00 k allocations: 125.000 KiB)\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/#With-preconditioning","page":"Barotropic zeta refraction","title":"With preconditioning","text":"","category":"section"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"domain, problem = setup_problem()\npreconditioner = DiagonalQuadraticPreconditioner(domain, ω₀², ω₁²)\nts = Timestepper(problem, 2π / 50, preconditioner)\nadvance!(ts)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"@time advance!(ts, 500)","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":" 15.489727 seconds (4.00 k allocations: 125.000 KiB)\n","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"We see that the preconditioner speeds up the simulation by more than a factor of 10. This is because the preconditioner drastically reduces the number of iterations required by the iterative solver from approximately 150 to 3.","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"","category":"page"},{"location":"literated/barotropic_zeta_refraction/","page":"Barotropic zeta refraction","title":"Barotropic zeta refraction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Eliassen, A. (1962). On the vertical circulation in frontal zones. Geofys. publ 24, 147–160.\n\n\n\nMooers, C. N. (1975). Several effects of a baroclinic current on the cross‐stream propagation of inertial‐internal waves. Geophysical Fluid Dynamics 6, 245–275.\n\n\n\nSawyer, J. S. and Sutton, O. G. (1956). The vertical circulation at meteorological fronts and its relation to frontogenesis. Proceedings of the Royal Society of London. Series A. Mathematical and Physical Sciences 234, 346–362.\n\n\n\nSharp, P. W.; Fine, J. M. and Burrage, K. (1990). Two-stage and Three-stage Diagonally Implicit Runge-Kutta Nyström Methods of Orders Three and Four. IMA Journal of Numerical Analysis 10, 489–504.\n\n\n\n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"EditURL = \"../../../examples/near-inertial_waves.jl\"","category":"page"},{"location":"literated/near-inertial_waves/#near-inertial_waves_example","page":"Near-inertial waves","title":"Near-inertial waves","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"This simple example demonstrates how to set up and run a simulation with SawyerEliassenSolver.","category":"page"},{"location":"literated/near-inertial_waves/#Setting-up-a-problem","page":"Near-inertial waves","title":"Setting up a problem","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"First load the SawyerEliassenSolver and the other packages we need.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"using CairoMakie\nusing HDF5\nusing Printf\nusing Statistics\n\nusing SawyerEliassenSolver","category":"page"},{"location":"literated/near-inertial_waves/#Grid","page":"Near-inertial waves","title":"Grid","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The first step is to create a grid. The grids are periodic in x and bounded in z. Let's simulate some near-inertial waves in a domain of depth 1 km and width 250 km.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"NX, NZ = 128, 64\nconst LX, LZ = 250, 1\ngrid = Grid(NX, NZ, (-LX / 2, LX / 2), LZ)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Grid{Float64}:\n  ├── NX: 128\n  ├── NZ: 64\n  ├─── x: [-125,125)\n  └─── z: [-1,0]\n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Some remarks on the grid:","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Here we use the default floating point precision of Float64.\nAlternatively, we could use Float32 by creating the grid with grid = Grid(Float32, NX, NZ, (-LX/2,LX/2), LZ).\nThe choice of precision here propagates through the entire simulation.\nWe specified the x extent with a tuple of bounds but the z extent with a single depth value. Passing a the width / depth is equivalent to passing a tuple of (0, LX) / (-LZ, 0) for x and z respectively.","category":"page"},{"location":"literated/near-inertial_waves/#Background-Flow","page":"Near-inertial waves","title":"Background Flow","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"With a grid we can now create a background flow. When creating the background flow let's set the Coriolis frequency to a typical midlatitude value of 10^-4mathrms^-1.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"const f = 1e-4\nbackground_flow = BackgroundFlow(grid, f)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"BackgroundFlow:\n  ├─── f: 0.0001\n  ├── Vx: 128×64 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  ├── Bx: 128×64 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  └── Bz: 128×64 Matrix{Float64}\n          [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The background flow is initialised to zeros. For our simple example, let's use a constant background stratification of 10^-4mathrms^-2","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"const N² = 1e-4\nbackground_flow.Bz .= N²;","category":"page"},{"location":"literated/near-inertial_waves/#Domain","page":"Near-inertial waves","title":"Domain","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Now we create a Domain. The Domain object contains not just the grid but also details of the spectral domain and the transforms between the different representations. When creating a Domain we can specify the number of high wavenumbers to zero-out inorder to dealias the products with the background flow. In this example the background flow is constant and so we do not need to worry about dealiasing.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"domain = Domain(grid)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Domain:\n  ├─────────── grid: Grid with eltype Float64 and size (128, 64)\n  ├─────── spectral: Spectral domain of size (65, 64) and spectral resolution (64, 63)\n  └───── transforms: FFTW transforms: rfft, type II DST and type II DCT.\n","category":"page"},{"location":"literated/near-inertial_waves/#Problem","page":"Near-inertial waves","title":"Problem","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The next step is to define a Problem. A problem consists of a domain, background flow and forcing. We leave forcing for a later example and thus create the problem with","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"problem = Problem(domain, background_flow)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Problem:\n  ├─────────── domain: Domain with eltype Float64 and physical size (128, 64)\n  ├─────── background: BackgroundFlow with f = 0.0001 and Vx,Bx,Bz = 128×64 Matrix{Float64}\n  ├──────── ζ_forcing: NoForcing{Float64}\n  ├──────── v_forcing: NoForcing{Float64}\n  ├──────── b_forcing: NoForcing{Float64}\n  └──────────── state: ζ,ζₜ = 65×64 FSVariable{Float64}, v,b = 128×64 XZVariable{Float64}, clock = Clock(t = 0, iteration = 0)\n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The problem object also contains the current state of the simulation.","category":"page"},{"location":"literated/near-inertial_waves/#Initial-conditions","page":"Near-inertial waves","title":"Initial conditions","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Here we simulate a pair of waves propagating horizontally in different directions. If the streamfunction of a wave is psi = a cos(k x - omega t + phi) sin m z then the polarisation relations give","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"beginalign*\n  u  = -m a cos(k x - omega t + phi) cos m z \n  v  = -(f  omega) m a sin(k x - omega t + phi) cos m z \n  w  = -k a sin(k x - omega t + phi) sin m z \n  b  = (N^2  omega) k a cos(k x - omega t + phi) sin m z\nendalign*","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"ω(k, m) = √(f^2 * m^2 + N² * k^2) / √(k^2 + m^2)\nfunction u(x, z, t, W)\n    return -W.m * W.a * cos(W.k * x - ω(W.k, W.m) * t + W.φ) * cos(W.m * z)\nend\nfunction v(x, z, t, W)\n    return -(f / ω(W.k, W.m)) *\n           W.m *\n           W.a *\n           sin(W.k * x - ω(W.k, W.m) * t + W.φ) *\n           cos(W.m * z)\nend\nfunction w(x, z, t, W)\n    return -W.k * W.a * sin(W.k * x - ω(W.k, W.m) * t + W.φ) * sin(W.m * z)\nend\nfunction b(x, z, t, W)\n    return N² / ω(W.k, W.m) *\n           W.k *\n           W.a *\n           cos(W.k * x - ω(W.k, W.m) * t + W.φ) *\n           sin(W.m * z)\nend\n\nW₁ = (; k=2 * π / LX, m=π / LZ, a=0.1, φ=0)\nW₂ = (; k=-12 * π / LX, m=4 * π / LZ, a=0.01, φ=π / 2);\nω(W₁.k, W₁.m) / f, ω(W₂.k, W₂.m) / f","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"(1.2805838694583849, 1.5619374797310408)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"A couple of utility functions allow us to set initial conditions from the velocity and buoyancy. First we specify the initial conditions as functions of x and z.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"u₀(x, z) = u(x, z, 0, W₁) + u(x, z, 0, W₂)\nv₀(x, z) = v(x, z, 0, W₁) + v(x, z, 0, W₂)\nw₀(x, z) = w(x, z, 0, W₁) + w(x, z, 0, W₂)\nb₀(x, z) = b(x, z, 0, W₁) + b(x, z, 0, W₂);","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Then we use set_ζ! and set_vb! to set the initial conditions.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"set_ζ!(problem; u=u₀, w=w₀)\nset_vb!(problem; v=v₀, b=b₀)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Note that set_vb! also sets the state variable ζₜ using zeta_t = b_x - fv_z. The functions set_v! and set_b! can be used to set v and b separately without computing ζₜ. Furthermore, with v and b specified the function compute_ζₜ! can be used to compute and set ζₜ.","category":"page"},{"location":"literated/near-inertial_waves/#Timestepper","page":"Near-inertial waves","title":"Timestepper","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"The next step is to create a timestepper. We use a timestep of Δt = 2πf⁻¹/100.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Δt = 2π / f / 100\nts = Timestepper(problem, Δt)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Timestepper:\n  ├───────── problem: Problem{Float64, NoForcing{Float64}, NoForcing{Float64}, NoForcing{Float64}}\n  ├──────── timestep: h = 628.32\n  ├─────────────── 𝓒: SawyerEliassenSolver.Timesteppers.DIRKNCoefficients{Float64}\n  ├───────────── cgs: SawyerEliassenSolver.Timesteppers.ConjugateGradientSolver{Float64}\n  └─────────────── 𝓟: IdentityPreconditioner{Float64}\n","category":"page"},{"location":"literated/near-inertial_waves/#Output","page":"Near-inertial waves","title":"Output","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"We can write output to an HDF5 file using an OutputWriter.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"output_writer = OutputWriter(problem, \"near_inertial_waves.h5\"; overwrite=true)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"OutputWriter:\n  ├─────── filepath: near_inertial_waves.h5\n  ├──────── problem: Problem{Float64, NoForcing{Float64}, NoForcing{Float64}, NoForcing{Float64}}\n  ├──── coordinates: x, z\n  └────── variables: \n","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Here we'll just save the u component of the velocity. Common output variables are defined in the submodule OutputVariables","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"u_output = OutputVariables.u(problem)\nadd_output_variables!(output_writer; u=u_output)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"We can also write some attributes to the output file.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"write_attributes!(output_writer; f=f, N²=N²)","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"To save the current state of the simulation to the output file we use the write! function. i.e. to save the initial conditions","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"write!(output_writer)","category":"page"},{"location":"literated/near-inertial_waves/#Running-the-simulation","page":"Near-inertial waves","title":"Running the simulation","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Finally, it is time to run the simulation. We use advance! to timestep the simulation. Let's run the simulation for 1000 timesteps saving output every 10 timesteps.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"for _ in 1:100\n    advance!(ts, 10)\n    write!(output_writer)\nend","category":"page"},{"location":"literated/near-inertial_waves/#Visualise-the-solution","page":"Near-inertial waves","title":"Visualise the solution","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Read in the output we saved.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"output = h5open(\"near_inertial_waves.h5\", \"r\") do h5\n    (\n        u=read_dataset(h5, \"u\"),\n        time=read_dataset(h5, \"time\"),\n        x=read_dataset(h5, \"x\"),\n        z=read_dataset(h5, \"z\"),\n    )\nend;","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Make a video of u.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"n = Observable(1)\nuₙ = @lift output[:u][:, :, $n]\ntitle = @lift @sprintf \"t = %.2f inertial periods\" output[:time][$n] * f / 2π\n\nfig = Figure(; size=(1200, 400))\nLabel(fig[1, 1:2], title; tellwidth=false)\nax = Axis(fig[2, 1]; xlabel=\"x [km]\", ylabel=\"z [km]\")\n\ncf = heatmap!(ax, output[:x], output[:z], uₙ; colormap=:balance, colorrange=(-0.5, 0.5))\nColorbar(fig[2, 2], cf; label=\"u [ms⁻¹]\", labelpadding=10)\n\nrecord(fig, \"near-inertial_waves.mp4\", 1:length(output[:time]); framerate=10) do i\n    n[] = i\nend","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"(Image: ) We have a mode 1 wave propagating to the right and a mode 4 wave propagating to the left.","category":"page"},{"location":"literated/near-inertial_waves/#Error-analysis","page":"Near-inertial waves","title":"Error analysis","text":"","category":"section"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"We can compute the root mean square error between the theoretical solution and the simulated solution after 1 inertial period","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"x_grid, z_grid = gridpoints(domain)\nu_theory = [\n    u(x, z, 2π / f, W₁) + u(x, z, 2π / f, W₂) for x in xgridpoints(domain),\n    z in zgridpoints(domain)\n];\n\nfunction run_one_inertial_period(problem, nsteps::Int)\n    set_ζ!(problem; u=u₀, w=w₀)\n    set_vb!(problem; v=v₀, b=b₀)\n    Δt = 2π / f / nsteps\n    ts = Timestepper(problem, Δt)\n    for _ in 1:nsteps\n        advance!(ts)\n    end\n    output = OutputVariables.u(problem)\n    compute!(output)\n    return output\nend\n\nfunction rms_error(simulated, theory)\n    squared_error = (simulated .- theory) .^ 2\n    return sqrt(mean(squared_error))\nend;","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"Make a plot of the root mean square error as a function of the timestep. Our time stepping scheme is third-order accurate and we see that the error scales as Δt³. The lower bound for the error is determined by the tolerance of the iterative solver.","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"fig = Figure(; size=(1200, 400))\nax = Axis(\n    fig[1, 1];\n    xlabel=\"Δt [Inertial periods]\",\n    ylabel=\"RMS Error\",\n    xscale=log10,\n    yscale=log10,\n)\nnumber_of_steps = [10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000]\n\nfor nsteps in number_of_steps\n    problem = Problem(domain, background_flow)\n    u_sim = run_one_inertial_period(problem, nsteps)\n    rms = rms_error(u_sim, u_theory)\n    scatter!(ax, 1 / nsteps, rms; color=:red, marker=:cross)\nend\n\nlines!(\n    ax,\n    1 ./ number_of_steps,\n    1e3 ./ number_of_steps .^ 3;\n    color=:black,\n    label=\"Δt³\",\n    linewidth=2,\n)\naxislegend(; position=:lt)\n\nfig","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"<img width=1200 height=400 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"","category":"page"},{"location":"literated/near-inertial_waves/","page":"Near-inertial waves","title":"Near-inertial waves","text":"This page was generated using Literate.jl.","category":"page"},{"location":"library/problems/#Problems","page":"Problems","title":"Problems","text":"","category":"section"},{"location":"library/problems/","page":"Problems","title":"Problems","text":"Modules = [SawyerEliassenSolver.Problems]\nPrivate = false","category":"page"},{"location":"library/problems/#SawyerEliassenSolver.Problems.BackgroundFlow","page":"Problems","title":"SawyerEliassenSolver.Problems.BackgroundFlow","text":"struct BackgroundFlow{T}\n\nThe balanced background gradients. The background flow is in thermal wind balance and therefore assumed to be steady.\n\nFields\n\nf::Any: Coriolis frequency f\nVx::Matrix: Lateral shear partial Vpartial x\nBx::Matrix: Horizontal buoyancy gradient partial Bpartial x = fpartial Vpartial z\nBz::Matrix: Vertical buoyancy gradient partial Bpartial z\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.BackgroundFlow-Union{Tuple{Grid{T}}, Tuple{T}} where T","page":"Problems","title":"SawyerEliassenSolver.Problems.BackgroundFlow","text":"BackgroundFlow(grid::Grid{T}) -> BackgroundFlow\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.BackgroundFlow-Union{Tuple{T}, Tuple{Grid{T}, T}} where T","page":"Problems","title":"SawyerEliassenSolver.Problems.BackgroundFlow","text":"BackgroundFlow(grid::Grid{T}, f) -> BackgroundFlow\n\n\nCreate a new BackgroundFlow given a Grid and Coriolis frequency f which defaults to 1. Background gradients are initialised to 0.\n\nExamples\n\ngrid = Grid(256,128,2000.0,1.0)\nbg = BackgroundFlow(grid)\n\n# output\nBackgroundFlow:\n  ├─── f: 1\n  ├── Vx: 256×128 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  ├── Bx: 256×128 Matrix{Float64}\n  │       [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n  └── Bz: 256×128 Matrix{Float64}\n          [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.Clock","page":"Problems","title":"SawyerEliassenSolver.Problems.Clock","text":"mutable struct Clock{T}\n\nCurrent simulation time and iteration.\n\nt::Any\niteration::Int64\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.Clock-Union{Tuple{}, Tuple{T}} where T","page":"Problems","title":"SawyerEliassenSolver.Problems.Clock","text":"Default initialiser for Clock\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.Problem","page":"Problems","title":"SawyerEliassenSolver.Problems.Problem","text":"struct Problem{T, F, G, H}\n\nA struct representing a Sawyer-Eliassen problem.\n\nFields\n\ndomain::Domain{T} where T\nbackground::BackgroundFlow\nζ_forcing::Any\nv_forcing::Union{NoForcing{T}, GlobalPhysicalForcing{T}, PointwisePhysicalForcing{T}} where T\nb_forcing::Union{NoForcing{T}, GlobalPhysicalForcing{T}, PointwisePhysicalForcing{T}} where T\nstate::State\nscratch::Scratch\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.Scratch","page":"Problems","title":"SawyerEliassenSolver.Problems.Scratch","text":"struct Scratch{T}\n\nScratch space for temporary variables used in the Sawyer-Eliassen problem. These variables have two primary uses in the code:\n\n1) intermediate terms in the computation of the Sawyer-Eliassen operator 𝓛\n2) intermediate terms in the advection of the background flow\n\nBetween timesteps these variables are available for other purposes e.g. setting the initial conditions, computing output.\n\nFields\n\nFS_tmp::FSVariable\nFC_tmp::FCVariable\nXS_tmp::XSVariable\nXC_tmp::XCVariable\nXZ_tmp::XZVariable\nXZ_tmp2::XZVariable\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.State","page":"Problems","title":"SawyerEliassenSolver.Problems.State","text":"struct State{T}\n\nState variables of the problem.\n\nζ::FSVariable\nζₜ::FSVariable\nv::XZVariable\nb::XZVariable\nclock::Clock\n\n\n\n\n\n","category":"type"},{"location":"library/problems/#SawyerEliassenSolver.Problems.compute_ζₜ!-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.compute_ζₜ!","text":"compute_ζₜ!(problem::Problem)\n\n\nCompute and set ζₜ by projecting b onto sine space, v onto cosine space and using ζₜ = bx - fvz\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Bx-Tuple{BackgroundFlow}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Bx","text":"get_Bx(bg::BackgroundFlow) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Bx-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Bx","text":"get_Bx(problem::Problem) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Bz-Tuple{BackgroundFlow}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Bz","text":"get_Bz(bg::BackgroundFlow) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Bz-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Bz","text":"get_Bz(problem::Problem) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Vx-Tuple{BackgroundFlow}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Vx","text":"get_Vx(bg::BackgroundFlow) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_Vx-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_Vx","text":"get_Vx(problem::Problem) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_f-Tuple{BackgroundFlow}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_f","text":"get_f(bg::BackgroundFlow) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_f-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_f","text":"get_f(problem::Problem) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_iteration-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_iteration","text":"get_iteration(problem::Problem) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_iteration-Tuple{State}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_iteration","text":"get_iteration(state::State) -> Int64\n\n\nGet current iteration.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_problem-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_problem","text":"get_problem(problem::Problem) -> Problem\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_scratch-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_scratch","text":"get_scratch(problem::Problem) -> Scratch\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_time-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_time","text":"get_time(problem::Problem) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_time-Tuple{State}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_time","text":"get_time(state::State) -> Any\n\n\nGet current simulation time.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.get_ζ_forcing-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.get_ζ_forcing","text":"get_ζ_forcing(problem::Problem) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_b!-Tuple{Problem, Any}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_b!","text":"set_b!(problem::Problem, b)\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_b!-Tuple{State, Function}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_b!","text":"set_b!(state::State, func::Function)\n\n\nSet b from a function b(x,z).\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_b!-Tuple{State, XZVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_b!","text":"set_b!(state::State, b::XZVariable)\n\n\nSet b from a variable.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_v!-Tuple{Problem, Any}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_v!","text":"set_v!(problem::Problem, v)\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_v!-Tuple{State, Function}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_v!","text":"set_v!(state::State, func::Function)\n\n\nSet v from a function v(x,z).\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_v!-Tuple{State, XZVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_v!","text":"set_v!(state::State, v::XZVariable)\n\n\nSet v from a variable.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_vb!-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_vb!","text":"set_vb!(problem::Problem; v, b)\n\n\nSet v and / or b and then compute and set ζₜ\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{Problem, Any}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(problem::Problem, ζ) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{Problem}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(problem::Problem; u, w)\n\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State, FSVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State, ζ::FSVariable)\n\n\nSet ζ from a variable in spectral space.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State, Function}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State, func::Function)\n\n\nSet ζ from a function. func should specify ζ = func(x,z) pointwise.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State, XSVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State, ζ::XSVariable)\n\n\nSet ζ from a variable in XS space.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State, XZVariable}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State, ζ::XZVariable)\n\n\nSet ζ from a variable in physical space.\n\n\n\n\n\n","category":"method"},{"location":"library/problems/#SawyerEliassenSolver.Problems.set_ζ!-Tuple{State}","page":"Problems","title":"SawyerEliassenSolver.Problems.set_ζ!","text":"set_ζ!(state::State; u, w)\n\n\nSet ζ from u and w. u and w may be a XZVariable, XCVariable/ XSVariable, FCVariable / FSVariable or a function specifying u(x,z) / w(x,z) pointwise. If not specified u and w default to 0.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#Domains","page":"Domains","title":"Domains","text":"","category":"section"},{"location":"library/domains/","page":"Domains","title":"Domains","text":"Modules = [SawyerEliassenSolver.Domains]\nPrivate = false\nPages = [\n    \"Domains/grid.jl\",\n    \"Domains/spectral.jl\",\n    \"Domains/transforms.jl\",\n    \"Domains/domain.jl\",\n    \"Domains/Domains.jl\"\n]","category":"page"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Grid","page":"Domains","title":"SawyerEliassenSolver.Domains.Grid","text":"struct Grid{T<:Union{Float32, Float64}}\n\nThe physical grid. x is uniformly spaced and periodic with the left boundary at x1 and the right boundary at xNX + 1 = x1 as is standard for DFTs. z is a standard DCT/DST type II grid – uniformly spaced interior points with the boundaries at z12 and zNZ + 12. The float type of the grid determines the float point precision of the simulation and since we use FFTW is restriced to Float32 or Float64.\n\nFields\n\nNX::Int64: Number of grid points in x\nNZ::Int64: Number of grid points in z\nx_bounds::Tuple{T, T} where T<:Union{Float32, Float64}: Lower and upper x bounds: x₀x₁)\nz_bounds::Tuple{T, T} where T<:Union{Float32, Float64}: Lower and upper z bounds: z₀z₁\n\n\n\n\n\n","category":"type"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Grid-NTuple{4, Any}","page":"Domains","title":"SawyerEliassenSolver.Domains.Grid","text":"Grid(NX, NZ, x_bounds, z_bounds) -> Any\n\n\n4 argument constructor for  Grid uses the default float type of Float64.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Grid-NTuple{5, Any}","page":"Domains","title":"SawyerEliassenSolver.Domains.Grid","text":"Grid(FT, NX, NZ, x_bounds, z_bounds) -> Grid\n\n\nCreate a physical Grid with float type FT and (NX,NZ) points. The lateral bounds, [x₀,x₁) are set with a 2-tuple x_bounds or a single number LX which is equivalent to passing (0, LX). Similarly, the vertical bounds [z₀,z₁] are set by the 2-tuple z_bounds or a height LZ equivalent to (-LZ, 0).\n\nExamples\n\njulia> grid = Grid(256,128,(-1000,1000),(-1,1))\nGrid{Float64}:\n  ├── NX: 256\n  ├── NZ: 128\n  ├─── x: [-1000,1000)\n  └─── z: [-1,1]\n\njulia> grid = Grid(Float32,256,128,(-1000,1000),10)\nGrid{Float32}:\n  ├── NX: 256\n  ├── NZ: 128\n  ├─── x: [-1000,1000)\n  └─── z: [-10,0]\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.gridpoints-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.gridpoints","text":"gridpoints(\n    grid::Grid\n) -> Tuple{Union{Base.ReshapedArray{Float32, 2, LinRange{Float32, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, LinRange{Float64, Int64}, Tuple{}}}, Union{Base.ReshapedArray{Float32, 2, LinRange{Float32, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, LinRange{Float64, Int64}, Tuple{}}}}\n\n\nGet both the x and z gridpoints, reshaped to size (NX,1) and (1,NZ) ready for broadcasting.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.stepsize-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.stepsize","text":"stepsize(\n    grid::Grid\n) -> Tuple{Union{Float32, Float64}, Union{Float32, Float64}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xgridpoints-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.xgridpoints","text":"xgridpoints(\n    grid::Grid\n) -> Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}\n\n\nLinRange of the x gridpoints.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xstepsize-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.xstepsize","text":"xstepsize(grid::Grid) -> Union{Float32, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zgridpoints-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.zgridpoints","text":"zgridpoints(\n    grid::Grid\n) -> Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}\n\n\nLinRange of the z gridpoints.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zstepsize-Tuple{Grid}","page":"Domains","title":"SawyerEliassenSolver.Domains.zstepsize","text":"zstepsize(grid::Grid) -> Union{Float32, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Domain","page":"Domains","title":"SawyerEliassenSolver.Domains.Domain","text":"struct Domain{T<:Union{Float32, Float64}}\n\nThe domain, both physical and spectral, on which a problem is defined. This struct also stores the FFTW plans for transforming between the physical and spectral representations of variables.\n\n\n\n\n\n","category":"type"},{"location":"library/domains/#SawyerEliassenSolver.Domains.Domain-Union{Tuple{Grid{T}}, Tuple{T}} where T","page":"Domains","title":"SawyerEliassenSolver.Domains.Domain","text":"Domain(grid::Grid{T}; dealias_x, dealias_z) -> Domain\n\n\nConstruct a domain from a grid. To dealias the products with the background flow a number of the higher wavenumbers can be zeroed out. The number of retained wavenumbers are CNX = grid.NX ÷ 2 - dealias_x and CNZ = grid.NZ - 1 - dealias_z Note that we already drop the Nyquist wavenumber in x as well as the zeroth (barotropic) cosine mode / highest sine mode.\n\nExamples\n\nBuild an domain with no dealiasing.\n\njulia> grid = Grid(16,8,1,1);\n\njulia> domain = Domain(grid)\nDomain:\n  ├─────────── grid: Grid with eltype Float64 and size (16, 8)\n  ├─────── spectral: Spectral domain of size (9, 8) and spectral resolution (8, 7)\n  └───── transforms: FFTW transforms: rfft, type II DST and type II DCT.\n\nA domain with dealising in the vertical.\n\njulia> grid = Grid(16,8,1,1);\n\njulia> domain = Domain(grid, dealias_z=2)\nDomain:\n  ├─────────── grid: Grid with eltype Float64 and size (16, 8)\n  ├─────── spectral: Spectral domain of size (9, 8) and spectral resolution (8, 5)\n  └───── transforms: FFTW transforms: rfft, type II DST and type II DCT.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.consistent_domains-Tuple{Any, Vararg{Any}}","page":"Domains","title":"SawyerEliassenSolver.Domains.consistent_domains","text":"consistent_domains(a, B...) -> Bool\n\n\nCheck that these variables have the same domain.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.get_domain","page":"Domains","title":"SawyerEliassenSolver.Domains.get_domain","text":"Get the domain this object is defined over.\n\n\n\n\n\n","category":"function"},{"location":"library/domains/#SawyerEliassenSolver.Domains.gridpoints-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.gridpoints","text":"gridpoints(\n    domain::Domain\n) -> Tuple{Union{Base.ReshapedArray{Float32, 2, LinRange{Float32, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, LinRange{Float64, Int64}, Tuple{}}}, Union{Base.ReshapedArray{Float32, 2, LinRange{Float32, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, LinRange{Float64, Int64}, Tuple{}}}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.resolved_cosine_indices-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.resolved_cosine_indices","text":"resolved_cosine_indices(domain::Domain) -> UnitRange{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.resolved_fourier_indices-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.resolved_fourier_indices","text":"resolved_fourier_indices(domain::Domain) -> UnitRange{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.resolved_sine_indices-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.resolved_sine_indices","text":"resolved_sine_indices(domain::Domain) -> UnitRange{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.stepsize-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.stepsize","text":"stepsize(\n    domain::Domain\n) -> Tuple{Union{Float32, Float64}, Union{Float32, Float64}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.wavenumbers-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.wavenumbers","text":"wavenumbers(\n    domain::Domain\n) -> Tuple{Union{Base.ReshapedArray{Float32, 2, StepRangeLen{Float32, Float64, Float64, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{}}}, Union{Base.ReshapedArray{Float32, 2, StepRangeLen{Float32, Float64, Float64, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{}}}}\n\n\nResolved k_x and k_z reshaped to size (CNX,1) and (1,CNZ) ready for broadcasting.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.wavenumbers_full-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.wavenumbers_full","text":"wavenumbers_full(\n    domain::Domain\n) -> Tuple{Union{Base.ReshapedArray{Float32, 2, StepRangeLen{Float32, Float64, Float64, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{}}}, Union{Base.ReshapedArray{Float32, 2, StepRangeLen{Float32, Float64, Float64, Int64}, Tuple{}}, Base.ReshapedArray{Float64, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{}}}}\n\n\nk_x and k_z including unresolved zeroed-out wavenumbers reshaped to size (NX ÷ 2 + 1,1) and (1,NZ) ready for broadcasting.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xgridpoints-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.xgridpoints","text":"xgridpoints(\n    domain::Domain\n) -> Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xstepsize-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.xstepsize","text":"xstepsize(domain::Domain) -> Union{Float32, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xwavenumbers-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.xwavenumbers","text":"xwavenumbers(\n    domain::Domain\n) -> Union{StepRangeLen{Float32, Float64, Float64, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}\n\n\nThe resolved x wavenumbers k_x.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.xwavenumbers_full-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.xwavenumbers_full","text":"xwavenumbers_full(\n    domain::Domain\n) -> Union{StepRangeLen{Float32, Float64, Float64, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}\n\n\nThe x wavenumbers k_x including unresolved zeroed-out wavenumbers.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zgridpoints-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.zgridpoints","text":"zgridpoints(\n    domain::Domain\n) -> Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zstepsize-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.zstepsize","text":"zstepsize(domain::Domain) -> Union{Float32, Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zwavenumbers-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.zwavenumbers","text":"zwavenumbers(\n    domain::Domain\n) -> Union{StepRangeLen{Float32, Float64, Float64, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}\n\n\nThe resolved z wavenumbers k_z.\n\n\n\n\n\n","category":"method"},{"location":"library/domains/#SawyerEliassenSolver.Domains.zwavenumbers_full-Tuple{Domain}","page":"Domains","title":"SawyerEliassenSolver.Domains.zwavenumbers_full","text":"zwavenumbers_full(\n    domain::Domain\n) -> Union{StepRangeLen{Float32, Float64, Float64, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}\n\n\nThe z wavenumbers k_z including unresolved zeroed-out wavenumbers.\n\n\n\n\n\n","category":"method"},{"location":"examples/variably_stratified_frontal_zone/#Variably-Stratified-Frontal-Zone","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/#Background-Flow","page":"Variably Stratified Frontal Zone","title":"Background Flow","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"beginaligned\n    V_x = 0 \n    B_x = fV_z = Gamma f^2  \n    B_z = leftPi_0^2 + left(Pi_infty^2 - Pi_0^2right)frac11 + mathrme^z + Drightf^2\nendaligned","category":"page"},{"location":"examples/variably_stratified_frontal_zone/#Initial-Conditions","page":"Variably Stratified Frontal Zone","title":"Initial Conditions","text":"","category":"section"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"The streamfunction is specified as a wavepacket of the form","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi = Acos(kx + mz -omega t)","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"where A is a slowly varying amplitude that is neglected when constructing the initial conditions. The initial amplitude is","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"A(xz) = mathrme^-(lambda_x^2(x - x_0)^2 + lambda_z^2(z - z_0))2","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"The wavepacket is initialised in the top part of the domain where B_z = Pi_0^2f^2. k and m are chosen such that the wave has frequency omega = frac1sqrt2f. That is ","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"fracmk = fracGamma pm sqrtGamma^2 - left(Pi_0^2 - f^-2omega^2right)left(1 - f^-2omega^2right)left(1 - f^-2omega^2right)","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"Given the streamfunction we can compute u, w, v, and b by","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"beginaligned\n    u = -psi_z = mAsin(kx + mz - omega t)  \n    w = psi_x = -kAsin(kx + mz - omega t)  \n    v_t = -u(f + V_x) - wV_z implies v = leftfracfGamma komega - fracfmomegarightAcos(kx + mz - omega t)  \n    b_t = -uB_x - wB_z implies b = leftfracf^2Pi_0^2 komega - fracf^2Gamma momegarightAcos(kx + mz - omega t)\nendaligned","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi_t is then computed from the thermal wind imbalance","category":"page"},{"location":"examples/variably_stratified_frontal_zone/","page":"Variably Stratified Frontal Zone","title":"Variably Stratified Frontal Zone","text":"psi_t = left(fracpartial^2partial x^2 + fracpartial^2partial z^2right)^-1left(b_x - fv_zright)","category":"page"},{"location":"library/timesteppers/#Timesteppers","page":"Timesteppers","title":"Timesteppers","text":"","category":"section"},{"location":"library/timesteppers/","page":"Timesteppers","title":"Timesteppers","text":"Modules = [SawyerEliassenSolver.Timesteppers]\nPrivate = false","category":"page"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.AbstractPreconditioner","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.AbstractPreconditioner","text":"Abstract supertype for conjugate gradient preconditioners.\n\n\n\n\n\n","category":"type"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.DiagonalQuadraticPreconditioner","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.DiagonalQuadraticPreconditioner","text":"struct DiagonalQuadraticPreconditioner{T} <: AbstractPreconditioner{T}\n\nA preconditioner that approximates 𝓛ζ in spectral space by 𝓛ζ  (ω₀² k_z² + ω₁² k_x^2)  (k_x² + k_z²) ζ\n\nFields\n\ndomain::Domain{T} where T\nω₀²::Any\nω₁²::Any\n\n\n\n\n\n","category":"type"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.IdentityPreconditioner","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.IdentityPreconditioner","text":"struct IdentityPreconditioner{T} <: AbstractPreconditioner{T}\n\nThe default preconditioner for the conjugate gradient algorithm which does nothing.\n\n\n\n\n\n","category":"type"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.Timestepper","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.Timestepper","text":"struct Timestepper{T, F, G, H, P}\n\nObject that stores all the variables and operators required to advance a problem one timestep.\n\n\n\n\n\n","category":"type"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.Timestepper-Union{Tuple{T}, Tuple{Problem{T}, T}, Tuple{Problem{T}, T, Any}} where T","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.Timestepper","text":"Timestepper(problem::Problem{T}, h::T, [𝓟::AbstractPreconditioner]; c=nothing, cg_max_iterations=nothing, cg_tol=nothing)\n\nConstructor for Timestepper. The timestep h is required and a preconditioner may optionally be passed.\n\nKeyword arguments\n\nc: use a non-default value for the free parameter in the timestepping stepping scheme. See Sharp et al. (1990) for valid ranges of values.\ncg_max_iterations: maximum number of iterations for the conjugate gradient solver.\ncg_tol: tolerance for the conjugate gradient solver.\n\n\n\n\n\n","category":"method"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.advance!-Tuple{Timestepper, Integer}","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.advance!","text":"advance!(ts::Timestepper, n::Integer)\n\n\nAdvance the timestepper n timesteps.\n\n\n\n\n\n","category":"method"},{"location":"library/timesteppers/#SawyerEliassenSolver.Timesteppers.advance!-Tuple{Timestepper}","page":"Timesteppers","title":"SawyerEliassenSolver.Timesteppers.advance!","text":"advance!(ts::Timestepper)\n\n\nAdvance the timestepper one timestep.\n\n\n\n\n\n","category":"method"},{"location":"Sawyer-Eliassen equation/theory/#The-Sawyer-Eliassen-equation","page":"Theory","title":"The Sawyer-Eliassen equation","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"The Sawyer-Eliassen equation (Sawyer and Sutton, 1956; Eliassen, 1962) describes the ageostrophic overturning circulations at fronts. The derivation here largely follows Mooers (1975) although we allow for arbitary momentum and buoyancy forcing. Consider a 2D set-up with a buoyancy field B(xz) in thermal wind balance partial Bpartial x = fpartial Vpartial z with a geostrophic velocity V(xz). Assuming that perturbations from this state are also 2D the Boussinesq equations can be written.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginalign\n    fracpartial upartial t - fv + frac1rho_0fracpartial ppartial x  = mathcalF^(x)      \n    fracpartial vpartial t + ufracpartial Vpartial x + wfracpartial Vpartial z + fu  = mathcalF^(y) \n    fracpartial wpartial t + frac1rho_0fracpartial ppartial z - b  = mathcalF^(z) \n    fracpartial bpartial t + ufracpartial Bpartial x + wfracpartial Bpartial z  = mathcalB \n    fracpartial upartial x + fracpartial wpartial z  = 0\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"where the non-linear terms have been absorbed into the arbitary RHS forcing. Introducing a streamfunction psi such that u = -partialpsipartial z and w = partialpsipartial x we form the evolution equation for the component of vorticity into the page.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartialpsipartial t = fracpartial bpartial x - ffracpartial vpartial z + fracpartial mathcalF^(z)partial x - fracpartial mathcalF^(x)partial z\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"and the v and b perturbations are determined by ","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginalign\n    fracpartial vpartial t  = -mathcalJ(psiV + fx) + mathcalF^(y)  \n    fracpartial bpartial t  = -mathcalJ(psiB) + mathcalB\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"where mathcalJ(psi cdot) equiv (partialpsipartial x) partial partial z - (partialpsipartial z) partial partial x is advection by the perturbations.","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"The dynamics are controlled by a single second-order in time equation for the stream-function","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartial^2psipartial t^2 = -fracpartial partial xmathcalJ(psiB) + ffracpartial partial zmathcalJ(psiV + fx) + mathfrakF(xzt)\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"where the forcing is ","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    mathfrakF(xzt) = fracpartial^2 mathcalF^(z)partial xpartial t - fracpartial^2 mathcalF^(x)partial zpartial t - ffracpartialmathcalF^(y)partial z + fracpartialmathcalBpartial x\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"In expanding the RHS some cancellations can be made thanks to the assumption of thermal wind balance and the Sawyer-Eliassen equation is reached","category":"page"},{"location":"Sawyer-Eliassen equation/theory/","page":"Theory","title":"Theory","text":"beginequation\n    left(fracpartial^2 partial x^2 + fracpartial^2 partial z^2right)fracpartial^2psipartial t^2 = -fracpartial Bpartial zfracpartial^2psipartial x^2 + 2fracpartial Bpartial xfracpartial^2psipartial xpartial z - fleft(f + fracpartial Vpartial xright)fracpartial^2psipartial z^2 + mathfrakF(xzt)\nendequation","category":"page"},{"location":"examples/barotropic_niws/#Barotropic-NIWs","page":"Barotropic NIWs","title":"Barotropic NIWs","text":"","category":"section"},{"location":"library/SawyerEliassenSolver/#SawyerEliassenSolver","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver","text":"","category":"section"},{"location":"library/SawyerEliassenSolver/","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver","text":"The main module of this package. It reexports all the public names defined in its submodules.","category":"page"},{"location":"library/SawyerEliassenSolver/","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver","text":"Modules = [SawyerEliassenSolver]","category":"page"},{"location":"library/SawyerEliassenSolver/#SawyerEliassenSolver.SawyerEliassenSolver","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver.SawyerEliassenSolver","text":"SawyerEliassenSolver.jl – Solve the Sawyer-Eliassen equation using a pseudo-spectral discretisation and 3rd order accurate implicit timestepping for arbitrary balanced background flows.\n\nExports\n\nAbstractForcingFunction\nAbstractPreconditioner\nBackgroundFlow\nClock\nConstantOutputVariable\nDiagonalQuadraticPreconditioner\nDomain\nDomains\nFCVariable\nFSVariable\nFZVariable\nForcing\nGlobalPhysicalForcing\nGlobalSpectralForcing\nGrid\nIdentityPreconditioner\nNoForcing\nOutput\nOutputVariable\nOutputVariables\nOutputWriter\nPhysicalForcing\nPointwisePhysicalForcing\nPointwiseSpectralForcing\nProblem\nProblems\nScratch\nSpectralForcing\nState\nTimestepper\nTimesteppers\nVariables\nXCVariable\nXSVariable\nXZVariable\nadd_output_variables!\nadvance!\ncompute!\ncompute_ζₜ!\nconsistent_domains\ncosine_transform\ncosine_transform!\nget_Bx\nget_Bz\nget_Vx\nget_domain\nget_f\nget_iteration\nget_problem\nget_scratch\nget_time\nget_ζ_forcing\ngridpoints\nhorizontal_counterpart\nhorizontal_transform\nhorizontal_transform!\nintegrate_periodic_gradients\nresolved\nresolved_cosine_indices\nresolved_fourier_indices\nresolved_sine_indices\nset_b!\nset_v!\nset_vb!\nset_ζ!\nsine_transform\nsine_transform!\nstepsize\ntransform!\nwavenumbers\nwavenumbers_full\nwrite!\nwrite_Bx!\nwrite_Bz!\nwrite_Vx!\nwrite_attributes!\nwrite_background_buoyancy!\nwrite_background_flow!\nwrite_background_velocity!\nwrite_constant_array!\nwrite_f!\nxgridpoints\nxstepsize\nxwavenumbers\nxwavenumbers_full\nzgridpoints\nzstepsize\nzwavenumbers\nzwavenumbers_full\n∂x\n∂x!\n∂z\n∂z!\n∂z²\n∂z²!\n∇⁻²!\n∫dx\n∫dx!\n∫dz\n∫dz!\n∫dz²\n∫dz²!\n\n\n\n\n\n","category":"module"},{"location":"library/SawyerEliassenSolver/#SawyerEliassenSolver.__init__-Tuple{}","page":"SawyerEliassenSolver","title":"SawyerEliassenSolver.__init__","text":"Initialise the SawyerEliassenSolver module.\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"library/variables/","page":"Variables","title":"Variables","text":"Modules = [SawyerEliassenSolver.Variables]\nPrivate = false","category":"page"},{"location":"library/variables/#SawyerEliassenSolver.Variables","page":"Variables","title":"SawyerEliassenSolver.Variables","text":"Module for different variable representations, transforms between representations and operators that act on variables.\n\nExports\n\nFCVariable\nFSVariable\nFZVariable\nXCVariable\nXSVariable\nXZVariable\ncosine_transform\ncosine_transform!\nhorizontal_counterpart\nhorizontal_transform\nhorizontal_transform!\nresolved\nsine_transform\nsine_transform!\ntransform!\n∂x\n∂x!\n∂z\n∂z!\n∂z²\n∂z²!\n∇⁻²!\n∫dx\n∫dx!\n∫dz\n∫dz!\n∫dz²\n∫dz²!\n\n\n\n\n\n","category":"module"},{"location":"library/variables/#SawyerEliassenSolver.Variables.FCVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.FCVariable","text":"A variable expressed in Fourier space in the horizontal and cosine space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.FSVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.FSVariable","text":"A variable expressed in Fourier space in the horizontal and sine space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.FZVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.FZVariable","text":"A variable expressed in Fourier space in the horizontal and physical space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.XCVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.XCVariable","text":"A variable expressed in physical space in the horizontal and cosine space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.XSVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.XSVariable","text":"A variable expressed in physical space in the horizontal and sine space in the vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.XZVariable","page":"Variables","title":"SawyerEliassenSolver.Variables.XZVariable","text":"A variable expressed in physical space in the horizontal and vertical.\n\n\n\n\n\n","category":"type"},{"location":"library/variables/#SawyerEliassenSolver.Variables.cosine_transform","page":"Variables","title":"SawyerEliassenSolver.Variables.cosine_transform","text":"Transform the variable from physical space to cosine space or vice verse in the vertical.\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.cosine_transform!-Tuple{XCVariable, XZVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.cosine_transform!","text":"cosine_transform!(out::XCVariable, in::XZVariable)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.cosine_transform!-Tuple{XZVariable, XCVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.cosine_transform!","text":"cosine_transform!(out::XZVariable, in::XCVariable)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.horizontal_counterpart-Tuple{XZVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.horizontal_counterpart","text":"Return the fourier (physical) counterpart to a physical (fourier) variable.\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.horizontal_transform","page":"Variables","title":"SawyerEliassenSolver.Variables.horizontal_transform","text":"Transform the variable from physical space to Fourier space or vice verse in the horizontal.\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.horizontal_transform!-Tuple{Union{FCVariable{T}, FSVariable{T}, FZVariable{T}} where T, Union{XCVariable{T}, XSVariable{T}, XZVariable{T}} where T}","page":"Variables","title":"SawyerEliassenSolver.Variables.horizontal_transform!","text":"horizontal_transform!(\n    out::Union{FCVariable{T}, FSVariable{T}, FZVariable{T}} where T,\n    in::Union{XCVariable{T}, XSVariable{T}, XZVariable{T}} where T\n)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.horizontal_transform!-Tuple{Union{XCVariable{T}, XSVariable{T}, XZVariable{T}} where T, Union{FCVariable{T}, FSVariable{T}, FZVariable{T}} where T}","page":"Variables","title":"SawyerEliassenSolver.Variables.horizontal_transform!","text":"horizontal_transform!(\n    out::Union{XCVariable{T}, XSVariable{T}, XZVariable{T}} where T,\n    in::Union{FCVariable{T}, FSVariable{T}, FZVariable{T}} where T\n)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.resolved","page":"Variables","title":"SawyerEliassenSolver.Variables.resolved","text":"Return a view into the resolved wavenumbers.\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.sine_transform","page":"Variables","title":"SawyerEliassenSolver.Variables.sine_transform","text":"Transform the variable from physical space to sine space or vice verse in the vertical.\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.sine_transform!-Tuple{XSVariable, XZVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.sine_transform!","text":"sine_transform!(out::XSVariable, in::XZVariable)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.sine_transform!-Tuple{XZVariable, XSVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.sine_transform!","text":"sine_transform!(out::XZVariable, in::XSVariable)\n\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.transform!-Tuple{SawyerEliassenSolver.Variables.AbstractVariable, SawyerEliassenSolver.Variables.AbstractVariable}","page":"Variables","title":"SawyerEliassenSolver.Variables.transform!","text":"Safe transforms with domain validation for public use.\n\n\n\n\n\n","category":"method"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂x","page":"Variables","title":"SawyerEliassenSolver.Variables.∂x","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂x!","page":"Variables","title":"SawyerEliassenSolver.Variables.∂x!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂z","page":"Variables","title":"SawyerEliassenSolver.Variables.∂z","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂z!","page":"Variables","title":"SawyerEliassenSolver.Variables.∂z!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂z²","page":"Variables","title":"SawyerEliassenSolver.Variables.∂z²","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∂z²!","page":"Variables","title":"SawyerEliassenSolver.Variables.∂z²!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∇⁻²!","page":"Variables","title":"SawyerEliassenSolver.Variables.∇⁻²!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dx","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dx","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dx!","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dx!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dz","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dz","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dz!","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dz!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dz²","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dz²","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"library/variables/#SawyerEliassenSolver.Variables.∫dz²!","page":"Variables","title":"SawyerEliassenSolver.Variables.∫dz²!","text":"Document me!\n\n\n\n\n\n","category":"function"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"EditURL = \"../../../examples/forced_secondary_circulation.jl\"","category":"page"},{"location":"literated/forced_secondary_circulation/#forced_secondary_circulation_example","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"This example demonstrates how to apply RHS forcing and how to create output variables.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"With the flow initially at rest we will apply forcing to the RHS of the vorticity equation and generate a secondary circulation. The forcing function will take the form","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"mathcalF(xzt) = mathcalSleft(fracxLfraczHright)sigmaleft(fracttauright)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"where L, H and tau are horizontal, vertical and temporal scales respectively. The spatial structure is given by a Gaussian,","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"mathcalS(xz) = expleft(-fracx^22 + fracz^22right)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"and the temporal part is given by (minus) the derivative of a Gaussian,","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"sigma(t) = texp(-t^2  2)","category":"page"},{"location":"literated/forced_secondary_circulation/#Load-packages","page":"Forced secondary circulation","title":"Load packages","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"using CairoMakie\nusing HDF5\nusing Printf\n\nusing SawyerEliassenSolver","category":"page"},{"location":"literated/forced_secondary_circulation/#Grid,-background-flow-and-domain","page":"Forced secondary circulation","title":"Grid, background flow and domain","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"We non-dimensionalise by the half-height of the domain and f. The background flow has uniform gradients and thus we require no dealiasing.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"const NX, NZ = 2048, 256\nconst LX::Float64 = 1000\nconst M²::Float64 = 100\nconst N²::Float64 = 1e5\n\ngrid = Grid(NX, NZ, (-LX / 2, LX / 2), (-1, 1))\n\nbackground_flow = BackgroundFlow(grid)\nbackground_flow.Bx .= M²\nbackground_flow.Bz .= N²\n\ndomain = Domain(grid);","category":"page"},{"location":"literated/forced_secondary_circulation/#Forcing","page":"Forced secondary circulation","title":"Forcing","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"zeta forcing can be applied in four different ways:","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"PointwisePhysicalForcing\nGlobalPhysicalForcing\nPointwiseSpectralForcing\nGlobalSpectralForcing","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Here we implement Pointwise Physical Forcing where we specify the forcing as a function of x, z and t. The function can also optionally accepted parameters as the final arguments. We specify the spatial and temporal parts of the RHS forcing as non-dimensional functions and then provide the length and time scales as parameters.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"@inline forcing_spatial(x, z) = exp(-(x^2 + z^2) / 2)\n@inline forcing_temporal(t) = t * exp(-t^2 / 2)\n@inline forcing(x, z, t, p) = forcing_spatial(x / p.L, z / p.H) * forcing_temporal(t / p.τ)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"forcing (generic function with 1 method)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"We now construct the RHS forcing for the domain by passing in the function and parameters. We choose a timescale of 3 inertial periods.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"const parameters = (; L=20.0, H=0.05, τ=6π)\nphysical_forcing = PointwisePhysicalForcing(domain, forcing, parameters)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"PointwisePhysicalForcing{Float64, @NamedTuple{L::Float64, H::Float64, τ::Float64}}(Domain{Float64}(Grid{Float64}(2048, 256, (-500.0, 500.0), (-1.0, 1.0)), SawyerEliassenSolver.Domains.Spectral{Float64}(1025, 256, 1024, 255, 0.006283185307179587, 1.5707963267948966), SawyerEliassenSolver.Domains.Transforms{Float64}(FFTW real-to-complex plan for 2048×256 array of Float64\n(rdft2-vrank>=1-x256/1\n  (rdft2-ct-dit/32\n    (hc2c-direct-32/124/1 \"hc2cfdftv_32_avx2\"\n      (rdft2-r2hc-direct-32 \"r2cf_32\")\n      (rdft2-r2hc01-direct-32 \"r2cfII_32\"))\n    (dft-direct-64-x16 \"n2fv_64_avx2\"))), FFTW r2r RODFT10 plan for 2048×256 array of Float64\n(rodft10e-r2hc-256-x2048\n  (rdft-ct-dit/8\n    (hc2hc-direct-8/14 \"hf_8\"\n      (rdft-r2hc-direct-r2c-8 \"r2cf_8\")\n      (rdft-r2hc01-direct-r2c-8 \"r2cfII_8\"))\n    (rdft-buffered-32-x8/8-6\n      (rdft-r2hc-direct-r2c-32-x8 \"r2cf_32\")\n      (rdft-rank0-memcpy-loop/32-x8)\n      (rdft-nop)))), FFTW r2r REDFT10 plan for 2048×256 array of Float64\n(redft10e-r2hc-256-x2048\n  (rdft-ct-dit/8\n    (hc2hc-direct-8/14 \"hf_8\"\n      (rdft-r2hc-direct-r2c-8 \"r2cf_8\")\n      (rdft-r2hc01-direct-r2c-8 \"r2cfII_8\"))\n    (rdft-buffered-32-x8/8-6\n      (rdft-r2hc-direct-r2c-32-x8 \"r2cf_32\")\n      (rdft-rank0-memcpy-loop/32-x8)\n      (rdft-nop)))), 0.00048828125 * FFTW complex-to-real plan for 1025×256 array of ComplexF64\n(rdft2-buffered-2048-x8/256-6\n  (rdft2-ct-dif/32\n    (hc2c-direct-32/124/1-x8 \"hc2cbdftv_32_avx2\"\n      (rdft2-hc2r-direct-32 \"r2cb_32\")\n      (rdft2-hc2r10-direct-32 \"r2cbIII_32\"))\n    (dft-vrank>=1-x8/1\n      (dft-direct-64-x16 \"n1bv_64_avx2\")))\n  (dft-r2hc-1\n    (rdft-rank0-iter-ci/2050-x8))\n  (rdft2-nop)), 0.001953125 * FFTW r2r RODFT01 plan for 2048×256 array of Float64\n(rodft01e-r2hc-256-x2048\n  (rdft-ct-dit/8\n    (hc2hc-direct-8/14 \"hf_8\"\n      (rdft-r2hc-direct-r2c-8 \"r2cf_8\")\n      (rdft-r2hc01-direct-r2c-8 \"r2cfII_8\"))\n    (rdft-buffered-32-x8/8-6\n      (rdft-r2hc-direct-r2c-32-x8 \"r2cf_32\")\n      (rdft-rank0-memcpy-loop/32-x8)\n      (rdft-nop)))), 0.001953125 * FFTW r2r REDFT01 plan for 2048×256 array of Float64\n(redft01e-r2hc-256-x2048\n  (rdft-ct-dit/8\n    (hc2hc-direct-8/14 \"hf_8\"\n      (rdft-r2hc-direct-r2c-8 \"r2cf_8\")\n      (rdft-r2hc01-direct-r2c-8 \"r2cfII_8\"))\n    (rdft-buffered-32-x8/8-6\n      (rdft-r2hc-direct-r2c-32-x8 \"r2cf_32\")\n      (rdft-rank0-memcpy-loop/32-x8)\n      (rdft-nop)))))), Main.var\"##240\".forcing, (L = 20.0, H = 0.05, τ = 18.84955592153876))","category":"page"},{"location":"literated/forced_secondary_circulation/#Time-dependence-of-the-forcing","page":"Forced secondary circulation","title":"Time dependence of the forcing","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"fig = fig = Figure(; size=(1200, 400))\nLabel(fig[1, :], \"Forcing time dependence\"; tellwidth=false)\nax = Axis(\n    fig[2, :];\n    xlabel=L\"t \\ [\\text{inertial periods}]\",\n    ylabel=L\"\\sigma\\left(\\frac{t}{\\tau}\\right)\",\n)\ntime = 0.0:0.1:10.0\nlines!(ax, time, forcing_temporal.(time / 3))\nxlims!(ax, 0, 10)\nylims!(ax, 0, nothing)\n\ncurrent_figure() # hide\nfig","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"<img width=1200 height=400 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>","category":"page"},{"location":"literated/forced_secondary_circulation/#Setting-up-the-problem","page":"Forced secondary circulation","title":"Setting up the problem","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Now we pass in the forcing as a keyword argument when constructing the problem.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"problem = Problem(domain, background_flow; ζ_forcing=physical_forcing)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Problem:\n  ├─────────── domain: Domain with eltype Float64 and physical size (2048, 256)\n  ├─────── background: BackgroundFlow with f = 1 and Vx,Bx,Bz = 2048×256 Matrix{Float64}\n  ├──────── ζ_forcing: PointwisePhysicalForcing{Float64, @NamedTuple{L::Float64, H::Float64, τ::Float64}}\n  ├──────── v_forcing: NoForcing{Float64}\n  ├──────── b_forcing: NoForcing{Float64}\n  └──────────── state: ζ,ζₜ = 1025×256 FSVariable{Float64}, v,b = 2048×256 XZVariable{Float64}, clock = Clock(t = 0, iteration = 0)\n","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"We can also pass in PointwisePhysicalForcing or PointwiseSpectralForcing as keyword arguments v_forcing and b_forcing for v and b respectively.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"We don't need to set any initial conditions but we'll use a preconditioner.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"preconditioner = DiagonalQuadraticPreconditioner(domain, 1.0, N²)\nts = Timestepper(problem, 2π / 20, preconditioner)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Timestepper:\n  ├───────── problem: Problem{Float64, PointwisePhysicalForcing{Float64, @NamedTuple{L::Float64, H::Float64, τ::Float64}}, NoForcing{Float64}, NoForcing{Float64}}\n  ├──────── timestep: h = 0.31416\n  ├─────────────── 𝓒: SawyerEliassenSolver.Timesteppers.DIRKNCoefficients{Float64}\n  ├───────────── cgs: SawyerEliassenSolver.Timesteppers.ConjugateGradientSolver{Float64}\n  └─────────────── 𝓟: DiagonalQuadraticPreconditioner with ω₀² = 1, ω₁² = 1e+05\n","category":"page"},{"location":"literated/forced_secondary_circulation/#Output","page":"Forced secondary circulation","title":"Output","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Let's save u and w to visualise the overturning circulation that we're forcing. Also compute and save the background buoyancy.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"output_writer = OutputWriter(problem, \"forced_secondary_circulation.h5\"; overwrite=true)\nadd_output_variables!(\n    output_writer; u=OutputVariables.u(problem), w=OutputVariables.w(problem)\n)\nwrite_attributes!(\n    output_writer; f=1.0, M²=M², N²=N², L=parameters.L, H=parameters.H, tau=parameters.τ\n)\nwrite_background_buoyancy!(output_writer)\nwrite!(output_writer)","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"Run the simulation.","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"for ii in 1:40\n    advance!(ts, 5)\n    write!(output_writer)\nend","category":"page"},{"location":"literated/forced_secondary_circulation/#Movie","page":"Forced secondary circulation","title":"Movie","text":"","category":"section"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"output = h5open(\"forced_secondary_circulation.h5\", \"r\") do h5\n    (\n        u=read_dataset(h5, \"u\"),\n        w=read_dataset(h5, \"w\"),\n        time=read_dataset(h5, \"time\"),\n        x=read_dataset(h5, \"x\"),\n        z=read_dataset(h5, \"z\"),\n        B=read_dataset(h5, \"B\"),\n    )\nend;\n\nn = Observable(1)\nuₙ = @lift output[:u][:, :, $n]\nwₙ = @lift output[:w][:, :, $n]\ntitle = @lift @sprintf \"t = %.2f inertial periods\" output[:time][$n] / 2π\n\nfig = Figure(; size=(1200, 400))\nLabel(fig[1, 1:2], title; tellwidth=false)\nax_u = Axis(fig[2, 1]; ylabel=\"z\")\nax_w = Axis(fig[2, 2]; xlabel=\"x\", ylabel=\"z\")\nlinkaxes!(ax_u, ax_w)\n\ncf_u = heatmap!(\n    ax_u, output[:x], output[:z], uₙ; colormap=:balance, colorrange=(-0.01, 0.01)\n)\nColorbar(fig[3, 1], cf_u; vertical=false, label=L\"u\", labelpadding=10)\ncontour!(ax_u, output[:x], output[:z], output[:B]; color=:black)\n\ncf_w = heatmap!(\n    ax_w, output[:x], output[:z], wₙ; colormap=:balance, colorrange=(-1e-4, 1e-4)\n)\nColorbar(fig[3, 2], cf_w; vertical=false, label=L\"w\", labelpadding=10)\ncontour!(ax_w, output[:x], output[:z], output[:B]; color=:black)\n\nrecord(fig, \"forced_secondary_circulation.mp4\", 1:length(output[:time]); framerate=10) do i\n    n[] = i\nend","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"\"forced_secondary_circulation.mp4\"","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"(Image: )","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"","category":"page"},{"location":"literated/forced_secondary_circulation/","page":"Forced secondary circulation","title":"Forced secondary circulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Numerical-Solution","page":"Numerics","title":"Numerical Solution","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"The Sawyer-Eliassen equation can be written in the form","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\n    zeta_tt = -mathcalLzeta + F \nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"with the accompanying v and b equations","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginalign\n    v_t  = -u(f + V_x) - wV_z + mathcalF^(y)  \n    b_t  = -uB_x - wBz + mathcalB\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"where ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation*\n        u = -psi_z quad w = psi_x quad psi = nabla^-2zeta \nendequation*","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Pseudospectral-discretisation","page":"Numerics","title":"Pseudospectral discretisation","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"The Sawyer-Eliassen operator mathcalL varies in space but not time whereas the forcings are functions of space and time. We use a pseudospectral discretisation solving for zeta in spectral space. Enforcing the boundary conditions in z we express zeta in Fourier-sine modes. u and w are then computed in Fourier-cosine and Fourier-sine space respectively. Products between the background flow and waves are computed in physical space and a user prescribed number of the highest wavenumber modes are zeroed-out in order to dealias the solution. v and b only ever exist in physical space.","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Diagonally-Implicit-Runge-Kutta-Nyström","page":"Numerics","title":"Diagonally Implicit Runge-Kutta Nyström","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"We utilise a 2-stage 3rd-order accurate diagonally implicit Runge-Kutta Nyström (DIRKN) timestepping scheme due to Sharp et al. (1990). The state variables are advanced according to ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginalign\n    zeta^n+1  = zeta^n + h zeta_t + h^2 sum_j=1^2 b_j zeta_tt^n+c_j  \n    zeta_t^n+1  = zeta_t^n  + h sum_j=1^2 b_j^prime zeta_tt^n+c_j  \n    v^n+1  = v^n + h sum_j=1^2 b_j^prime v_t^n+c_j  \n    b^n+1  = b^n + h sum_j=1^2 b_j^prime b_t^n+c_j\nendalign","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"with the intermediate stages defined by the implicit equations ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\n    zeta^n + c_j = zeta_n + c_j h zeta_t + h^2 sum_k=1^j a_jk zeta_tt^n + c_k\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"To solve, we define the implicit Sawyer-Eliassen operator mathcalL^I equiv I + h^2 a_ii mathcalL. As is typical of DIRKN schemes we take the diagonal elements a_11 and a_22 to be the same. Then we proceed by solving ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\n    mathcalL^Izeta^n + c_1 = zeta^n + c_1 h zeta_t^n + h^2 a_11 F^n + c_1\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"and then ","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\n    mathcalL^Izeta^n + c_2 = zeta^n + c_2 h zeta_t^n + h^2 a_21 left( - mathcalLzeta^n + c_1 + F^n + c_1right) + h^2 a_22 F^n + c_2\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/#Coefficients","page":"Numerics","title":"Coefficients","text":"","category":"section"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"Sharp et al. (1990) derive conditions under which the numerical scheme is 3rd order accurate. The coefficients form a one-parameter family which we write in terms of c = c_1.","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"beginequation\nbegingathered\n    c_2 = frac3c - 23(2c-1) quad\n    a_11 = a_22 = frac12c^2 quad\n    a_21 = frac-2(9c^4 - 9c^3 + 3c - 1)9(2c-1)^2 \n    b_1 = frac1 - c4(3c^2 - 3c + 1) quad \n    b_2 = frac(3c-1)(2c-1)4(3c^2 - 3c + 1)  \n    b_1 = frac14(3c^2 - 3c + 1) quad \n    b_2 = frac3(2c-1)^24(3c^2 - 3c + 1)    \nendgathered\nendequation","category":"page"},{"location":"Sawyer-Eliassen equation/numerics/","page":"Numerics","title":"Numerics","text":"The numerical scheme is only R-stable (unconditionally stable when mathcalL is positive definite) for certain ranges of c. By default we use c = 1714.","category":"page"},{"location":"library/output/#Output","page":"Output","title":"Output","text":"","category":"section"},{"location":"library/output/","page":"Output","title":"Output","text":"Modules = [SawyerEliassenSolver.Output]\nPrivate = false","category":"page"},{"location":"library/output/#SawyerEliassenSolver.Output","page":"Output","title":"SawyerEliassenSolver.Output","text":"\n\n\n\n","category":"module"},{"location":"library/output/#SawyerEliassenSolver.Output.ConstantOutputVariable","page":"Output","title":"SawyerEliassenSolver.Output.ConstantOutputVariable","text":"struct ConstantOutputVariable{O, N} <: AbstractArray{O, N}\n\nA struct to output a constant (time independent) variable.\n\nFields\n\narray\ndimension_labels\n\narray is the array storing the data to be output. dimension_labels is a tuple of dimension labels. When added to an OutputWriter these labels are used to attach dimension scales (coordinates) to the output variable.\n\nnote: Note\nDimension labels are not required to be associated with a dimension scale. But if they are then the size of the dimension must match.\n\n\n\n\n\n","category":"type"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"struct OutputVariable{T, N, O, A} <: AbstractArray{O, N}\n\nA struct to create output variables.\n\nFields\n\nproblem\nfunc\ndimension_labels\noutput_array\nargs\n\nfunc is a function with signature     func(problem::Problem, output_array::AbstractArray{T,N}, args...) that computes the output field in-place in output_array. args are the arguments to func. dimension_labels is a tuple of dimension labels. When added to an OutputWriter these labels are used to attach dimension scales (coordinates) to the output variable.\n\nnote: Note\nDimension labels are not required to be associated with a dimension scale. But if they are then the size of the dimension must match.\n\n\n\n\n\n","category":"type"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{N}, Tuple{S}, Tuple{T}, Tuple{Problem{T}, Function, NamedTuple{S, NTuple{N, Integer}}, Type, Any}} where {T, S, N}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimensions::NamedTuple{S, NTuple{N, Integer}},\n    type::Type,\n    args\n) -> OutputVariable\n\n\nCreate an output variable specifying the dimension labels and sizes in a named tuple.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{N}, Tuple{S}, Tuple{T}, Tuple{Problem{T}, Function, NamedTuple{S, NTuple{N, Integer}}, Type}} where {T, S, N}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimensions::NamedTuple{S, NTuple{N, Integer}},\n    type::Type\n) -> OutputVariable{_A, _B, T, Tuple{}} where {_A, _B, T}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{N}, Tuple{T}, Tuple{Problem{T}, Function, NTuple{N, Union{Nothing, Symbol}}, NTuple{N, Integer}, Type, Any}} where {T, N}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimension_labels::NTuple{N, Union{Nothing, Symbol}},\n    sizes::NTuple{N, Integer},\n    type::Type,\n    args\n) -> OutputVariable\n\n\nCreate an output variable creating the output array of shape sizes and type type.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{N}, Tuple{T}, Tuple{Problem{T}, Function, NTuple{N, Union{Nothing, Symbol}}, NTuple{N, Integer}, Type}} where {T, N}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimension_labels::NTuple{N, Union{Nothing, Symbol}},\n    sizes::NTuple{N, Integer},\n    type::Type\n) -> OutputVariable{_A, _B, T, Tuple{}} where {_A, _B, T}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariable-Union{Tuple{O}, Tuple{N}, Tuple{T}, Tuple{Problem{T}, Function, NTuple{N, Union{Nothing, Symbol}}, AbstractArray{O, N}}} where {T, N, O}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariable","text":"OutputVariable(\n    problem::Problem{T},\n    func::Function,\n    dimension_labels::NTuple{N, Union{Nothing, Symbol}},\n    output_array::AbstractArray{O, N}\n) -> OutputVariable{_A, _B, _C, Tuple{}} where {_A, _B, _C}\n\n\nCreate an output variable with a function that takes no additional arguments.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputWriter","page":"Output","title":"SawyerEliassenSolver.Output.OutputWriter","text":"struct OutputWriter{T, D}\n\nStruct for writing output to an HDF5 file.\n\n\n\n\n\n","category":"type"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputWriter-Union{Tuple{T}, Tuple{Problem{T}, String, NamedTuple}} where T","page":"Output","title":"SawyerEliassenSolver.Output.OutputWriter","text":"OutputWriter(\n    problem::Problem{T},\n    filepath::String,\n    coordinates::NamedTuple;\n    overwrite\n) -> OutputWriter{_A, NamedTuple{names, T}} where {_A, names, T<:Tuple}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputWriter-Union{Tuple{T}, Tuple{Problem{T}, String}} where T","page":"Output","title":"SawyerEliassenSolver.Output.OutputWriter","text":"OutputWriter(\n    problem::Problem{T},\n    filepath::String;\n    overwrite\n) -> OutputWriter{_A, NamedTuple{(:x, :z), var\"#s182\"}} where {_A, var\"#s182\"<:Tuple{Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}, Union{LinRange{Float32, Int64}, LinRange{Float64, Int64}}}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.add_output_variables!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.add_output_variables!","text":"add_output_variables!(\n    output_writer::OutputWriter;\n    kwargs...\n)\n\n\nAdd OutputVariables to the OutputWriter. Excepts keyword arguments where the key is the name of the variable and the value an OutputVariable.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.compute!-Tuple{OutputVariable}","page":"Output","title":"SawyerEliassenSolver.Output.compute!","text":"compute!(output_variable::OutputVariable) -> Any\n\n\nCompute the output field in-place in output_variable.output_array.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.integrate_periodic_gradients-Tuple{XZVariable, XZVariable}","page":"Output","title":"SawyerEliassenSolver.Output.integrate_periodic_gradients","text":"integrate_periodic_gradients(\n    x_derivative::XZVariable,\n    z_derivative::XZVariable;\n    out,\n    FZ_working_space\n) -> XZVariable\n\n\nIntegrate periodic gradients. out is the output variable and can be the same as x_derivative or z_derivative.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write!","text":"write!(ow::OutputWriter)\n\n\nCompute and write the output variables to the output file.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_Bx!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_Bx!","text":"write_Bx!(output_writer::OutputWriter; name)\n\n\nWrite the current background B_x to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_Bz!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_Bz!","text":"write_Bz!(output_writer::OutputWriter; name)\n\n\nWrite the current background B_z to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_Vx!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_Vx!","text":"write_Vx!(output_writer::OutputWriter; name)\n\n\nWrite the current background V_x to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_attributes!-Tuple{OutputWriter, Vararg{Any}}","page":"Output","title":"SawyerEliassenSolver.Output.write_attributes!","text":"write_attributes!(ow::OutputWriter, attributes...)\n\n\nWrite attributes to the output file. Attributes should be provided as (key,value) or key => value where key can be converted to a string.\n\nwarning: Warning\nThis is just a thin wrapper around HDF5.write_attribute and will error if the value is not compatible with HDF5.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_attributes!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_attributes!","text":"write_attributes!(ow::OutputWriter; attributes...)\n\n\nWrite attributes to the output file providing the attributes as keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_background_buoyancy!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_background_buoyancy!","text":"write_background_buoyancy!(ow::OutputWriter; name)\n\n\nIntegrate the background buoyancy gradients and write to output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_background_flow!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_background_flow!","text":"write_background_flow!(ow::OutputWriter; f, Vx, Bx, Bz)\n\n\nWrite the background flow to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_background_velocity!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_background_velocity!","text":"write_background_velocity!(ow::OutputWriter; name)\n\n\nIntegrate the background velocity gradients and write to output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_constant_array!-Union{Tuple{N}, Tuple{T}, Tuple{OutputWriter, AbstractArray{T, N}, String}, Tuple{OutputWriter, AbstractArray{T, N}, String, NTuple{N, Union{Nothing, Symbol}}}} where {T, N}","page":"Output","title":"SawyerEliassenSolver.Output.write_constant_array!","text":"write_constant_array!(\n    output_writer::OutputWriter,\n    array::AbstractArray{T, N},\n    name::String\n)\nwrite_constant_array!(\n    output_writer::OutputWriter,\n    array::AbstractArray{T, N},\n    name::String,\n    dimension_labels::NTuple{N, Union{Nothing, Symbol}}\n)\n\n\nCreate a ConstantOutputVariable and write it to the file created by an OutputWriter in one go.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.write_f!-Tuple{OutputWriter}","page":"Output","title":"SawyerEliassenSolver.Output.write_f!","text":"write_f!(output_writer::OutputWriter; name)\n\n\nWrite the background f as an attribute to the output writer.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#OutputVariables","page":"Output","title":"OutputVariables","text":"","category":"section"},{"location":"library/output/","page":"Output","title":"Output","text":"Modules = [SawyerEliassenSolver.Output.OutputVariables]\nPrivate = false","category":"page"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables","text":"Implementation of common output variables for the Sawyer-Eliassen solver.\n\nExports\n\nb\np\nu\nv\nw\nΨ\nζ\n∂u∂x\n∂u∂z\n∂w∂x\n∂w∂z\n∂²u∂x²\n∂²u∂x∂z\n∂²u∂z²\n∂²w∂x²\n∂²w∂x∂z\n∂²w∂z²\n\n\n\n\n\n","category":"module"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.b-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.b","text":"b(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.p-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.p","text":"p(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, A} where {_A, _B, A<:Tuple{FZVariable}}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.u-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.u","text":"u(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.v-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.v","text":"v(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.w-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.w","text":"w(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.Ψ-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.Ψ","text":"Ψ(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\nThe streamfunction Ψ.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.ζ-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.ζ","text":"ζ(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\nThe vorticity ζ.\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂u∂x-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂u∂x","text":"∂u∂x(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂u∂z-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂u∂z","text":"∂u∂z(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂w∂x-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂w∂x","text":"∂w∂x(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂w∂z-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂w∂z","text":"∂w∂z(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²u∂x²-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²u∂x²","text":"∂²u∂x²(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²u∂x∂z-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²u∂x∂z","text":"∂²u∂x∂z(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²u∂z²-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²u∂z²","text":"∂²u∂z²(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²w∂x²-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²w∂x²","text":"∂²w∂x²(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²w∂x∂z-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²w∂x∂z","text":"∂²w∂x∂z(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/output/#SawyerEliassenSolver.Output.OutputVariables.∂²w∂z²-Tuple{Problem}","page":"Output","title":"SawyerEliassenSolver.Output.OutputVariables.∂²w∂z²","text":"∂²w∂z²(\n    problem::Problem\n) -> OutputVariable{_A, 2, _B, Tuple{}} where {_A, _B}\n\n\n\n\n\n\n","category":"method"},{"location":"library/forcing/#Forcing","page":"Forcing","title":"Forcing","text":"","category":"section"},{"location":"library/forcing/","page":"Forcing","title":"Forcing","text":"Modules = [SawyerEliassenSolver.Forcing]\nPrivate = false","category":"page"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing","text":"Module for implementing different RHS forcings.\n\nExports\n\nAbstractForcingFunction\nGlobalPhysicalForcing\nGlobalSpectralForcing\nNoForcing\nPhysicalForcing\nPointwisePhysicalForcing\nPointwiseSpectralForcing\nSpectralForcing\n\n\n\n\n\n","category":"module"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.PhysicalForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.PhysicalForcing","text":"Union of types representing forcing in physical (XZ) space.\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.SpectralForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.SpectralForcing","text":"Union of types representing forcing in spectral (FS) space.\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.AbstractForcingFunction","page":"Forcing","title":"SawyerEliassenSolver.Forcing.AbstractForcingFunction","text":"Abstract super type for all forcings.\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.GlobalPhysicalForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.GlobalPhysicalForcing","text":"struct GlobalPhysicalForcing{T, P} <: AbstractForcingFunction{T}\n\nApply global forcing to the Sawyer-Eliassen equation in physical space. func is a function that updates the entire forcing variable in-place at time t. func should have signature func(F::XZVariable{T},t::T,params::P)::Nothing where {T<:Union{Float32,Float64}}.\n\nFields\n\ndomain::Domain{T} where T\nfunc::Function\nparams::Any\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.GlobalSpectralForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.GlobalSpectralForcing","text":"struct GlobalSpectralForcing{T, P} <: AbstractForcingFunction{T}\n\nApply global forcing to the Sawyer-Eliassen equation in spectral space. func is a function that updates the entire forcing variable in-place at time t. func should have signature func(F::FSVariable{T},t::T,params::P)::Nothing where {T<:Union{Float32,Float64}}. Note that the FSVariable{T} has entries of type Complex{T}.\n\nFields\n\ndomain::Domain{T} where T\nfunc::Function\nparams::Any\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.NoForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.NoForcing","text":"Type representing no forcing.\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.PointwisePhysicalForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.PointwisePhysicalForcing","text":"struct PointwisePhysicalForcing{T, P} <: AbstractForcingFunction{T}\n\nApply pointwise forcing to the Sawyer-Eliassen equation in physical space. func is a function that computes the forcing at a given position and time. func should have signature func(x::T,z::T,t::T,params::P)::T where {T<:Union{Float32,Float64}}.\n\nFields\n\ndomain::Domain{T} where T\nfunc::Function\nparams::Any\n\n\n\n\n\n","category":"type"},{"location":"library/forcing/#SawyerEliassenSolver.Forcing.PointwiseSpectralForcing","page":"Forcing","title":"SawyerEliassenSolver.Forcing.PointwiseSpectralForcing","text":"struct PointwiseSpectralForcing{T, P} <: AbstractForcingFunction{T}\n\nApply pointwise forcing to the Sawyer-Eliassen equation in spectral space. func is a function that computes the forcing at given wavenumbers and time. func should have signature func(kx::T,kz::T,t::T,params::P)::complex{T} where {T<:Union{Float32,Float64}}.\n\nFields\n\ndomain::Domain{T} where T\nfunc::Function\nparams::Any\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SawyerEliassenSolver","category":"page"},{"location":"#SawyerEliassenSolver","page":"Home","title":"SawyerEliassenSolver","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SawyerEliassenSolver.","category":"page"},{"location":"examples/baroclinic_vorticity_filament/#Baroclinic-Vorticity-Filament","page":"Baroclinic Vorticity Filament","title":"Baroclinic Vorticity Filament","text":"","category":"section"}]
}
